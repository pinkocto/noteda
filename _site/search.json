[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/etc/2023-03-21-scorecard.html",
    "href": "posts/etc/2023-03-21-scorecard.html",
    "title": "Scorecard",
    "section": "",
    "text": "import pandas as pd\n\n\ncol = ['Model', 'scaling', 'Oversampling', 'Undersampling','hyper tunning', 'train(macro F1)','test(macro F1)', 'sub score']\n\n\ndf_row = pd.DataFrame(columns = col)\ndf_row['Model'] = ['DT','et']\n# df_row['missing'] = ['X'] # 해당 데이터는 결측치 없음.\ndf_row['scaling'] = ['X', 'O']\ndf_row['Oversampling'] = ['X', 'SMOTE']\ndf_row['Undersampling'] = ['X', 'X']\ndf_row['hyper tunning'] = ['X', 'O']\ndf_row['train(macro F1)'] = [1.0, 1.0]\ndf_row['test(macro F1)'] = [0.69, 0.76]\ndf_row['sub score'] = [0.73807, 0.76054]\n\n\ndf_row\n\n\n\n\n\n  \n    \n      \n      Model\n      scaling\n      Oversampling\n      Undersampling\n      hyper tunning\n      train(macro F1)\n      test(macro F1)\n      sub score\n    \n  \n  \n    \n      0\n      DT\n      X\n      X\n      X\n      X\n      1.0\n      0.69\n      0.73807\n    \n    \n      1\n      et\n      O\n      SMOTE\n      X\n      O\n      1.0\n      0.76\n      0.76054"
  },
  {
    "objectID": "posts/etc/2023-03-21-scorecard.html#r버전",
    "href": "posts/etc/2023-03-21-scorecard.html#r버전",
    "title": "Scorecard",
    "section": "R버전",
    "text": "R버전\n\nimport rpy2\n\n\n%load_ext rpy2.ipython\n\n\nrpy2.__version__\n\n'3.5.1'\n\n\n\n# !pip install rpy2==3.5.1\n\n\n%%R\nscore <- matrix(0, ncol=6, nrow=6, byrow=T)\ncolnames(score) <- c('변수','스케일링','변수변환','이상치제거','변동사항', 'R2')\n\n\n%%R\nscore[1,] <- c('집값, 실거주면적','X','X','X','단순선형회귀(절편O)',0.5021)\nscore[2,] <- c('집값, 실거주면적','X','X','X','단순선형회귀(절편X)',0.9186)\nscore[3,] <- c('집값, 실거주면적','X','X','O','단순선형회귀(절편O) + 이상치제거',0.5402)\nscore[4,] <- c('집값, 실거주면적','X','X','O','단순선형회귀(절편X) + 이상치제거',0.9255)\nscore[5,] <- c('집값, 실거주면적','X','O','O','단순선형회귀(절편X) + 이상치제거',0.5259)\nscore[6,] <- c('집값, 실거주면적','X','O','O','단순선형회귀(절편X) + 이상치제거',0.9120)\n\n\n%%R\ndata.frame(score)\n\n              변수 스케일링 변수변환 이상치제거\n1 집값, 실거주면적        X        X          X\n2 집값, 실거주면적        X        X          X\n3 집값, 실거주면적        X        X          O\n4 집값, 실거주면적        X        X          O\n5 집값, 실거주면적        X        O          O\n6 집값, 실거주면적        X        O          O\n                          변동사항     R2\n1              단순선형회귀(절편O) 0.5021\n2              단순선형회귀(절편X) 0.9186\n3 단순선형회귀(절편O) + 이상치제거 0.5402\n4 단순선형회귀(절편X) + 이상치제거 0.9255\n5 단순선형회귀(절편X) + 이상치제거 0.5259\n6 단순선형회귀(절편X) + 이상치제거  0.912\n\n\n\nref: r,python 둘다쓰는법\nref: 패키지특정버전업데이트\nref: rpy2에러해결"
  },
  {
    "objectID": "posts/etc/2023-04-05-ppt.html",
    "href": "posts/etc/2023-04-05-ppt.html",
    "title": "ppt 폰트",
    "section": "",
    "text": "https://m.blog.naver.com/yeeeeeei/220672713797"
  },
  {
    "objectID": "posts/etc/2023-03-21-lib.html",
    "href": "posts/etc/2023-03-21-lib.html",
    "title": "Libraries for DA",
    "section": "",
    "text": "Library\nDescription\n\n\n\n\n1.Numpy (Numeric + Python)\n과학/수학과 관련된 연산, 계산을 수행하는 함수의 집합\n\n\n2. Pandas (Panel + Data Set)\n정형데이터 분석 및 통계 연산을 수행하는 함수들의 집합\n\n\n3. Matplotlib (Matlab + Python)\n수치형 자료에 대한 시각화 함수들의 집합\n\n\n4. Seaborn\n정형데이터의 통계적 연산 및 시각화\n\n\n5. Scipy\n응용통계연산 (가설검정 / 회귀 분석 / 시계열) 함수들의 집합\n\n\n6. Scikit Learn\n정형데이터의 기계학습 기법에 관련한 함수들의 집합\n\n\n7. Missingno\n결측값을 시각화하는 함수들의 집합\n\n\n8. Plotly\n정형데이터 시각화 (동적시각화) 함수들의 집합\n\n\n9. Tensorflow\n비정형 데이터의 기계학습(신경망, 딥러닝) 함수들의 집합\n\n\n10. Keras\n신경망 알고리즘을 간단하게 사용할 수 있는 함수들의 집합\n\n\n11. NLTK\n영어 자연어 처리를 수행하는 함수들의 집합\n\n\n12. KoNLPy\n한국어 자연어 처리를 수행하는 함수들의 집합\n\n\n13. OpenCV\n컴퓨터 비전 (이미지 또는 영상처리) 함수들의 집합\n\n\n14. Gym\n강화학습과 관련한 함수들의 집합 (Chat GPT)"
  },
  {
    "objectID": "posts/etc/2023-04-02-abstract.html",
    "href": "posts/etc/2023-04-02-abstract.html",
    "title": "초록 작성법",
    "section": "",
    "text": "https://blog.essayreview.co.kr/difference-between-the-abstract-and-the-introduction-of-a-thesis/"
  },
  {
    "objectID": "posts/etc/2023-04-02-abstract.html#논문-초록과-서론의-차이점",
    "href": "posts/etc/2023-04-02-abstract.html#논문-초록과-서론의-차이점",
    "title": "초록 작성법",
    "section": "논문 초록과 서론의 차이점",
    "text": "논문 초록과 서론의 차이점\n초록(Abstract)은 논문 전체 내용을 요약하여 연구배경, 연구목표, 연구방법, 결과, 결론 이 구조를 따라 작성되기 때문에 서론+본론+결론 모든 내용이 포함됩니다. 대부분의 학술지에서는 보통 200-300단어로 제한하기 때문에 최대한 함축하여 핵심만 담아내야 하며, 독자들이 누구든 읽기 쉽고 명확하게 작성돼야 합니다\n서론(Introduction)은 연구 배경에 대해 자세한 정보를 제공하는 것이 목적입니다. 일부 저자들은 용어나 개념을 정의하거나 논문 순서를 설명하기도 합니다.\n\n\n\n논문 초록과 서론의 차이점"
  },
  {
    "objectID": "posts/etc/2023-04-02-abstract.html#논문-초록abstract이란",
    "href": "posts/etc/2023-04-02-abstract.html#논문-초록abstract이란",
    "title": "초록 작성법",
    "section": "논문 초록(abstract)이란?",
    "text": "논문 초록(abstract)이란?\n초록(abstract)은 저널 에디터와 연구원에게 논문을 간결하게 설명하고 자신의 논문을 읽도록 하는데 중요한 역할을 합니다. 온라인 데이터베이스 내의 수많은 논문 중에서, 자신의 논문을 읽도록 독자의 시선을 사로잡는 초록을 쓰는 일이 오늘날 더욱 중요해졌습니다."
  },
  {
    "objectID": "posts/etc/2023-04-02-abstract.html#논문-초록-작성-전-체크리스트",
    "href": "posts/etc/2023-04-02-abstract.html#논문-초록-작성-전-체크리스트",
    "title": "초록 작성법",
    "section": "논문 초록 작성 전 체크리스트",
    "text": "논문 초록 작성 전 체크리스트\n\n1. 초록 유형 정하기\n모든 초록은 연구를 요약합니다. 초록은 크게 두 가지 유형으로 구분될 수 있습니다: 서술형 (descriptive) 및 정보형 (informative). 다음은 이 두 가지 초록에 대한 간략한 설명입니다:\n\n서술형 초록 (Descriptive abstract): 100-200 단어; 논문의 목적 및 방법 설명하지만 결과와 결론은 생략합니다\n정보형 초록 (Informative abstract): 한 문단에서 1 페이지; 결과를 포함하여 연구의 모든 내용을 요약하는 연구 요약문\n\n두 가지 유형 중 정보형 초록 (informative abstract)이 더 많이 사용되며 저널 및 컨퍼런스에 제출할 때 사용됩니다. 정보형 초록은 더 길고 전문적인 연구에 적용되는 반면, 서술형 초록은 더 짧은 논문과 글에 더 적합합니다. 어느 초록을 사용해야 하는지 결정하는데 있어 가장 좋은 방법은 저널 투고 지침을 따르고 저널 논문을 가능한 한 많이 읽는 것입니다.\n\n\n2. 가이드라인과 요구사항 확인하기\n명시된 특정 지침과 요구 사항을 항상 철저히 준수해야 합니다. 일반적으로 저널 가이드라인에 포함된 질문은 아래와 같습니다:\n최대 또는 최소 단어/글자 수 제한이 있는가? 스타일 및 포맷팅 요구사항이 있는가? 적합한 초록 유형은? 특정 내용이나 구성이 포함되어야 하는가?\n\n\n3. 잠재 독자 생각하기\n초록의 주요 연구원들을 자신의 논문을 읽도록 연구원들을 사로잡는 것입니다. 학술 저널에서 초록은 독자가 연구가 자신의 관심 분야 또는 연구와 관련이 있는지를 알게 합니다. 초록은 독자로 하여금 자신의 연구의 논증을 빨리 이해할 수 있게 도와줍니다. 초록을 작성할 때 다음 질문을 고려합니다:\n자신의 분야에 있는 다른 학자들이 논문의 타겟 독자인가? 자신의 연구가 일반 대중에게 유용할 것인가? 연구 결과가 더 광범위한 영향을 가지고 있는가?"
  },
  {
    "objectID": "posts/etc/2023-04-02-abstract.html#논문-초록-구성방법",
    "href": "posts/etc/2023-04-02-abstract.html#논문-초록-구성방법",
    "title": "초록 작성법",
    "section": "논문 초록 구성방법",
    "text": "논문 초록 구성방법\n\n목적과 동기를 확인합니다. 왜 자신의 연구가 중요한가요 독자가 이 연구에 관심을 가져야 하는 이유를 설명하여 초록을 시작합니다—왜 자신의 분야에서 그리고 더 넓은 시각에서 자신의 연구가 중요한가요? 연구의 목적이 무엇인가요? 연구를 통해 성취하고자 하는 것이 무엇인가요? 아래 질문에 대답하여 시작합니다:\n해당 연구가 다루는 문제를 설명합니다. 해당 연구가 다루는 문제를 언급하는 것은 왜 자신의 연구가 중요하고 필요한지를 설명하는데 있어 빼먹지 말아야 할 요소입니다. 아래는 다루어야 할 질문을 보여줍니다:\n접근 방식에 대해 논의합니다 (Methods and Materials). 연구의 중요성, 연구를 하게 된 동기, 논문에서 다루는 구체적인 주제를 정한 후 해당 문제를 어떻게 해결했는지, 즉 연구를 수행한 방법에 대해 다루어야 합니다. 분석 모델, 시뮬레이션, 혹은 이중 맹검법을 사용했나요? 아래 사항을 명심하세요:\n결과를 요약합니다. 해당 연구 결과를 설명합니다. 애매한 질적인 용어를 사용하지 않고 (예: “very,” “small,” “tremendous”) 양적 용어를 사용합니다 (예: 백분율, 수치). 아래와 같은 질문에 답합니다:\n결론을 언급합니다. 초록의 마지막 부분에서 연구의 영향에 관해 언급합니다. 이를 연구 결과와 연결하여 설명합니다. 하지만 연구 결과에 대해 너무 과장해서 말해서는 안됩니다. 아래 질문 중 하나에 대답합니다:"
  },
  {
    "objectID": "posts/etc/2023-03-21-resumetable.html",
    "href": "posts/etc/2023-03-21-resumetable.html",
    "title": "resumetable",
    "section": "",
    "text": "def resumetable(df):\n    print(f'데이터셋 형상: {df.shape}')\n    summary = pd.DataFrame(df.dtypes, columns = ['데이터 타입'])\n    summary = summary.reset_index()\n    summary = summary.rename(columns = {'index':'피처'})\n    summary['결측값 개수'] = df.isnull().sum().values\n    summary['고윳값 개수'] = df.nunique().values\n    summary['첫 번째 값'] = df.loc[0].values\n    summary['두 번째 값'] = df.loc[1].values\n    summary['세 번째 값'] = df.loc[2].values\n            \n    return summary\nsummary = resumetable(train) \nsummary"
  },
  {
    "objectID": "posts/etc/2023-04-11-git-error.html",
    "href": "posts/etc/2023-04-11-git-error.html",
    "title": "Github remote: error: this exceeds GitHub’s file size limit of 100.00 MB",
    "section": "",
    "text": "- 에러내용\nremote: error: File <file path+name> is 618.76 MB; this exceeds GitHub's file size limit of 100.00 MB\nremote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.\n- 해결방법\ngit -lfs 적용\n\n단, 이미 큰 용량의 파일을 커밋한 이력이 있으면 적용이 되지 않는다\nlfs리포지토리 용량이 1gb가 넘으면 유료버전으로 가입해야한다\n\nbatch response: This repository is over its data quota. Account responsible for LFS bandwidth should purchase more data packs to restore access.\nlfs 용량초과로 위와 같은 에러가 남. 용량이 큰 파일은 올릴 수 없을 듯하다..\n어쩔수 없이 이미 push한 파일들에 대해서 취소를 해야한다."
  },
  {
    "objectID": "posts/etc/2023-04-11-git-error.html#git-push-취소",
    "href": "posts/etc/2023-04-11-git-error.html#git-push-취소",
    "title": "Github remote: error: this exceeds GitHub’s file size limit of 100.00 MB",
    "section": "Git push 취소",
    "text": "Git push 취소\n문제가 되는 파일을 먼저 따로 빼놔야 한다.\ngit push를 취소하기 위해 먼저 가장 최근의 commit을 취소하고 워킹 디렉터리를 되돌려야한다.\n$ git reset HEAD^\n위의 명령어를 실행해 최근 커밋을 취소한다.\n$ git reflog\ngit reflog 명령어를 사용하여 브랜치와 HEAD가 가리켰던 커밋 목록을 확인하여 내가 어떤 시점으로 되돌아갈 것인지 확인\n$ git reset HEAD@{number}   #원하는 시점으로 되돌아가기\n$ git commit -m \"commit messages\"   #돌아간 시점에서 커밋하기\n$ git push origin main   #되돌린 시점을 원격에 강제 push\n이렇게 원하는 시점으로 돌아가면 로컬, 원격 모두 원하는 시점 이전의 상태로 돌아간다.\n이전의 상태로 돌아갔다면 커밋 후 강제 push를 해주면 된다.\n\n\nref: lfs 할당량 에러\nref: push 취소\nref: lfs사용하여 대용량 파일 업로드"
  },
  {
    "objectID": "posts/etc/2023-02-24-tips.html",
    "href": "posts/etc/2023-02-24-tips.html",
    "title": "Julia 설치 및 실행",
    "section": "",
    "text": "Julia 설치\n설치된 Julia를 열어 Command창에 using Pkg 입력 + 엔터\nPkg.add(\"IJulia\") 입력 + 엔터\nJupyter notebook/lab 들어가서 확인\n\n결과\n\n\n\nimage.png"
  },
  {
    "objectID": "posts/etc/2023-02-24-tips.html#linux",
    "href": "posts/etc/2023-02-24-tips.html#linux",
    "title": "Julia 설치 및 실행",
    "section": "Linux",
    "text": "Linux\n\n1. 줄리아 설치\n## 설치\n>> sudo apt install wget ## wget 설치가 안되어 있다면\n>> wget https://julialang-s3.julialang.org/bin/linux/x64/1.8/julia-1.8.5-linux-x86_64.tar.gz\n\n\n\njulia 설치되고 있는 화면 캡처\n\n\n## 압축풀기\n>> tar zxvf julia-1.8.5-linux-x86_64.tar.gz\n## 심볼릭 링크 만들기\n>> sudo ln -s /home/[유저이름]/julia-1.3.1/bin/julia /usr/bin/julia\n\n\n2. 주피터와 연결\n## julia 실행\n>> julia\n>> using Pkg\n>> Pkg.add(\"IJulia\")\n\n\n3. 플루토 키는 방법\nimport Pluto\nPluto.run(host=\"0.0.0.0\",port=1234,launch_browser=false,require_secret_for_open_links=false,require_secret_for_access=false,threads=\"8\")\n\nref: https://miruetoto.github.io/yechan3/posts/4_Notes/2000-01-07-%EC%A4%84%EB%A6%AC%EC%95%84%20%EC%84%A4%EC%B9%98%20%EB%B0%8F%20%EC%8B%A4%ED%96%89.html\nref: https://freshrimpsushi.github.io/posts/how-to-install-the-latest-version-julia-in-linux/"
  },
  {
    "objectID": "posts/etc/2023-03-21-downcasting.html",
    "href": "posts/etc/2023-03-21-downcasting.html",
    "title": "downcasting",
    "section": "",
    "text": "def downcast(df, verbose=True):\n    start_mem = df.memory_usage().sum() / 1024**2\n    for col in df.columns:\n        dtype_name = df[col].dtype.name\n        if dtype_name == 'object':\n            pass\n        elif dtype_name == 'bool':\n            df[col] = df[col].astype('int8')\n        elif dtype_name.startswith('int') or (df[col].round() == df[col]).all():\n            df[col] = pd.to_numeric(df[col], downcast='integer')\n        else:\n            df[col] = pd.to_numeric(df[col], downcast='float')\n    end_mem = df.memory_usage().sum() / 1024**2\n    if verbose:\n        print('{:.1f}% 압축됨'.format(100 * (start_mem - end_mem) / start_mem))\n    \n    return df\nall_df = [sales_train, shops, items, item_categories, test]\nfor df in all_df:\n    df = downcast(df)\n\nint8 (Byte) : -128~127\nint16 (integer) : -32768~32768\nint32 (integer) : -2147483648~2147483647\nint64 (integer) : very very big\nuint8 (unsigned integer) : 0~255\nuint16 (unsigned integer) : 0~65535\nuint32 (unsigned integer) : 0~4294967295\nuint64 (unsigned integer) :0~very very big\nfloat (shortand for float64)\nfloat16 (Half precision float)\nfloat32 (Single precision float)\nfloat64"
  },
  {
    "objectID": "posts/etc/2023-04-01-학회.html",
    "href": "posts/etc/2023-04-01-학회.html",
    "title": "학회",
    "section": "",
    "text": "학술대회 모집공고\n\n￭ 일 시 : 2023년 6월 29일(목)-7월 1일(토)\n￭ 장 소 : 부경대학교\n￭ 주 최 : (사)한국통계학회\n￭ 주 관 : (사)한국통계학회, 부경대학교 통계·데이터사이언스전공\n\n발표논문초록템플릿\n초록분량 1페이지 이내\n석사생의 경우 별도로 발표요약본을 추가로 제출해야함.(A4 5장 내외)\n\n\n\n\n\n\n논문발표신청일정\n\n\n\n\n\n\n\n\nimage.png\n\n\n\n\n\n\n\n\n초록템플릿"
  },
  {
    "objectID": "posts/etc/2023-04-01-학회.html#한국데이터마이닝학회",
    "href": "posts/etc/2023-04-01-학회.html#한국데이터마이닝학회",
    "title": "학회",
    "section": "한국데이터마이닝학회",
    "text": "한국데이터마이닝학회\n\n하계학술대회 모집공고\n\n\n논문발표신청 및 등록일정\n\n▣​ 일반 논문 발표신청​\n▶️​ 초록 제출: 5월 5일 (금)​​\n▶️​ 선정 통보: 5월 7일 (금)\n▶️​ 논문 제출: 6월 16일 (금)\n▶️ 제출처: https://forms.gle/5CRQhxUqwAmbo5iu7\n\n\n▣​ SAS 학생 논문\n▶️​ 초록 및 논문 제출: 6월 9일 (금)\n▶️​ 1차 심사 결과통보: 6월 16일 (금)\n▶️​ 제출 양식 : http://kdms.or.kr/bbs/board.php?bo_table=reference&wr_id=4​\n▶️ 제출처: 사무국 e-mail (KDMSoffice@gmail.com)\n\n\n▣ 등록\n▶️​ 얼리버드 할인 등록: 현재 ~ 5월 21일 (일) - 학생 6만, 일반 12만\n▶️​ 사전 등록: 5월 22일(월) ~ 6월 22일(목) - 학생 7만, 일반 14만\n▶️​ 현장 등록: 6월 23일(금) ~ 6월 24일(토) - 학생 8만, 일반 16만\n\n\n\n논문모집분야\n\n일반논문, SAS학생논문 모집중.\n\n\n\n\nimage.png"
  },
  {
    "objectID": "posts/etc/2023-03-21-dv.html",
    "href": "posts/etc/2023-03-21-dv.html",
    "title": "data visualization",
    "section": "",
    "text": "import numpy as np\nimport missingno as msno\nmsno.matrix(df, figsize=(13,6)) ## 결측값을 매트릭스 형태로 시각화\n# msno.bar(df, figsize=(13, 6)) ## bar 형태"
  },
  {
    "objectID": "posts/etc/2023-03-21-dv.html#target-distribution-비율",
    "href": "posts/etc/2023-03-21-dv.html#target-distribution-비율",
    "title": "data visualization",
    "section": "target Distribution (+비율)",
    "text": "target Distribution (+비율)\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nimport matplotlib.pyplot as plt\nplt.rcParams['font.family'] = 'Malgun Gothic'  ## 한글깨짐 방지\ndef write_percent(ax, total_size):\n    for patch in ax.patches:\n        height = patch.get_height() # 도형 높이 (데이터 개수)\n        width = patch.get_width()\n        left_coord = patch.get_x()\n        percent = height/total_size*100 # target ratio\n        \n        ax.text(left_coord + width/2.0,\n                height + total_size*0.001,\n                '{:1.1f}%'.format(percent),\n                ha = 'center')\n   \nmpl.rc('font', size=15)\nplt.figure(figsize=(7,6))\n\nax = sns.countplot(x='target', data=train)\nwrite_percent(ax, len(train))\nax.set_title('Target Distribution')"
  },
  {
    "objectID": "posts/etc/2023-03-21-dv.html#그룹별-요약통계량-분포-시각화",
    "href": "posts/etc/2023-03-21-dv.html#그룹별-요약통계량-분포-시각화",
    "title": "data visualization",
    "section": "그룹별 요약통계량 분포 시각화",
    "text": "그룹별 요약통계량 분포 시각화\nfigure, ax = plt.subplots()\nfigure.set_size_inches(11, 5)\n\n# 상품분류별 총 상품 판매량\ngroup_cat_sum = train.groupby('item_category_id').agg({'item_cnt_day':'sum'})\ngroup_cat_sum = group_cat_sum.reset_index()\n\n# 월간 판매량이 10,000개를 초과하는 상품분류만 추출\ngroup_cat_sum2 = group_cat_sum[group_cat_sum['item_cnt_day'] > 10000].sort_values(by='item_cnt_day', ascending=False)\n\n# 상품분류별 총 상품 판매량 막대 그래프\nsns.barplot(x='item_category_id', y='item_cnt_day', data=group_cat_sum2, order=group_cat_sum2['item_category_id'])\nax.set(title='Distribution of total item counts by item category id',\n       xlabel='Data block number',\n       ylabel='Total item counts')\nax.tick_params(axis='x', labelrotation=90) # x축 라벨 회전\n\n\n\n예시 그림"
  },
  {
    "objectID": "posts/DataHandling/2023-04-06-pivot-wider-error.html",
    "href": "posts/DataHandling/2023-04-06-pivot-wider-error.html",
    "title": "[R] pivot_wider Error",
    "section": "",
    "text": "SOLAR 데이터 재구조화 과정에서 발생한 오류였음.\n\n\n\n\nError Message 캡처\n\n\n\nvalue가 유니크하지 않아서 발생하는 에러이다. 각 region별 임의로 유니크한 식별 로우를 만들어 주면 에러를 해결할 수 있음."
  },
  {
    "objectID": "posts/DataHandling/2023-04-06-pivot-wider-error.html#solution",
    "href": "posts/DataHandling/2023-04-06-pivot-wider-error.html#solution",
    "title": "[R] pivot_wider Error",
    "section": "Solution",
    "text": "Solution\ndf %>%\n  group_by(region) %>%\n  mutate(row = row_number()) %>%\n  tidyr::pivot_wider(names_from = region, values_from = solar_radiation) %>%\n  select(-row)\n\nref: https://stackoverflow.com/questions/58837773/pivot-wider-issue-values-in-values-from-are-not-uniquely-identified-output-w"
  },
  {
    "objectID": "posts/DataHandling/2023-04-02-assign.html",
    "href": "posts/DataHandling/2023-04-02-assign.html",
    "title": "[Python] 새로운 열 할당(.assign) 및 특정 열 선택",
    "section": "",
    "text": "DV2022 7wk-1 Lecture\n\n\n\n판다스로 새로운 열 할당하는 방법에는 여러 방법들이 있지만 그 중 assign으로 할당하는 것은 확장성이 있고 다양한 상황에 사용하기 좋음.\n\nimport pandas as pd\n\n\ndf = pd.DataFrame({'a':[1,2,3],'b':[2,3,4]})\ndf\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\ndf.assign(c=[3,4,5])\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n    \n    \n      1\n      2\n      3\n      4\n    \n    \n      2\n      3\n      4\n      5\n    \n  \n\n\n\n\n\ndf.assign(c=[3,4,5],d=[4,5,6])\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      2\n      3\n      4\n      5\n    \n    \n      2\n      3\n      4\n      5\n      6\n    \n  \n\n\n\n\n\ndf.assign(c=[3,4,5]).assign(d=[4,5,6])\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      2\n      3\n      4\n      5\n    \n    \n      2\n      3\n      4\n      5\n      6\n    \n  \n\n\n\n\n\n\n\ndf.assign(c=[3,4,5]).assign(d=[4,5,6])\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      2\n      3\n      4\n      5\n    \n    \n      2\n      3\n      4\n      5\n      6\n    \n  \n\n\n\n\n\ndf # 원래 데이터 프레임은 그대로 유지된다.\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\n\n\n\ndf.assign(c=[3,4,5]).assign(d=[4,5,6]) # 1->2, 2->3 으로 가는 과정이 메모리 공간안에 모두 저장되어 있다.\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      2\n      3\n      4\n      5\n    \n    \n      2\n      3\n      4\n      5\n      6\n    \n  \n\n\n\n\n\ndf ## step1\n\n\n\n\n\n  \n    \n      \n      a\n      b\n    \n  \n  \n    \n      0\n      1\n      2\n    \n    \n      1\n      2\n      3\n    \n    \n      2\n      3\n      4\n    \n  \n\n\n\n\n\ndf.assign(c=[3,4,5]) ## step2\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n    \n    \n      1\n      2\n      3\n      4\n    \n    \n      2\n      3\n      4\n      5\n    \n  \n\n\n\n\n\ndf.assign(c=[3,4,5]).assign(d=[4,5,6]) ## step3\n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      2\n      3\n      4\n      5\n    \n    \n      2\n      3\n      4\n      5\n      6\n    \n  \n\n\n\n\n\n## d=[4,5,6] >> d = [4,-5,6]으로 변환.\ndf.assign(c=[3,4,5]).assign(d=[4,-5,6]) \n\n\n\n\n\n  \n    \n      \n      a\n      b\n      c\n      d\n    \n  \n  \n    \n      0\n      1\n      2\n      3\n      4\n    \n    \n      1\n      2\n      3\n      4\n      -5\n    \n    \n      2\n      3\n      4\n      5\n      6"
  },
  {
    "objectID": "posts/DataHandling/2023-04-02-assign.html#예시1",
    "href": "posts/DataHandling/2023-04-02-assign.html#예시1",
    "title": "[Python] 새로운 열 할당(.assign) 및 특정 열 선택",
    "section": "예시1",
    "text": "예시1\ncolor ~ num_voted_user를 뽑고 + aspect_ratio도 추가적으로 뽑으시오.\n\n- 안되는 예\n\ndf.loc[:,['color':'num_voted_users','aspect_ratio']] # 이건 안됨.\n\nSyntaxError: invalid syntax (<ipython-input-21-b5b8957e5ac9>, line 1)\n\n\n\n\n- 해결 (iloc 이용)\nTip! : 복잡한 조건은 iloc으로 쓰는게 편할때가 있다. \\(\\to\\) 그런데 df.columns 변수들이 몇번인지 알아보기 힘듬 \\(\\to\\) 아래와 같이 하면 열의 이름을 인덱스와 함께 출력할 수 있음\n\npd.Series(df.columns) # 매우 편함.\n\n0                         color\n1                 director_name\n2        num_critic_for_reviews\n3                      duration\n4       director_facebook_likes\n5        actor_3_facebook_likes\n6                  actor_2_name\n7        actor_1_facebook_likes\n8                         gross\n9                        genres\n10                 actor_1_name\n11                  movie_title\n12              num_voted_users\n13    cast_total_facebook_likes\n14                 actor_3_name\n15         facenumber_in_poster\n16                plot_keywords\n17              movie_imdb_link\n18         num_user_for_reviews\n19                     language\n20                      country\n21               content_rating\n22                       budget\n23                   title_year\n24       actor_2_facebook_likes\n25                   imdb_score\n26                 aspect_ratio\n27         movie_facebook_likes\ndtype: object\n\n\n\n해당 열의 인덱스와 컬럼명이 같이 출력된다. 일일이 세지 않아도 된다.\n\n\nlist(range(13))+[26]\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 26]\n\n\n\ndf.iloc[:,list(range(13))+[26]].head(2)\n\n\n\n\n\n  \n    \n      \n      color\n      director_name\n      num_critic_for_reviews\n      duration\n      director_facebook_likes\n      actor_3_facebook_likes\n      actor_2_name\n      actor_1_facebook_likes\n      gross\n      genres\n      actor_1_name\n      movie_title\n      num_voted_users\n      aspect_ratio\n    \n  \n  \n    \n      0\n      Color\n      James Cameron\n      723.0\n      178.0\n      0.0\n      855.0\n      Joel David Moore\n      1000.0\n      760505847.0\n      Action|Adventure|Fantasy|Sci-Fi\n      CCH Pounder\n      Avatar\n      886204\n      1.78\n    \n    \n      1\n      Color\n      Gore Verbinski\n      302.0\n      169.0\n      563.0\n      1000.0\n      Orlando Bloom\n      40000.0\n      309404152.0\n      Action|Adventure|Fantasy\n      Johnny Depp\n      Pirates of the Caribbean: At World's End\n      471220\n      2.35"
  },
  {
    "objectID": "posts/DataHandling/2023-04-02-hanling-index.html",
    "href": "posts/DataHandling/2023-04-02-hanling-index.html",
    "title": "[Python] 중첩인덱스 깨는 법",
    "section": "",
    "text": "중첩인덱스 깨는 법\n\nDV2022 10wk-2 Lecture 심슨의 역설\n\n\nstack 이 답이다.\n\n\nimport pandas as pd\nimport numpy as np\nfrom plotnine import *\n\n\n# 중첩인덱스로 되어있는 dataframe\ndf=pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1])\ndf\n\n\n\n\n\n  \n    \n      \n      male\n      female\n    \n    \n      \n      fail\n      pass\n      fail\n      pass\n    \n  \n  \n    \n      A\n      314\n      511\n      19\n      89\n    \n    \n      B\n      208\n      352\n      7\n      18\n    \n    \n      C\n      204\n      121\n      391\n      202\n    \n    \n      D\n      279\n      138\n      244\n      131\n    \n    \n      E\n      137\n      54\n      299\n      94\n    \n    \n      F\n      149\n      224\n      103\n      238\n    \n  \n\n\n\n\n\n# stack 1번 적용\ndf=pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1])\\\n.stack()\ndf\n\n\n\n\n\n  \n    \n      \n      \n      female\n      male\n    \n  \n  \n    \n      A\n      fail\n      19\n      314\n    \n    \n      pass\n      89\n      511\n    \n    \n      B\n      fail\n      7\n      208\n    \n    \n      pass\n      18\n      352\n    \n    \n      C\n      fail\n      391\n      204\n    \n    \n      pass\n      202\n      121\n    \n    \n      D\n      fail\n      244\n      279\n    \n    \n      pass\n      131\n      138\n    \n    \n      E\n      fail\n      299\n      137\n    \n    \n      pass\n      94\n      54\n    \n    \n      F\n      fail\n      103\n      149\n    \n    \n      pass\n      238\n      224\n    \n  \n\n\n\n\n\n# stack 2번 적용\ndf=pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1])\\\n.stack().stack()\ndf\n\nA  fail  female     19\n         male      314\n   pass  female     89\n         male      511\nB  fail  female      7\n         male      208\n   pass  female     18\n         male      352\nC  fail  female    391\n         male      204\n   pass  female    202\n         male      121\nD  fail  female    244\n         male      279\n   pass  female    131\n         male      138\nE  fail  female    299\n         male      137\n   pass  female     94\n         male       54\nF  fail  female    103\n         male      149\n   pass  female    238\n         male      224\ndtype: int64\n\n\n\n# stack2번 + 인덱스 리셋\ndf=pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1])\\\n.stack().stack().reset_index()\ndf\n\n\n\n\n\n  \n    \n      \n      level_0\n      level_1\n      level_2\n      0\n    \n  \n  \n    \n      0\n      A\n      fail\n      female\n      19\n    \n    \n      1\n      A\n      fail\n      male\n      314\n    \n    \n      2\n      A\n      pass\n      female\n      89\n    \n    \n      3\n      A\n      pass\n      male\n      511\n    \n    \n      4\n      B\n      fail\n      female\n      7\n    \n    \n      5\n      B\n      fail\n      male\n      208\n    \n    \n      6\n      B\n      pass\n      female\n      18\n    \n    \n      7\n      B\n      pass\n      male\n      352\n    \n    \n      8\n      C\n      fail\n      female\n      391\n    \n    \n      9\n      C\n      fail\n      male\n      204\n    \n    \n      10\n      C\n      pass\n      female\n      202\n    \n    \n      11\n      C\n      pass\n      male\n      121\n    \n    \n      12\n      D\n      fail\n      female\n      244\n    \n    \n      13\n      D\n      fail\n      male\n      279\n    \n    \n      14\n      D\n      pass\n      female\n      131\n    \n    \n      15\n      D\n      pass\n      male\n      138\n    \n    \n      16\n      E\n      fail\n      female\n      299\n    \n    \n      17\n      E\n      fail\n      male\n      137\n    \n    \n      18\n      E\n      pass\n      female\n      94\n    \n    \n      19\n      E\n      pass\n      male\n      54\n    \n    \n      20\n      F\n      fail\n      female\n      103\n    \n    \n      21\n      F\n      fail\n      male\n      149\n    \n    \n      22\n      F\n      pass\n      female\n      238\n    \n    \n      23\n      F\n      pass\n      male\n      224\n    \n  \n\n\n\n\n\ndf=pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2022/master/posts/Simpson.csv\",index_col=0,header=[0,1])\\\n.stack().stack().reset_index()\\\n.rename({'level_0':'department','level_1':'result','level_2':'gender',0:'count'},axis=1)\ndf.head()\n\n\n\n\n\n  \n    \n      \n      department\n      result\n      gender\n      count\n    \n  \n  \n    \n      0\n      A\n      fail\n      female\n      19\n    \n    \n      1\n      A\n      fail\n      male\n      314\n    \n    \n      2\n      A\n      pass\n      female\n      89\n    \n    \n      3\n      A\n      pass\n      male\n      511\n    \n    \n      4\n      B\n      fail\n      female\n      7"
  },
  {
    "objectID": "posts/DataHandling/2023-04-06-assign-r.html",
    "href": "posts/DataHandling/2023-04-06-assign-r.html",
    "title": "[R] 문자열을 변수명으로 & assign",
    "section": "",
    "text": "ref: assign함수 이용하여 값을 변수에 넣기\nref: R문자열을 볂수명으로 사용하는 방법"
  },
  {
    "objectID": "posts/DataHandling/2023-04-06-assign-r.html#예제",
    "href": "posts/DataHandling/2023-04-06-assign-r.html#예제",
    "title": "[R] 문자열을 변수명으로 & assign",
    "section": "예제",
    "text": "예제\n\n- 문자열을 변수명으로\n\na = 3\neval(parse(text = 'a'))\n\n3\n\n\n\n\n- assign으로 값을 변수에 할당\n## 변수명은 반드시 문자형으로 들어가야한다.\nassign(변수명, 값)\n(예제1) x1이라는 변수에 c(1,2,3,4,5)를 할당하기\n\nassign(\"x1\", c(1,2,3,4,5)) \n\n\nx1\n\n\n12345\n\n\n(예제2) 변수를 한번에 많이 생성할 경우\n\nfor(x in 1:100){\n    assign(paste0('var',1:100)[x],x)\n}\n\n\nvar1\n\n1\n\n\n\nvar2\n\n2\n\n\n\nvar100\n\n100"
  },
  {
    "objectID": "posts/DataHandling/2023-04-06-assign-r.html#활용-solar-data",
    "href": "posts/DataHandling/2023-04-06-assign-r.html#활용-solar-data",
    "title": "[R] 문자열을 변수명으로 & assign",
    "section": "활용 (SOLAR DATA)",
    "text": "활용 (SOLAR DATA)\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(EPT)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.2.0     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nAttaching package: ‘lubridate’\n\n\nThe following objects are masked from ‘package:base’:\n\n    date, intersect, setdiff, union\n\n\n\n\n\nurl = 'https://raw.githubusercontent.com/pinkocto/mm/main/posts/2_Research/SOLAR/solar_radiation.csv'\ndf = read_csv(url)\n\nRows: 803000 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): region, date\ndbl (1): solar_radiation\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nfor (i in 1:44){\n     assign(paste0('data',1:44)[i],df |> filter(region == unique(df$region)[i]))\n     assign(paste0('data',1:44)[i],eval(parse(text=paste0('data',i)))[order(eval(parse(text=paste0('data',i)))$date),])\n     assign(paste0('y',1:44)[i], eval(parse(text=paste0('data',i)))$solar_radiation)\n}\n\n\nfor (i in 1:44){\n    plot(eval(parse(text=paste0('y',i)))[1:500], ann=FALSE)\n    lines(eval(parse(text=paste0('y',i))),lty=2)\n    title(main = as.character(unique(df$region)[i]), xlab='time', ylab='solar radiation')\n    }"
  },
  {
    "objectID": "posts/2023-03-23-read-list.html",
    "href": "posts/2023-03-23-read-list.html",
    "title": "Lists to read",
    "section": "",
    "text": "0. For Research\n\n시간별 기상 변화를 고려한 LSTM 기반 일사량 예측에 관한 연구\nEMD\n\n\n\n1. GNN\n\nGraph Representation Learning Book\nscGCN is a graph convolutional networks algorithm for knowledge transfer in single cell omics\nhttps://wandb.ai/yashkotadia/gatedgcn-pattern/reportlist\nCt Image Denoising With Encoder-Decoder Based Graph Convolutional Networks\n\nhttps://paperswithcode.com/sota/point-cloud-segmentation-on-pointcloud-c\n\n\n2. RNN\n\nLearning Phrase Representations using RNN Encoder-Decoder for Statistical Machine Translation\nLight Gated Recurrent Units for Speech Recognition\n\n\n\n참고링크\n시계열 : https://machinelearningmastery.com/arima-for-time-series-forecasting-with-python/"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts.\n\nSave model\nmodule and package"
  },
  {
    "objectID": "posts/Study/2023-04-10-arima-ex-day.html",
    "href": "posts/Study/2023-04-10-arima-ex-day.html",
    "title": "ARIMA (Day)",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nmpl.rc('font', family='NanumGothic')"
  },
  {
    "objectID": "posts/Study/2023-04-10-arima-ex-day.html#visualization",
    "href": "posts/Study/2023-04-10-arima-ex-day.html#visualization",
    "title": "ARIMA (Day)",
    "section": "Visualization",
    "text": "Visualization\n\n# 전체\nsns.lineplot(data=df, x='date', y='북춘천')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n# 2021-01-01 부터 한달간.\nsns.lineplot(data=df[:760], x='date', y='북춘천')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n# 최근 10일간\nsns.lineplot(data=df[df.shape[0]-250:], x='date', y='북춘천')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "objectID": "posts/Study/2023-04-10-arima-ex-day.html#arima",
    "href": "posts/Study/2023-04-10-arima-ex-day.html#arima",
    "title": "ARIMA (Day)",
    "section": "ARIMA",
    "text": "ARIMA\n\nimport statsmodels.tsa.api as tsa\n\n\ndf.index\n\nRangeIndex(start=0, stop=18250, step=1)\n\n\n\nfrom pylab import rcParams\n\nrcParams['figure.figsize'] = 15, 10\n\n\n## 그림그리기용\ny1 = df_time['북춘천'].resample('1D').mean()\n\n\n# 시계열 모델 생성\nmodel_series = tsa.seasonal_decompose(y1, model = 'additive')\n# 모델 시각화\nfig = model_series.plot()\nplt.show()\n\n/home/jy/anaconda3/envs/torch/lib/python3.8/site-packages/statsmodels/tsa/seasonal.py:338: UserWarning: Glyph 8722 (\\N{MINUS SIGN}) missing from current font.\n  fig.tight_layout()\n/home/jy/anaconda3/envs/torch/lib/python3.8/site-packages/IPython/core/pylabtools.py:152: UserWarning: Glyph 8722 (\\N{MINUS SIGN}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\n\n\n\n\n\n\nFig1: 트렌드 O\nFig2: 계절성 O\nFig3: 잔차\n\n\ny1.shape , 365*2\n\n((730,), 730)\n\n\n\ntsa.seasonal_decompose(y1[:90], model = 'additive').plot()\nplt.show()"
  },
  {
    "objectID": "posts/Study/2023-04-10-arima-ex-day.html#에러",
    "href": "posts/Study/2023-04-10-arima-ex-day.html#에러",
    "title": "ARIMA (Day)",
    "section": "–에러",
    "text": "–에러\n/home/jy/anaconda3/envs/torch/lib/python3.8/site-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it is not monotonic and so will be ignored when e.g. forecasting.\n\nidx = len(df)*0.7\ntrain = df.loc[0:idx].set_index('date').to_period('H')\ntest = df.loc[idx:].set_index('date').to_period('H')\n\n\nimport itertools\n\n\np = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [ (x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))] \n\n\nparam_list = []\nparam_seasonal_list = []\nresults_AIC_list = []\nresults_MSE_list = []\n\n\ny = train['북춘천']\ny.index\n\nPeriodIndex(['2021-01-01 00:00', '2021-01-01 01:00', '2021-01-01 02:00',\n             '2021-01-01 03:00', '2021-01-01 04:00', '2021-01-01 05:00',\n             '2021-01-01 06:00', '2021-01-01 07:00', '2021-01-01 08:00',\n             '2021-01-01 09:00',\n             ...\n             '2022-05-26 16:00', '2022-05-26 17:00', '2022-05-26 18:00',\n             '2022-05-26 19:00', '2022-05-26 07:00', '2022-05-26 20:00',\n             '2022-05-26 06:00', '2022-05-26 21:00', '2022-05-26 05:00',\n             '2022-05-27 00:00'],\n            dtype='period[H]', name='date', length=12776)\n\n\n\n### 에러.. (시간빠진부분 있어서 그런듯)\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = tsa.statespace.SARIMAX(y, order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n            results = mod.fit()\n            param_list.append(param)\n            param_seasonal_list.append(param_seasonal)\n            results_AIC_list.append(results.aic)\n            results_MSE_list.append(results.mse)\n        except:\n            continue\n\n\nprint(len(param_list), len(param_seasonal_list), len(results_AIC_list))\n\n64 64 64\n\n\n\nARIMA_list = pd.DataFrame({'Parameter':param_list, 'Seasonal':param_seasonal_list, 'AIC':results_AIC_list})\n\n\nARIMA_list.sort_values(by='AIC')\n\n\n\n\n\n  \n    \n      \n      Parameter\n      Seasonal\n      AIC\n    \n  \n  \n    \n      56\n      (1, 1, 1)\n      (0, 0, 0, 12)\n      -27.919333\n    \n    \n      57\n      (1, 1, 1)\n      (0, 0, 1, 12)\n      -17.887908\n    \n    \n      60\n      (1, 1, 1)\n      (1, 0, 0, 12)\n      -17.191112\n    \n    \n      61\n      (1, 1, 1)\n      (1, 0, 1, 12)\n      -16.236937\n    \n    \n      24\n      (0, 1, 1)\n      (0, 0, 0, 12)\n      2.108300\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      50\n      (1, 1, 0)\n      (0, 1, 0, 12)\n      729.258196\n    \n    \n      18\n      (0, 1, 0)\n      (0, 1, 0, 12)\n      819.565003\n    \n    \n      8\n      (0, 0, 1)\n      (0, 0, 0, 12)\n      930.795162\n    \n    \n      1\n      (0, 0, 0)\n      (0, 0, 1, 12)\n      1035.717831\n    \n    \n      0\n      (0, 0, 0)\n      (0, 0, 0, 12)\n      1470.861058\n    \n  \n\n64 rows × 3 columns\n\n\n\n\nmod = tsa.statespace.SARIMAX(y1, order=(1,1,1),\n                                            seasonal_order=(0,0,0,12),\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n\nresults = mod.fit()\nprint(results.summary().tables[1])\n\n==============================================================================\n                 coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nar.L1          0.2286      0.035      6.544      0.000       0.160       0.297\nma.L1         -1.0822      0.017    -64.958      0.000      -1.115      -1.050\nsigma2         0.0476      0.003     18.244      0.000       0.043       0.053\n==============================================================================\n\n\n\nprint(results.summary())\n\n                               SARIMAX Results                                \n==============================================================================\nDep. Variable:                    북춘천   No. Observations:                  730\nModel:               SARIMAX(1, 1, 1)   Log Likelihood                  16.960\nDate:                Mon, 10 Apr 2023   AIC                            -27.919\nTime:                        17:29:21   BIC                            -14.153\nSample:                    01-01-2021   HQIC                           -22.607\n                         - 12-31-2022                                         \nCovariance Type:                  opg                                         \n==============================================================================\n                 coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nar.L1          0.2286      0.035      6.544      0.000       0.160       0.297\nma.L1         -1.0822      0.017    -64.958      0.000      -1.115      -1.050\nsigma2         0.0476      0.003     18.244      0.000       0.043       0.053\n===================================================================================\nLjung-Box (L1) (Q):                   0.40   Jarque-Bera (JB):                41.71\nProb(Q):                              0.53   Prob(JB):                         0.00\nHeteroskedasticity (H):               0.90   Skew:                            -0.58\nProb(H) (two-sided):                  0.43   Kurtosis:                         3.20\n===================================================================================\n\nWarnings:\n[1] Covariance matrix calculated using the outer product of gradients (complex-step)."
  },
  {
    "objectID": "posts/Study/2023-04-10-arima-ex-day.html#section",
    "href": "posts/Study/2023-04-10-arima-ex-day.html#section",
    "title": "ARIMA (Day)",
    "section": "–",
    "text": "–\n\n## MSE\ndef mse_(real, pred):\n    diff = real - pred\n    return mean(diff^2)\n\n\n## fitting\n\n\nfrom sklearn.metrics import mean_squared_error as MSE\n\n\npred_y = results.predict(start = '2022-05-27 00:00:00', end='2022-12-31 05:00:00')\n\n\npred_y\n\n2022-05-27    0.960337\n2022-05-28    0.882472\n2022-05-29    0.982962\n2022-05-30    0.985353\n2022-05-31    0.756740\n                ...   \n2022-12-28    0.337356\n2022-12-29    0.383494\n2022-12-30    0.388694\n2022-12-31    0.375957\n2023-01-01    0.356190\nFreq: D, Name: predicted_mean, Length: 220, dtype: float64\n\n\n\nref: How to interpret Negative AIC Vluaes"
  },
  {
    "objectID": "posts/Study/2023-04-10-arima-ex.html",
    "href": "posts/Study/2023-04-10-arima-ex.html",
    "title": "ARIMA (시간별 예측안됨, 에러)",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nmpl.rc('font', family='NanumGothic')"
  },
  {
    "objectID": "posts/Study/2023-04-10-arima-ex.html#arima",
    "href": "posts/Study/2023-04-10-arima-ex.html#arima",
    "title": "ARIMA (시간별 예측안됨, 에러)",
    "section": "ARIMA",
    "text": "ARIMA\n\nimport statsmodels.tsa.api as tsa\n\n\ndf.index\n\nRangeIndex(start=0, stop=18250, step=1)\n\n\n\nfrom pylab import rcParams\n\nrcParams['figure.figsize'] = 15, 10\n\n\n## 그림 그리기용\ny1 = df_time['북춘천'].resample('1D').mean()\n\n\n# 시계열 모델 생성\nmodel_series = tsa.seasonal_decompose(y1, model = 'additive')\n# 모델 시각화\nfig = model_series.plot()\nplt.show()\n\n/home/jy/anaconda3/envs/torch/lib/python3.8/site-packages/statsmodels/tsa/seasonal.py:338: UserWarning: Glyph 8722 (\\N{MINUS SIGN}) missing from current font.\n  fig.tight_layout()\n/home/jy/anaconda3/envs/torch/lib/python3.8/site-packages/IPython/core/pylabtools.py:152: UserWarning: Glyph 8722 (\\N{MINUS SIGN}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\n\n\n\n\n\n\nFig1: 트렌드 O\nFig2: 계절성 O\nFig3: 잔차\n\n\ny1.shape , 365*2\n\n((730,), 730)\n\n\n\ntsa.seasonal_decompose(y1[:90], model = 'additive').plot()\nplt.show()"
  },
  {
    "objectID": "posts/Study/2023-04-10-arima-ex.html#에러",
    "href": "posts/Study/2023-04-10-arima-ex.html#에러",
    "title": "ARIMA (시간별 예측안됨, 에러)",
    "section": "–에러",
    "text": "–에러\n/home/jy/anaconda3/envs/torch/lib/python3.8/site-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: A date index has been provided, but it is not monotonic and so will be ignored when e.g. forecasting.\n\nidx = len(df)*0.7\ntrain = df.loc[0:idx].set_index('date').to_period('H')\ntest = df.loc[idx:].set_index('date').to_period('H')\n\n\ntrain.index()\n\nPeriodIndex(['2021-01-01 00:00', '2021-01-01 01:00', '2021-01-01 02:00',\n             '2021-01-01 03:00', '2021-01-01 04:00', '2021-01-01 05:00',\n             '2021-01-01 06:00', '2021-01-01 07:00', '2021-01-01 08:00',\n             '2021-01-01 09:00',\n             ...\n             '2022-05-26 16:00', '2022-05-26 17:00', '2022-05-26 18:00',\n             '2022-05-26 19:00', '2022-05-26 07:00', '2022-05-26 20:00',\n             '2022-05-26 06:00', '2022-05-26 21:00', '2022-05-26 05:00',\n             '2022-05-27 00:00'],\n            dtype='period[H]', name='date', length=12776)\n\n\n\nimport itertools\n\n\np = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [ (x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))] \n\n\nparam_list = []\nparam_seasonal_list = []\nresults_AIC_list = []\nresults_MSE_list = []\n\n\ny = train['북춘천']\ny.index\n\nPeriodIndex(['2021-01-01 00:00', '2021-01-01 01:00', '2021-01-01 02:00',\n             '2021-01-01 03:00', '2021-01-01 04:00', '2021-01-01 05:00',\n             '2021-01-01 06:00', '2021-01-01 07:00', '2021-01-01 08:00',\n             '2021-01-01 09:00',\n             ...\n             '2022-05-26 16:00', '2022-05-26 17:00', '2022-05-26 18:00',\n             '2022-05-26 19:00', '2022-05-26 07:00', '2022-05-26 20:00',\n             '2022-05-26 06:00', '2022-05-26 21:00', '2022-05-26 05:00',\n             '2022-05-27 00:00'],\n            dtype='period[H]', name='date', length=12776)\n\n\n\n### 에러.. (시간빠진부분 있어서 그런듯)\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = tsa.statespace.SARIMAX(y, order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n            results = mod.fit()\n            param_list.append(param)\n            param_seasonal_list.append(param_seasonal)\n            results_AIC_list.append(results.aic)\n            results_MSE_list.append(results.mse)\n        except:\n            continue\n\n\nprint(len(param_list), len(param_seasonal_list), len(results_AIC_list))\n\n64 64 64\n\n\n\nARIMA_list = pd.DataFrame({'Parameter':param_list, 'Seasonal':param_seasonal_list, 'AIC':results_AIC_list})\n\n\nARIMA_list.sort_values(by='AIC')\n\n\n\n\n\n  \n    \n      \n      Parameter\n      Seasonal\n      AIC\n    \n  \n  \n    \n      56\n      (1, 1, 1)\n      (0, 0, 0, 12)\n      -27.919333\n    \n    \n      57\n      (1, 1, 1)\n      (0, 0, 1, 12)\n      -17.887908\n    \n    \n      60\n      (1, 1, 1)\n      (1, 0, 0, 12)\n      -17.191112\n    \n    \n      61\n      (1, 1, 1)\n      (1, 0, 1, 12)\n      -16.236937\n    \n    \n      24\n      (0, 1, 1)\n      (0, 0, 0, 12)\n      2.108300\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      50\n      (1, 1, 0)\n      (0, 1, 0, 12)\n      729.258196\n    \n    \n      18\n      (0, 1, 0)\n      (0, 1, 0, 12)\n      819.565003\n    \n    \n      8\n      (0, 0, 1)\n      (0, 0, 0, 12)\n      930.795162\n    \n    \n      1\n      (0, 0, 0)\n      (0, 0, 1, 12)\n      1035.717831\n    \n    \n      0\n      (0, 0, 0)\n      (0, 0, 0, 12)\n      1470.861058\n    \n  \n\n64 rows × 3 columns\n\n\n\n\nmod = tsa.statespace.SARIMAX(y1, order=(1,1,1),\n                                            seasonal_order=(0,0,0,12),\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n\nresults = mod.fit()\nprint(results.summary().tables[1])\n\n==============================================================================\n                 coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nar.L1          0.2286      0.035      6.544      0.000       0.160       0.297\nma.L1         -1.0822      0.017    -64.958      0.000      -1.115      -1.050\nsigma2         0.0476      0.003     18.244      0.000       0.043       0.053\n==============================================================================\n\n\n\nprint(results.summary())\n\n                               SARIMAX Results                                \n==============================================================================\nDep. Variable:                    북춘천   No. Observations:                  730\nModel:               SARIMAX(1, 1, 1)   Log Likelihood                  16.960\nDate:                Mon, 10 Apr 2023   AIC                            -27.919\nTime:                        17:29:21   BIC                            -14.153\nSample:                    01-01-2021   HQIC                           -22.607\n                         - 12-31-2022                                         \nCovariance Type:                  opg                                         \n==============================================================================\n                 coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nar.L1          0.2286      0.035      6.544      0.000       0.160       0.297\nma.L1         -1.0822      0.017    -64.958      0.000      -1.115      -1.050\nsigma2         0.0476      0.003     18.244      0.000       0.043       0.053\n===================================================================================\nLjung-Box (L1) (Q):                   0.40   Jarque-Bera (JB):                41.71\nProb(Q):                              0.53   Prob(JB):                         0.00\nHeteroskedasticity (H):               0.90   Skew:                            -0.58\nProb(H) (two-sided):                  0.43   Kurtosis:                         3.20\n===================================================================================\n\nWarnings:\n[1] Covariance matrix calculated using the outer product of gradients (complex-step)."
  },
  {
    "objectID": "posts/Study/2023-04-10-arima-ex.html#section",
    "href": "posts/Study/2023-04-10-arima-ex.html#section",
    "title": "ARIMA (시간별 예측안됨, 에러)",
    "section": "–",
    "text": "–\n\n## MSE\ndef mse_(real, pred):\n    diff = real - pred\n    return mean(diff^2)\n\n\n## fitting\n\n\nfrom sklearn.metrics import mean_squared_error as MSE\n\n\npred_y = results.predict(start = '2022-05-27 00:00:00', end='2022-12-31 05:00:00')\n\n\npred_y\n\n2022-05-27    0.960337\n2022-05-28    0.882472\n2022-05-29    0.982962\n2022-05-30    0.985353\n2022-05-31    0.756740\n                ...   \n2022-12-28    0.337356\n2022-12-29    0.383494\n2022-12-30    0.388694\n2022-12-31    0.375957\n2023-01-01    0.356190\nFreq: D, Name: predicted_mean, Length: 220, dtype: float64\n\n\n\nref: How to interpret Negative AIC Vluaes"
  },
  {
    "objectID": "posts/Study/2023-04-10-ex.html",
    "href": "posts/Study/2023-04-10-ex.html",
    "title": "연습장",
    "section": "",
    "text": "Data"
  },
  {
    "objectID": "posts/Study/2023-04-10-ex.html#import",
    "href": "posts/Study/2023-04-10-ex.html#import",
    "title": "연습장",
    "section": "import",
    "text": "import\n\nimport os\nimport time\nimport gc\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import TensorDataset, DataLoader\nfrom torch.autograd import Variable\nfrom tqdm import tqdm_notebook\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split  \n\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n\n\ndevice\n\ndevice(type='cuda', index=0)\n\n\n\nurl = 'https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/df_new.csv'\ndata = pd.read_csv(url)\n\n\nprint(data.dtypes)\n\ndate     object\n북춘천     float64\n철원      float64\n대관령     float64\n춘천      float64\n백령도     float64\n북강릉     float64\n강릉      float64\n서울      float64\n인천      float64\n원주      float64\n울릉도     float64\n수원      float64\n서산      float64\n청주      float64\n대전      float64\n추풍령     float64\n안동      float64\n포항      float64\n대구      float64\n전주      float64\n창원      float64\n광주      float64\n부산      float64\n목포      float64\n여수      float64\n흑산도     float64\n고창      float64\n홍성      float64\n제주      float64\n고산      float64\n진주      float64\n고창군     float64\n영광군     float64\n김해시     float64\n순창군     float64\n북창원     float64\n양산시     float64\n보성군     float64\n강진군     float64\n의령군     float64\n함양군     float64\n광양시     float64\n청송군     float64\n경주시     float64\ndtype: object\n\n\n\ndata['date'] = pd.to_datetime(data['date'])\ndata.set_index('date', inplace=True)\n\n\ndata.columns\n\nIndex(['북춘천', '철원', '대관령', '춘천', '백령도', '북강릉', '강릉', '서울', '인천', '원주', '울릉도',\n       '수원', '서산', '청주', '대전', '추풍령', '안동', '포항', '대구', '전주', '창원', '광주', '부산',\n       '목포', '여수', '흑산도', '고창', '홍성', '제주', '고산', '진주', '고창군', '영광군', '김해시',\n       '순창군', '북창원', '양산시', '보성군', '강진군', '의령군', '함양군', '광양시', '청송군', '경주시'],\n      dtype='object')\n\n\n\nX=data.iloc[:,:-1] # 마지막 칼럼을 제외한 모든 컬럼\ny=data.iloc[:,5:6] # 마지막 Volumn을 레이블로 사용\nprint(X)\nprint(y)\n\n<Axes: >"
  },
  {
    "objectID": "posts/Study/python_7장.html",
    "href": "posts/Study/python_7장.html",
    "title": "스타벅스 주가예측",
    "section": "",
    "text": "import os\nimport time\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import TensorDataset, DataLoader\nfrom torch.autograd import Variable\nfrom tqdm import tqdm_notebook\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split  \n\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n\n\ndevice\n\ndevice(type='cuda', index=0)\n\n\n\ndata=pd.read_csv('https://raw.githubusercontent.com/gilbutITbook/080289/main/chap07/data/SBUX.csv')\nprint(data.dtypes)\n\nDate          object\nOpen         float64\nHigh         float64\nLow          float64\nClose        float64\nAdj Close    float64\nVolume         int64\ndtype: object\n\n\n\ndata['Date'] = pd.to_datetime(data['Date'])\ndata.set_index('Date', inplace=True)\n\n\ndata['Volume'] = data['Volume'].astype(float) # 추후 텐서로 변환시 용이\n\n\nX=data.iloc[:,:-1] # 마지막 칼럼을 제외한 모든 컬럼\ny=data.iloc[:,5:6] # 마지막 Volumn을 레이블로 사용\nprint(X)\nprint(y)\n\n                  Open        High         Low       Close   Adj Close\nDate                                                                  \n2019-12-11   86.260002   86.870003   85.849998   86.589996   84.145752\n2019-12-12   88.000000   88.889999   87.540001   88.209999   85.720032\n2019-12-13   88.019997   88.790001   87.580002   88.669998   86.167046\n2019-12-16   89.139999   89.300003   88.430000   88.779999   86.273941\n2019-12-17   88.870003   88.970001   87.470001   88.129997   85.642288\n...                ...         ...         ...         ...         ...\n2020-12-04  101.349998  102.940002  101.070000  102.279999  101.442787\n2020-12-07  102.010002  102.220001  100.690002  101.410004  100.579918\n2020-12-08  100.370003  101.570000  100.010002  101.209999  100.381554\n2020-12-09  101.940002  102.209999  100.099998  100.400002   99.578186\n2020-12-10  103.510002  106.089996  102.750000  105.389999  104.527336\n\n[253 rows x 5 columns]\n                Volume\nDate                  \n2019-12-11   4921900.0\n2019-12-12  10282100.0\n2019-12-13   6714100.0\n2019-12-16   6705600.0\n2019-12-17   7296900.0\n...                ...\n2020-12-04   6952700.0\n2020-12-07   4514800.0\n2020-12-08   3911300.0\n2020-12-09   6629900.0\n2020-12-10  12939200.0\n\n[253 rows x 1 columns]\n\n\n\n200/253\n\n0.7905138339920948\n\n\n\nms = MinMaxScaler()\nss = StandardScaler()\n\nX_ss = ss.fit_transform(X)\ny_ms = ms.fit_transform(y) \n\nX_train = X_ss[:200, :]\nX_test = X_ss[200:, :]\n\ny_train = y_ms[:200, :]\ny_test = y_ms[200:, :] \n\nprint(\"Training Shape\", X_train.shape, y_train.shape)\nprint(\"Testing Shape\", X_test.shape, y_test.shape) \n\nTraining Shape (200, 5) (200, 1)\nTesting Shape (53, 5) (53, 1)\n\n\n\n## X\nX_train_tensors = Variable(torch.Tensor(X_train))\nX_test_tensors = Variable(torch.Tensor(X_test))\n\n## y\ny_train_tensors = Variable(torch.Tensor(y_train))\ny_test_tensors = Variable(torch.Tensor(y_test))\n\n## reshape X (200 x 1 x 5)\nX_train_tensors_f = torch.reshape(X_train_tensors,   (X_train_tensors.shape[0], 1, X_train_tensors.shape[1]))\nX_test_tensors_f = torch.reshape(X_test_tensors,  (X_test_tensors.shape[0], 1, X_test_tensors.shape[1])) \n\nprint(\"Training Shape\", X_train_tensors_f.shape, y_train_tensors.shape)\nprint(\"Testing Shape\", X_test_tensors_f.shape, y_test_tensors.shape) \n\nTraining Shape torch.Size([200, 1, 5]) torch.Size([200, 1])\nTesting Shape torch.Size([53, 1, 5]) torch.Size([53, 1])\n\n\n\nVariable로 감싸진 텐서는 .backward()가 호출될 때 자동으로 기울기 계산.\n이와같이 데이터셋의 형태를 변경하는 이유는 LSTM 네트워크의 입력 형태와 맞추기 위해서이다.\n\n\n\n\n\nclass LSTM(nn.Module):\n    def __init__(self, num_classes, input_size, hidden_size, num_layers, seq_length):\n        super(LSTM, self).__init__()\n        self.num_classes = num_classes # 클래스 개수\n        self.num_layers = num_layers # LSTM 계층 개수\n        self.input_size = input_size  #입력크기 (훈련 데이터셋의 칼럼 수)\n        self.hidden_size = hidden_size  # 은닉층 뉴런개수\n        self.seq_length = seq_length  # sequence 길이\n\n        self.lstm = nn.LSTM(input_size=input_size, hidden_size=hidden_size,\n                          num_layers=num_layers, batch_first=True) \n        self.fc_1 =  nn.Linear(hidden_size, 128) \n        self.fc = nn.Linear(128, num_classes) \n\n        self.relu = nn.ReLU()\n    \n    def forward(self,x):\n        h_0 = Variable(torch.zeros(self.num_layers, x.size(0), self.hidden_size))  # 은닉상태 0으로 초기화\n        c_0 = Variable(torch.zeros(self.num_layers, x.size(0), self.hidden_size))  # 셀 상태 0으로 초기화\n        \n        output, (hn, cn) = self.lstm(x, (h_0, c_0))  # LSTM 계층에 은닉상태, 셀상태 적용\n        hn = hn.view(-1, self.hidden_size)  # 완전연결층 적용을 위해 데이터의 형태 1차원으로 조정.\n        out = self.relu(hn)\n        out = self.fc_1(out) \n        out = self.relu(out) \n        out = self.fc(out)\n        return out\n\n\n\n\n\n## 모델 학습을 위해 필요한 변수값 설정.\nnum_epochs = 1000 \nlearning_rate = 0.0001 \n\ninput_size = 5 \nhidden_size = 2 \nnum_layers = 1 \n\nnum_classes = 1 \nmodel = LSTM(num_classes, input_size, hidden_size, num_layers, X_train_tensors_f.shape[1]) \n\ncriterion = torch.nn.MSELoss()    \noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate) \n\n\nfor epoch in range(num_epochs):\n    outputs = model.forward(X_train_tensors_f) \n    optimizer.zero_grad()  \n    loss = criterion(outputs, y_train_tensors)  # 손실함수를 이용한 오차 계산. \n    loss.backward()  # 기울기 계산\n    optimizer.step() # 오차 업데이트\n    if epoch % 100 == 0:\n        print(\"Epoch: %d, loss: %1.5f\" % (epoch, loss.item())) \n\nEpoch: 0, loss: 0.25400\nEpoch: 100, loss: 0.08501\nEpoch: 200, loss: 0.04538\nEpoch: 300, loss: 0.04002\nEpoch: 400, loss: 0.03854\nEpoch: 500, loss: 0.03714\nEpoch: 600, loss: 0.03550\nEpoch: 700, loss: 0.03339\nEpoch: 800, loss: 0.02975\nEpoch: 900, loss: 0.02508\n\n\n\n\n\n모델 예측결과를 출력하기 위한 데이터 크기 재구성\n\ndf_x_ss = ss.transform(data.iloc[:, :-1])  ## ss: StandardScaler()\ndf_y_ms = ms.transform(data.iloc[:, -1:])  ## ms: MinMaxScaler()\n\ndf_x_ss = Variable(torch.Tensor(df_x_ss)) \ndf_y_ms = Variable(torch.Tensor(df_y_ms))\ndf_x_ss = torch.reshape(df_x_ss, (df_x_ss.shape[0], 1, df_x_ss.shape[1])) \n\n\nnp.array(df_x_ss).shape, np.array(df_y_ms).shape\n\n((253, 1, 5), (253, 1))\n\n\n\ntrain_predict = model(df_x_ss)\npredicted = train_predict.data.numpy() \nlabel_y = df_y_ms.data.numpy()\n\npredicted= ms.inverse_transform(predicted) \nlabel_y = ms.inverse_transform(label_y)\nplt.figure(figsize=(10,6)) \nplt.axvline(x=200, c='r', linestyle='--') \n\nplt.plot(label_y, label='Actual Data') \nplt.plot(predicted, label='Predicted Data') \nplt.title('Time-Series Prediction')\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "posts/Study/2023-04-11-arima-hour-data-fill.html",
    "href": "posts/Study/2023-04-11-arima-hour-data-fill.html",
    "title": "[SOLAR] SARIMA (MSE: 0.478)",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport rpy2\n%load_ext rpy2.ipython \n\nimport matplotlib.pyplot as plt\nplt.rcParams['font.family'] = 'NanumGothic'\n\nThe rpy2.ipython extension is already loaded. To reload it, use:\n  %reload_ext rpy2.ipython\n\n\n\nurl = 'https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/solar_radiation2.csv'\ndf = pd.read_csv(url)"
  },
  {
    "objectID": "posts/Study/2023-04-11-arima-hour-data-fill.html#mse",
    "href": "posts/Study/2023-04-11-arima-hour-data-fill.html#mse",
    "title": "[SOLAR] SARIMA (MSE: 0.478)",
    "section": "MSE",
    "text": "MSE\n\n## MSE\ndef mse_(real, pred):\n    diff = real - pred\n    return mean(diff^2)\n\n\ntest\n\n\n\n\n\n  \n    \n      \n      북춘천\n      철원\n      대관령\n      춘천\n      백령도\n      북강릉\n      강릉\n      서울\n      인천\n      원주\n      ...\n      순창군\n      북창원\n      양산시\n      보성군\n      강진군\n      의령군\n      함양군\n      광양시\n      청송군\n      경주시\n    \n    \n      date\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2022-05-27 00:00\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      2022-05-27 01:00\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      2022-05-27 02:00\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      2022-05-27 03:00\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      2022-05-27 04:00\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2022-12-31 19:00\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      2022-12-31 20:00\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      2022-12-31 21:00\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      2022-12-31 22:00\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n    \n      2022-12-31 23:00\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      ...\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n      0.0\n    \n  \n\n5256 rows × 44 columns\n\n\n\n\ntrain['북춘천'].index[0], train['북춘천'].index[-1]\n\n(Period('2021-01-01 00:00', 'H'), Period('2022-05-26 23:00', 'H'))\n\n\n\ntrain_pred = results.predict(start = train['북춘천'].index[0], end = train['북춘천'].index[-1]).values\n\n\nfig = plt.figure(figsize = (80,30))\nplt.plot(train['북춘천'].values[:500], \"b-\", label = \"Actual\", alpha = 0.9, lw=3)\nplt.plot(train_pred[:500], \"r-\", label = \"Prediction\", alpha = 0.9, lw=3)\nplt.legend()\nplt.show()\n\n\n\n\n\n## fitting\nsteps = len(test)\ntest_pred = results.forecast(steps).values\n\n\nfig = plt.figure(figsize = (80,30))\nplt.plot(test['북춘천'].values[:500], \"b-\", label = \"Actual\", alpha = 0.9, lw=3)\nplt.plot(results.forecast(steps).values[:500], \"r-\", label = \"Prediction\", alpha = 0.9, lw=3)\nplt.legend()\nplt.show()\n\n\n\n\n\n…\n\n\nfrom sklearn.metrics import mean_squared_error as MSE\n\n\nprint(MSE(train['북춘천'].values, train_pred))\nprint(MSE(test['북춘천'].values, test_pred))\n\n0.047077332895820334\n0.47824005920354684\n\n\n\n완전 과적합..\nref: How to interpret Negative AIC Vluaes\nref: https://direction-f.tistory.com/71 (시계열 관련)\nref: https://stackoverflow.com/questions/38033570/seasonal-decompose-raises-error-typeerror-periodindex-given-check-the-freq (freq: 에러)"
  },
  {
    "objectID": "posts/Study/2023-04-03-일사량.html",
    "href": "posts/Study/2023-04-03-일사량.html",
    "title": "일사량자료정리(수정 for ARIMA)",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport itertools\n\n\ndf0 = pd.read_csv('https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/OBS_ASOS_TIM_data0.csv', encoding='cp949') # 2021-01-01 ~ 2021-12-31\ndf1 = pd.read_csv('https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/OBS_ASOS_TIM_data1.csv') # 2022-01-01 ~ 2023-12-31\ndf2 = pd.read_csv('https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/test_raw.csv', encoding='cp949') # 2023-01-01 ~ 2023-01-15\n\n- df_raw\n\ndf_raw = pd.concat([df0, df1])\ndf_raw\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2021-01-01 08:00\n      0.00\n    \n    \n      1\n      93\n      북춘천\n      2021-01-01 09:00\n      0.37\n    \n    \n      2\n      93\n      북춘천\n      2021-01-01 10:00\n      0.96\n    \n    \n      3\n      93\n      북춘천\n      2021-01-01 11:00\n      1.40\n    \n    \n      4\n      93\n      북춘천\n      2021-01-01 12:00\n      1.72\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      229672\n      283\n      경주시\n      2022-12-31 14:00:00\n      1.82\n    \n    \n      229673\n      283\n      경주시\n      2022-12-31 15:00:00\n      1.52\n    \n    \n      229674\n      283\n      경주시\n      2022-12-31 16:00:00\n      0.96\n    \n    \n      229675\n      283\n      경주시\n      2022-12-31 17:00:00\n      0.35\n    \n    \n      229676\n      283\n      경주시\n      2022-12-31 18:00:00\n      0.01\n    \n  \n\n444720 rows × 4 columns\n\n\n\n- 지점칼럼 삭제 // 일시 \\(\\to\\) 날짜, 시간으로 분리\n\ndf_temp = df_raw.assign(날짜= list(map(lambda x: x[:10],df_raw['일시'])))\\\n.assign(시간 = list(map(lambda x: x[11:16], df_raw['일시'])))\\\n.drop(['일시','지점'], axis=1).rename({'일사(MJ/m2)':'일사'},axis=1).reset_index(drop=True)\ndf_temp\n\n\n\n\n\n  \n    \n      \n      지점명\n      일사\n      날짜\n      시간\n    \n  \n  \n    \n      0\n      북춘천\n      0.00\n      2021-01-01\n      08:00\n    \n    \n      1\n      북춘천\n      0.37\n      2021-01-01\n      09:00\n    \n    \n      2\n      북춘천\n      0.96\n      2021-01-01\n      10:00\n    \n    \n      3\n      북춘천\n      1.40\n      2021-01-01\n      11:00\n    \n    \n      4\n      북춘천\n      1.72\n      2021-01-01\n      12:00\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      444715\n      경주시\n      1.82\n      2022-12-31\n      14:00\n    \n    \n      444716\n      경주시\n      1.52\n      2022-12-31\n      15:00\n    \n    \n      444717\n      경주시\n      0.96\n      2022-12-31\n      16:00\n    \n    \n      444718\n      경주시\n      0.35\n      2022-12-31\n      17:00\n    \n    \n      444719\n      경주시\n      0.01\n      2022-12-31\n      18:00\n    \n  \n\n444720 rows × 4 columns\n\n\n\n- 파주, 상주, 동두천, 충주, 제천은 삭제\n\ndf_temp = df_temp.query(\"지점명 not in ['파주','상주','동두천','충주','제천']\").reset_index(drop=True)\ndf_temp\n\n\n\n\n\n  \n    \n      \n      지점명\n      일사\n      날짜\n      시간\n    \n  \n  \n    \n      0\n      북춘천\n      0.00\n      2021-01-01\n      08:00\n    \n    \n      1\n      북춘천\n      0.37\n      2021-01-01\n      09:00\n    \n    \n      2\n      북춘천\n      0.96\n      2021-01-01\n      10:00\n    \n    \n      3\n      북춘천\n      1.40\n      2021-01-01\n      11:00\n    \n    \n      4\n      북춘천\n      1.72\n      2021-01-01\n      12:00\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      420955\n      경주시\n      1.82\n      2022-12-31\n      14:00\n    \n    \n      420956\n      경주시\n      1.52\n      2022-12-31\n      15:00\n    \n    \n      420957\n      경주시\n      0.96\n      2022-12-31\n      16:00\n    \n    \n      420958\n      경주시\n      0.35\n      2022-12-31\n      17:00\n    \n    \n      420959\n      경주시\n      0.01\n      2022-12-31\n      18:00\n    \n  \n\n420960 rows × 4 columns\n\n\n\n\n–수정\n- 시간이 비어있지 않도록…\n\nreg = df_temp['지점명'].unique().tolist() \nday = df_temp['날짜'].unique().tolist() \n# time = list(df_temp['시간'].unique())\n# time = ['0{}:00'.format(i) for i in range(0,8)] + time\ntime = ['0{}:00'.format(i) for i in range(0,10)] + ['{}:00'.format(i) for i in range(10,24)]\n\n\ndf_temp2 = pd.DataFrame(itertools.product(reg,day,time)).rename({0:'지점명',1:'날짜',2:'시간'},axis=1).merge(df_temp,how='left').fillna(0)\ndf_temp2\n\n\n\n\n\n  \n    \n      \n      지점명\n      날짜\n      시간\n      일사\n    \n  \n  \n    \n      0\n      북춘천\n      2021-01-01\n      00:00\n      0.0\n    \n    \n      1\n      북춘천\n      2021-01-01\n      01:00\n      0.0\n    \n    \n      2\n      북춘천\n      2021-01-01\n      02:00\n      0.0\n    \n    \n      3\n      북춘천\n      2021-01-01\n      03:00\n      0.0\n    \n    \n      4\n      북춘천\n      2021-01-01\n      04:00\n      0.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      770875\n      경주시\n      2022-12-31\n      19:00\n      0.0\n    \n    \n      770876\n      경주시\n      2022-12-31\n      20:00\n      0.0\n    \n    \n      770877\n      경주시\n      2022-12-31\n      21:00\n      0.0\n    \n    \n      770878\n      경주시\n      2022-12-31\n      22:00\n      0.0\n    \n    \n      770879\n      경주시\n      2022-12-31\n      23:00\n      0.0\n    \n  \n\n770880 rows × 4 columns\n\n\n\n\ndf_temp2[:10]\n\n\n\n\n\n  \n    \n      \n      지점명\n      날짜\n      시간\n      일사\n    \n  \n  \n    \n      0\n      북춘천\n      2021-01-01\n      00:00\n      0.00\n    \n    \n      1\n      북춘천\n      2021-01-01\n      01:00\n      0.00\n    \n    \n      2\n      북춘천\n      2021-01-01\n      02:00\n      0.00\n    \n    \n      3\n      북춘천\n      2021-01-01\n      03:00\n      0.00\n    \n    \n      4\n      북춘천\n      2021-01-01\n      04:00\n      0.00\n    \n    \n      5\n      북춘천\n      2021-01-01\n      05:00\n      0.00\n    \n    \n      6\n      북춘천\n      2021-01-01\n      06:00\n      0.00\n    \n    \n      7\n      북춘천\n      2021-01-01\n      07:00\n      0.00\n    \n    \n      8\n      북춘천\n      2021-01-01\n      08:00\n      0.00\n    \n    \n      9\n      북춘천\n      2021-01-01\n      09:00\n      0.37\n    \n  \n\n\n\n\n\ndf_temp2[:-10]\n\n\n\n\n\n  \n    \n      \n      지점명\n      날짜\n      시간\n      일사\n    \n  \n  \n    \n      0\n      북춘천\n      2021-01-01\n      00:00\n      0.00\n    \n    \n      1\n      북춘천\n      2021-01-01\n      01:00\n      0.00\n    \n    \n      2\n      북춘천\n      2021-01-01\n      02:00\n      0.00\n    \n    \n      3\n      북춘천\n      2021-01-01\n      03:00\n      0.00\n    \n    \n      4\n      북춘천\n      2021-01-01\n      04:00\n      0.00\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      770865\n      경주시\n      2022-12-31\n      09:00\n      0.41\n    \n    \n      770866\n      경주시\n      2022-12-31\n      10:00\n      1.05\n    \n    \n      770867\n      경주시\n      2022-12-31\n      11:00\n      1.52\n    \n    \n      770868\n      경주시\n      2022-12-31\n      12:00\n      1.86\n    \n    \n      770869\n      경주시\n      2022-12-31\n      13:00\n      1.93\n    \n  \n\n770870 rows × 4 columns\n\n\n\n- 시간,날짜 \\(\\to\\) 일시\n\ndf_temp3=df_temp2.assign(일시 = list(map(lambda x,y: x+'-'+y,df_temp2['날짜'],df_temp2['시간'])))\\\n.drop(['날짜','시간'],axis=1)\ndf_temp3\n\n\n\n\n\n  \n    \n      \n      지점명\n      일사\n      일시\n    \n  \n  \n    \n      0\n      북춘천\n      0.0\n      2021-01-01-00:00\n    \n    \n      1\n      북춘천\n      0.0\n      2021-01-01-01:00\n    \n    \n      2\n      북춘천\n      0.0\n      2021-01-01-02:00\n    \n    \n      3\n      북춘천\n      0.0\n      2021-01-01-03:00\n    \n    \n      4\n      북춘천\n      0.0\n      2021-01-01-04:00\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      770875\n      경주시\n      0.0\n      2022-12-31-19:00\n    \n    \n      770876\n      경주시\n      0.0\n      2022-12-31-20:00\n    \n    \n      770877\n      경주시\n      0.0\n      2022-12-31-21:00\n    \n    \n      770878\n      경주시\n      0.0\n      2022-12-31-22:00\n    \n    \n      770879\n      경주시\n      0.0\n      2022-12-31-23:00\n    \n  \n\n770880 rows × 3 columns\n\n\n\n- 저장\n\ndf_temp3.rename({'지점명':'region','일사':'solar_radiation','일시':'date'},axis=1)\n\n\n\n\n\n  \n    \n      \n      region\n      solar_radiation\n      date\n    \n  \n  \n    \n      0\n      북춘천\n      0.0\n      2021-01-01-00:00\n    \n    \n      1\n      북춘천\n      0.0\n      2021-01-01-01:00\n    \n    \n      2\n      북춘천\n      0.0\n      2021-01-01-02:00\n    \n    \n      3\n      북춘천\n      0.0\n      2021-01-01-03:00\n    \n    \n      4\n      북춘천\n      0.0\n      2021-01-01-04:00\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      770875\n      경주시\n      0.0\n      2022-12-31-19:00\n    \n    \n      770876\n      경주시\n      0.0\n      2022-12-31-20:00\n    \n    \n      770877\n      경주시\n      0.0\n      2022-12-31-21:00\n    \n    \n      770878\n      경주시\n      0.0\n      2022-12-31-22:00\n    \n    \n      770879\n      경주시\n      0.0\n      2022-12-31-23:00\n    \n  \n\n770880 rows × 3 columns\n\n\n\n\ndf = df_temp3.rename({'지점명':'region','일사':'solar_radiation','일시':'date'},axis=1)\ndf.to_csv(\"solar_radiation2.csv\",index=False)\n!git add .\n!git commit -m .\n!git push \n\n[main 2af59d2] .\n 13 files changed, 780980 insertions(+), 2928 deletions(-)\n create mode 100644 \"posts/Study/.ipynb_checkpoints/2023-04-03-\\354\\235\\274\\354\\202\\254\\353\\237\\211-checkpoint.ipynb\"\n create mode 100644 posts/Study/.ipynb_checkpoints/2023-04-10-arima-ex-checkpoint.ipynb\n create mode 100644 posts/Study/.ipynb_checkpoints/2023-04-10-arima-ex-day-checkpoint.ipynb\n create mode 100644 posts/Study/.ipynb_checkpoints/2023-04-11-arima-hour-data-fill-checkpoint.ipynb\n create mode 100644 \"posts/Study/2023-04-03-\\354\\235\\274\\354\\202\\254\\353\\237\\211.ipynb\"\n create mode 100644 posts/Study/2023-04-10-arima-ex-day.ipynb\n create mode 100644 posts/Study/2023-04-10-arima-ex.ipynb\n create mode 100644 posts/Study/2023-04-11-arima-hour-data-fill.ipynb\n create mode 100644 posts/Study/solar_radiation2.csv\nEnumerating objects: 17, done.\nCounting objects: 100% (17/17), done.\nDelta compression using up to 16 threads\nCompressing objects: 100% (13/13), done.\nWriting objects: 100% (13/13), 3.21 MiB | 1.27 MiB/s, done.\nTotal 13 (delta 6), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (6/6), completed with 2 local objects.\nTo https://github.com/pinkocto/noteda\n   0bb5fb7..2af59d2  main -> main\n\n\n- 불러오기\n\n# df = pd.read_csv(\"https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/solar_radiation2.csv\")\n# df\n\n- 다운로드\n\n# !wget https://raw.githubusercontent.com/miruetoto/yechan3/main/posts/3_Researches/SOLAR/solar_radiation.csv"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-stgcn.html",
    "href": "posts/SOLAR/2023-04-06-stgcn.html",
    "title": "ChikenpoxDataset",
    "section": "",
    "text": "ref: https://miruetoto.github.io/yechan3/posts/3_Researches/ITSTGCN/2022-12-29-STGCN-tutorial.html\nref: https://pytorch-geometric-temporal.readthedocs.io/en/latest/modules/signal.html\nref: https://pytorch-geometric-temporal.readthedocs.io/en/latest/modules/dataset.html#module-torch_geometric_temporal.dataset.chickenpox"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-stgcn.html#imports",
    "href": "posts/SOLAR/2023-04-06-stgcn.html#imports",
    "title": "ChikenpoxDataset",
    "section": "imports",
    "text": "imports\n\n# 일반적인 모듈 \nimport numpy as np\nimport matplotlib.pyplot as plt \nimport networkx as nx \nfrom tqdm import tqdm \n\n# 파이토치 관련 \nimport torch\nimport torch.nn.functional as F\n\n# PyG 관련 \nfrom torch_geometric.data import Data ## Data: 그래프자료형을 만드는 클래스\n\n# STGCN 관련 \nimport torch_geometric_temporal\nfrom torch_geometric_temporal.nn.recurrent import GConvGRU\nfrom torch_geometric_temporal.signal import temporal_signal_split \n\n- STGCN의 학습을 위한 클래스 선언\n\nclass RecurrentGCN(torch.nn.Module):\n    def __init__(self, node_features, filters):\n        super(RecurrentGCN, self).__init__()\n        self.recurrent = GConvGRU(node_features, filters, 2)\n        self.linear = torch.nn.Linear(filters, 1)\n\n    def forward(self, x, edge_index, edge_weight):\n        h = self.recurrent(x, edge_index, edge_weight)\n        h = F.relu(h)\n        h = self.linear(h)\n        return h"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-stgcn.html#pytorch-goemetric-temporal의-자료형",
    "href": "posts/SOLAR/2023-04-06-stgcn.html#pytorch-goemetric-temporal의-자료형",
    "title": "ChikenpoxDataset",
    "section": "PyTorch Goemetric Temporal의 자료형",
    "text": "PyTorch Goemetric Temporal의 자료형\n\n## Temporal Signal Iterators\ntorch_geometric_temporal.signal.StaticGraphTemporalSignal ##  시간에 따라 그래프 구조가 일정\ntorch_geometric_temporal.signal.DynamicGraphTemporalSignal\ntorch_geometric_temporal.signal.DynamicGraphStaticSignal\n## Heterogeneous Temporal Signal Iterators\ntorch_geometric_temporal.signal.StaticHeteroGraphTemporalSignal\ntorch_geometric_temporal.signal.DynamicHeteroGraphTemporalSignal\ntorch_geometric_temporal.signal.DynamicHeteroGraphStaticSignal\n\ntorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal\n\n\nStaticGraphTemporalSignal는 시간에 따라서 그래프 구조가 일정한 경우, 즉 \\(\\cal{G}_t = \\{\\cal{V}, \\cal{E}\\}\\) 와 같은 구조를 의미한다."
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-stgcn.html#예제-staticgraphtemporalsignal을-이용하여-데이터-셋-만들기",
    "href": "posts/SOLAR/2023-04-06-stgcn.html#예제-staticgraphtemporalsignal을-이용하여-데이터-셋-만들기",
    "title": "ChikenpoxDataset",
    "section": "(예제) StaticGraphTemporalSignal을 이용하여 데이터 셋 만들기",
    "text": "(예제) StaticGraphTemporalSignal을 이용하여 데이터 셋 만들기\n- json data \\(\\to\\) dict\n\nimport json\nimport urllib\n\n\nurl = \"https://raw.githubusercontent.com/benedekrozemberczki/pytorch_geometric_temporal/master/dataset/chickenpox.json\"\ndata_dict = json.loads(urllib.request.urlopen(url).read())\n# data_dict 출력이 김\n\n\n시각화\n모든 노드가 서로 연결되었다는 가정시\n\ndata_dict.keys() \n\ndict_keys(['edges', 'node_ids', 'FX'])\n\n\n\nnode_list = list(data_dict['node_ids'].keys())\nV = {v for i, v in enumerate(node_list)}\n#V\n\n\nfrom itertools import permutations\nE = list(permutations(node_list, 2))\n\n\nimport networkx as nx\nimport matplotlib.pyplot as plt\nG = nx.Graph()\nG.add_nodes_from(V)\nG.add_edges_from(E)\n\n\nnx.draw_networkx(G,node_size=2500,font_weight=900,font_size=25,alpha=0.8)\nfig=plt.gcf()\nfig.set_figheight(8)\nfig.set_figwidth(15)\n\n\n\n\n- 시각화 코드 정리\n\ndef plot(G):\n    nx.draw_networkx(G,node_size=2500,font_weight=900,font_size=25,alpha=0.8,arrowsize=20)\n    fig=plt.gcf()\n    fig.set_figheight(8)\n    fig.set_figwidth(15)\n\n- 속성체크\n\n\\(\\cal{V}, \\cal{E}\\)\n\n\n#print(f\"V = {G.nodes}\")\nprint(f\"E = {G.edges}\")\n\nE = [('PEST', 'BACS'), ('PEST', 'BUDAPEST'), ('PEST', 'FEJER'), ('PEST', 'HEVES'), ('PEST', 'JASZ'), ('PEST', 'KOMAROM'), ('PEST', 'NOGRAD'), ('PEST', 'PEST'), ('BACS', 'JASZ'), ('BACS', 'FEJER'), ('BACS', 'BARANYA'), ('BACS', 'BACS'), ('BACS', 'CSONGRAD'), ('BACS', 'TOLNA'), ('SZABOLCS', 'BORSOD'), ('SZABOLCS', 'HAJDU'), ('SZABOLCS', 'SZABOLCS'), ('BORSOD', 'HAJDU'), ('BORSOD', 'NOGRAD'), ('BORSOD', 'HEVES'), ('BORSOD', 'JASZ'), ('BORSOD', 'BORSOD'), ('HEVES', 'HEVES'), ('HEVES', 'NOGRAD'), ('HEVES', 'JASZ'), ('CSONGRAD', 'BEKES'), ('CSONGRAD', 'JASZ'), ('CSONGRAD', 'CSONGRAD'), ('GYOR', 'GYOR'), ('GYOR', 'VAS'), ('GYOR', 'KOMAROM'), ('GYOR', 'VESZPREM'), ('ZALA', 'SOMOGY'), ('ZALA', 'VAS'), ('ZALA', 'VESZPREM'), ('ZALA', 'ZALA'), ('TOLNA', 'BARANYA'), ('TOLNA', 'FEJER'), ('TOLNA', 'SOMOGY'), ('TOLNA', 'TOLNA'), ('VESZPREM', 'FEJER'), ('VESZPREM', 'KOMAROM'), ('VESZPREM', 'SOMOGY'), ('VESZPREM', 'VAS'), ('VESZPREM', 'VESZPREM'), ('HAJDU', 'BEKES'), ('HAJDU', 'HAJDU'), ('HAJDU', 'JASZ'), ('BEKES', 'JASZ'), ('BEKES', 'BEKES'), ('FEJER', 'FEJER'), ('FEJER', 'SOMOGY'), ('FEJER', 'KOMAROM'), ('NOGRAD', 'NOGRAD'), ('SOMOGY', 'BARANYA'), ('SOMOGY', 'SOMOGY'), ('BUDAPEST', 'BUDAPEST'), ('BARANYA', 'BARANYA'), ('VAS', 'VAS'), ('JASZ', 'JASZ'), ('KOMAROM', 'KOMAROM')]\n\n\n\nlen(E), len(data_dict['edges']), data_dict['edges'][:5]\n\n(102, 102, [[0, 10], [0, 6], [0, 13], [0, 1], [0, 0]])\n\n\n이번에는 원래대로\n\nnode_list = list(data_dict['node_ids'].keys())\nV = {v for i, v in enumerate(node_list)}\n\n\nE = []\nfor i in range(len(data_dict['edges'])):\n    E.append((node_list[data_dict['edges'][i][0]], node_list[data_dict['edges'][i][1]]))\n\n\nimport networkx as nx\nimport matplotlib.pyplot as plt\nG = nx.Graph()\nG.add_nodes_from(V)\nG.add_edges_from(E)\n\n\nnx.draw_networkx(G,node_size=2500,font_weight=900,font_size=15,alpha=0.8)\nfig=plt.gcf()\nfig.set_figheight(8)\nfig.set_figwidth(15)\n\n\n\n\n- 살펴보기\n\nnp.array(data_dict['edges']).T\n\narray([[ 0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,\n         3,  3,  3,  3,  3,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  6,\n         6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,\n        10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12,\n        12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15,\n        15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18,\n        18, 18, 19, 19, 19, 19],\n       [10,  6, 13,  1,  0,  5, 16,  0, 16,  1, 14, 10,  8,  2,  5,  8,\n        15, 12,  9, 10,  3,  4, 13,  0, 10,  2,  5,  0, 16,  6, 14, 13,\n        11, 18,  7, 17, 11, 18,  3,  2, 15,  8, 10,  9, 13,  3, 12, 10,\n         5,  9,  8,  3, 10,  2, 13,  0,  6, 11,  7, 13, 18,  3,  9, 13,\n        12, 13,  9,  6,  4, 12,  0, 11, 10, 18, 19,  1, 14,  6, 16,  3,\n        15,  8, 16, 14,  1,  0,  6,  7, 19, 17, 18, 14, 18, 17,  7,  6,\n        19, 11, 18, 14, 19, 17]])\n\n\n\nlen(data_dict['edges'])\n\n102\n\n\n\ndata_dict['edges'][:6] ## double list\n\n[[0, 10], [0, 6], [0, 13], [0, 1], [0, 0], [0, 5]]\n\n\n\n\\(\\cal{E} = \\{(0,10), (0,6), \\dots, (19,17)\\}\\)\n혹은 \\(\\cal{E} = \\{\\tt{(BACS,JASZ)}, \\tt{(BACS,FEJER)}, \\dots, \\tt{(ZALA,VAS)}\\}\\)\n\n\ndata_dict['node_ids']\n\n{'BACS': 0,\n 'BARANYA': 1,\n 'BEKES': 2,\n 'BORSOD': 3,\n 'BUDAPEST': 4,\n 'CSONGRAD': 5,\n 'FEJER': 6,\n 'GYOR': 7,\n 'HAJDU': 8,\n 'HEVES': 9,\n 'JASZ': 10,\n 'KOMAROM': 11,\n 'NOGRAD': 12,\n 'PEST': 13,\n 'SOMOGY': 14,\n 'SZABOLCS': 15,\n 'TOLNA': 16,\n 'VAS': 17,\n 'VESZPREM': 18,\n 'ZALA': 19}\n\n\n\n\\(\\cal{V} = \\{\\tt{BACS}, \\tt{BARANYA}, \\dots, \\tt{ZALA}\\}\\)\n\n\nnp.array(data_dict['FX']), np.array(data_dict['FX']).shape \n\n(array([[-1.08135724e-03, -7.11136085e-01, -3.22808515e+00, ...,\n          1.09445310e+00, -7.08747750e-01, -1.82280792e+00],\n        [ 2.85705967e-02, -5.98430173e-01, -2.29097341e-01, ...,\n         -1.59220988e+00, -2.24597623e-01,  7.86330575e-01],\n        [ 3.54742090e-01,  1.90511208e-01,  1.61028185e+00, ...,\n          1.38183225e-01, -7.08747750e-01, -5.61724314e-01],\n        ...,\n        [-4.75512620e-01, -1.19952837e+00, -3.89043358e-01, ...,\n         -1.00023329e+00, -1.71429032e+00,  4.70746677e-02],\n        [-2.08645035e-01,  6.03766218e-01,  1.08216835e-02, ...,\n          4.71099041e-02,  2.45684924e+00, -3.44296107e-01],\n        [ 1.21464875e+00,  7.16472130e-01,  1.29038982e+00, ...,\n          4.56939849e-01,  7.43702632e-01,  1.00375878e+00]]),\n (521, 20))\n\n\n\n\\({\\bf f}=\\begin{bmatrix} {\\bf f}_1\\\\ {\\bf f}_2\\\\ \\dots \\\\ {\\bf f}_{521} \\end{bmatrix}=\\begin{bmatrix} f(t=1,v=\\tt{BACS}) & \\dots & f(t=1,v=\\tt{ZALA}) \\\\ f(t=2,v=\\tt{BACS}) & \\dots & f(t=2,v=\\tt{ZALA}) \\\\ \\dots & \\dots & \\dots \\\\ f(t=521,v=\\tt{BACS}) & \\dots & f(t=521,v=\\tt{ZALA}) \\end{bmatrix}\\)\n\n즉, data_dict는 아래와 같이 구성되어 있다.\n\n\n\n\n\n\n\n\n\n\n수학 기호\n코드에 저장된 변수\n자료형\n차원\n설명\n\n\n\n\n\\({\\cal V}\\)\ndata_dict['node_ids']\ndict\n20\n20개의 노드에 대한 설명이 있음\n\n\n\\({\\cal E}\\)\ndata_dict['edges']\nlist (double list)\n(102,2)\n노드들에 대한 102개의 연결을 정의함\n\n\n\\({\\bf f}\\)\ndata_dict['node_ids']\ndict\n(521,20)\n\\(f(t,v)\\) for \\(v \\in {\\cal V}\\) and \\(t = 1,\\dots, T\\)\n\n\n\n- 주어진 자료를 정리하여 그래프신호 \\(\\big(\\{{\\cal V},{\\cal E},{\\bf W}\\},{\\bf f}\\big)\\)를 만들면 아래와 같다.\n\nedges = np.array(data_dict[\"edges\"]).T\nedge_weight = np.ones(edges.shape[1]) # 여기서는 0으로 초기값을 줌.\nf = np.array(data_dict[\"FX\"])\n\n- data_dict \\(\\to\\) dl\n\nlags = 4\nfeatures = [f[i : i + lags, :].T for i in range(f.shape[0] - lags)]\ntargets = [f[i + lags, :].T for i in range(f.shape[0] - lags)]\n\n\nnp.array(features).shape\n\n(517, 20, 4)\n\n\n\nnp.array(targets).shape\n\n(517, 20)\n\n\n\n\n\n\n\n\n\n설명변수\n반응변수\n\n\n\n\n\\({\\bf X} = {\\tt features} = \\begin{bmatrix} {\\bf f}_1 & {\\bf f}_2 & {\\bf f}_3 & {\\bf f}_4 \\\\ {\\bf f}_2 & {\\bf f}_3 & {\\bf f}_4 & {\\bf f}_5 \\\\ \\dots & \\dots & \\dots & \\dots \\\\ {\\bf f}_{517} & {\\bf f}_{518} & {\\bf f}_{519} & {\\bf f}_{520} \\end{bmatrix}\\)\n\\({\\bf y}= {\\tt targets} = \\begin{bmatrix} {\\bf f}_5 \\\\ {\\bf f}_6 \\\\ \\dots \\\\ {\\bf f}_{521} \\end{bmatrix}\\)\n\n\n\n\ndataset = torch_geometric_temporal.signal.StaticGraphTemporalSignal(\n    edge_index= edges,\n    edge_weight = edge_weight,\n    features = features,\n    targets = targets\n)\n\n\ndataset\n\n<torch_geometric_temporal.signal.static_graph_temporal_signal.StaticGraphTemporalSignal at 0x7f04c5584fa0>\n\n\n- 그런데 이 과정을 아래와 같이 할 수도 있음.\n\n# PyTorch Geometric Temporal 공식홈페이지에 소개된 코드\nloader = torch_geometric_temporal.dataset.ChickenpoxDatasetLoader()\ndataset = loader.get_dataset(lags=4)\n\n- dataset은 dataset[0], \\(\\dots\\), dataset[516]과 같은 방식으로 각 시점별 자료에 접근가능\n\ndataset[0]\n\nData(x=[20, 4], edge_index=[2, 102], edge_attr=[102], y=[20])\n\n\n각 시점에 대한 자료형은 아까 살펴보았던 PyG의 Data 자료형과 같음\n\ntype(dataset[0])\n\ntorch_geometric.data.data.Data\n\n\n\ndataset[0].x \n\ntensor([[-1.0814e-03,  2.8571e-02,  3.5474e-01,  2.9544e-01],\n        [-7.1114e-01, -5.9843e-01,  1.9051e-01,  1.0922e+00],\n        [-3.2281e+00, -2.2910e-01,  1.6103e+00, -1.5487e+00],\n        [ 6.4750e-01, -2.2117e+00, -9.6858e-01,  1.1862e+00],\n        [-1.7302e-01, -9.4717e-01,  1.0347e+00, -6.3751e-01],\n        [ 3.6345e-01, -7.5468e-01,  2.9768e-01, -1.6273e-01],\n        [-3.4174e+00,  1.7031e+00, -1.6434e+00,  1.7434e+00],\n        [-1.9641e+00,  5.5208e-01,  1.1811e+00,  6.7002e-01],\n        [-2.2133e+00,  3.0492e+00, -2.3839e+00,  1.8545e+00],\n        [-3.3141e-01,  9.5218e-01, -3.7281e-01, -8.2971e-02],\n        [-1.8380e+00, -5.8728e-01, -3.5514e-02, -7.2298e-02],\n        [-3.4669e-01, -1.9827e-01,  3.9540e-01, -2.4774e-01],\n        [ 1.4219e+00, -1.3266e+00,  5.2338e-01, -1.6374e-01],\n        [-7.7044e-01,  3.2872e-01, -1.0400e+00,  3.4945e-01],\n        [-7.8061e-01, -6.5022e-01,  1.4361e+00, -1.2864e-01],\n        [-1.0993e+00,  1.2732e-01,  5.3621e-01,  1.9023e-01],\n        [ 2.4583e+00, -1.7811e+00,  5.0732e-02, -9.4371e-01],\n        [ 1.0945e+00, -1.5922e+00,  1.3818e-01,  1.1855e+00],\n        [-7.0875e-01, -2.2460e-01, -7.0875e-01,  1.5630e+00],\n        [-1.8228e+00,  7.8633e-01, -5.6172e-01,  1.2647e+00]])\n\n\n\n이 값들은 features[0]의 값들과 같음. 즉, \\([{\\bf f}_1~ {\\bf f}_2~ {\\bf f}_3~ {\\bf f}_4]\\)를 의미함\n\n\ndataset[0].y\n\ntensor([ 0.7106, -0.0725,  2.6099,  1.7870,  0.8024, -0.2614, -0.8370,  1.9674,\n        -0.4212,  0.1655,  1.2519,  2.3743,  0.7877,  0.4531, -0.1721, -0.0614,\n         1.0452,  0.3203, -1.3791,  0.0036])\n\n\n\n이 값들은 targets[0]의 값들과 같음. 즉, \\({\\bf f}_5\\)를 의미함."
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-stgcn.html#chikenpoxdataset-분석",
    "href": "posts/SOLAR/2023-04-06-stgcn.html#chikenpoxdataset-분석",
    "title": "ChikenpoxDataset",
    "section": "ChikenpoxDataset 분석",
    "text": "ChikenpoxDataset 분석\nref: https://pytorch-geometric-temporal.readthedocs.io/en/latest/modules/dataset.html#module-torch_geometric_temporal.dataset.chickenpox\nA dataset of county level chicken pox cases in Hungary between 2004 and 2014. We made it public during the development of PyTorch Geometric Temporal. The underlying graph is static - vertices are counties and edges are neighbourhoods. Vertex features are lagged weekly counts of the chickenpox cases (we included 4 lags). The target is the weekly number of cases for the upcoming week (signed integers). Our dataset consist of more than 500 snapshots (weeks).\n\nloader = torch_geometric_temporal.dataset.ChickenpoxDatasetLoader()\ndataset = loader.get_dataset(lags=4)\ntrain_dataset, test_dataset = temporal_signal_split(dataset, train_ratio=0.8)\n\n\nLearn\n\nmodel = RecurrentGCN(node_features=4, filters=32)\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\nmodel.train()\n\nfor epoch in tqdm(range(50)):\n    for t, snapshot in enumerate(train_dataset):\n        yt_hat = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n        cost = torch.mean((yt_hat-snapshot.y)**2)\n        cost.backward()\n        optimizer.step()\n        optimizer.zero_grad()\n\n100%|█████████████████████████████████████████████████████████████████████████████████████████████████████| 50/50 [00:55<00:00,  1.12s/it]\n\n\n\n\nVisualization\n\nmodel.eval()\n\nRecurrentGCN(\n  (recurrent): GConvGRU(\n    (conv_x_z): ChebConv(4, 32, K=2, normalization=sym)\n    (conv_h_z): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_r): ChebConv(4, 32, K=2, normalization=sym)\n    (conv_h_r): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_h): ChebConv(4, 32, K=2, normalization=sym)\n    (conv_h_h): ChebConv(32, 32, K=2, normalization=sym)\n  )\n  (linear): Linear(in_features=32, out_features=1, bias=True)\n)\n\n\n\nyhat_train = torch.stack([model(snapshot.x,snapshot.edge_index, snapshot.edge_attr) for snapshot in train_dataset]).detach().numpy()\nyhat_test = torch.stack([model(snapshot.x,snapshot.edge_index, snapshot.edge_attr) for snapshot in test_dataset]).detach().numpy()\n\n\nyhat_train.shape, yhat_test.shape\n\n((413, 20, 1), (104, 20, 1))\n\n\n\nV = list(data_dict['node_ids'].keys())\nV\n\n['BACS',\n 'BARANYA',\n 'BEKES',\n 'BORSOD',\n 'BUDAPEST',\n 'CSONGRAD',\n 'FEJER',\n 'GYOR',\n 'HAJDU',\n 'HEVES',\n 'JASZ',\n 'KOMAROM',\n 'NOGRAD',\n 'PEST',\n 'SOMOGY',\n 'SZABOLCS',\n 'TOLNA',\n 'VAS',\n 'VESZPREM',\n 'ZALA']\n\n\n\nfig,ax = plt.subplots(20,1,figsize=(10,50))\nfor k in range(20):\n    ax[k].plot(f[:,k],'--',alpha=0.5,label='observed')\n    ax[k].set_title('node: {}'.format(V[k]))\n    ax[k].plot(yhat_train[:,k],label='predicted (tr)')\n    ax[k].plot(range(yhat_train.shape[0],yhat_train.shape[0]+yhat_test.shape[0]),yhat_test[:,k],label='predicted (test)')\n    ax[k].legend()\nfig.tight_layout()\n\n\n\n\n\nref(오류해결): https://stackoverflow.com/questions/48837384/how-to-create-tuple-with-a-loop-in-python"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-soloar-stgcn-ver1-lag1.html",
    "href": "posts/SOLAR/2023-04-09-soloar-stgcn-ver1-lag1.html",
    "title": "[SOLAR] STGCN Ver1 lag1",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport json\nimport urllib\nimport time\n\n\n# 일반적인 모듈 \nimport numpy as np\nimport matplotlib.pyplot as plt \nimport networkx as nx \nfrom tqdm import tqdm \n\n# 파이토치 관련 \nimport torch\nimport torch.nn.functional as F\n\n# PyG 관련 \nfrom torch_geometric.data import Data ## Data: 그래프자료형을 만드는 클래스\n\n# STGCN 관련 \nimport torch_geometric_temporal\nfrom torch_geometric_temporal.nn.recurrent import GConvGRU\nfrom torch_geometric_temporal.signal import temporal_signal_split \n\n\nclass RecurrentGCN(torch.nn.Module):\n    def __init__(self, node_features, filters):\n        super(RecurrentGCN, self).__init__()\n        self.recurrent = GConvGRU(node_features, filters, 2)\n        self.linear = torch.nn.Linear(filters, 1)\n\n    def forward(self, x, edge_index, edge_weight):\n        h = self.recurrent(x, edge_index, edge_weight)\n        h = F.relu(h)\n        h = self.linear(h)\n        return h\n\n\nfrom mysolar import SolarDatasetLoader\n\n\nloader = SolarDatasetLoader()\ndataset = loader.get_dataset(lags=1)\ntrain_dataset, test_dataset = temporal_signal_split(dataset, train_ratio=0.8)\n\n\nnp.array(dataset.features).shape\n\n(18249, 44, 1)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-soloar-stgcn-ver1-lag1.html#learn",
    "href": "posts/SOLAR/2023-04-09-soloar-stgcn-ver1-lag1.html#learn",
    "title": "[SOLAR] STGCN Ver1 lag1",
    "section": "Learn",
    "text": "Learn\n\nmodel = RecurrentGCN(node_features=1, filters=32)\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\nmodel.train()\n\nRecurrentGCN(\n  (recurrent): GConvGRU(\n    (conv_x_z): ChebConv(1, 32, K=2, normalization=sym)\n    (conv_h_z): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_r): ChebConv(1, 32, K=2, normalization=sym)\n    (conv_h_r): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_h): ChebConv(1, 32, K=2, normalization=sym)\n    (conv_h_h): ChebConv(32, 32, K=2, normalization=sym)\n  )\n  (linear): Linear(in_features=32, out_features=1, bias=True)\n)\n\n\n\nstart = time.time()\nfor epoch in tqdm(range(50)):\n    for t, snapshot in enumerate(train_dataset):\n        yt_hat = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n        cost = torch.mean((yt_hat-snapshot.y)**2)\n        cost.backward()\n        optimizer.step()\n        optimizer.zero_grad()\nend = time.time()\nprint(f\"{end-start:.5f} sec\")\n\n100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 50/50 [48:36<00:00, 58.33s/it]\n\n\n2916.28218 sec\n\n\n\n\n\n\nprint(2916/60, '분')\n\n48.6 분\n\n\n\n# import pickle \n# with open('stgcn1_lag1.pickle','wb') as fw:\n#     pickle.dump(model, fw)\n\n\nimport pickle \nwith open('stgcn1_lag1.pickle', 'rb') as f: \n    model = pickle.load(f)\n\n\nmodel\n\nRecurrentGCN(\n  (recurrent): GConvGRU(\n    (conv_x_z): ChebConv(1, 32, K=2, normalization=sym)\n    (conv_h_z): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_r): ChebConv(1, 32, K=2, normalization=sym)\n    (conv_h_r): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_h): ChebConv(1, 32, K=2, normalization=sym)\n    (conv_h_h): ChebConv(32, 32, K=2, normalization=sym)\n  )\n  (linear): Linear(in_features=32, out_features=1, bias=True)\n)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-soloar-stgcn-ver1-lag1.html#모델평가",
    "href": "posts/SOLAR/2023-04-09-soloar-stgcn-ver1-lag1.html#모델평가",
    "title": "[SOLAR] STGCN Ver1 lag1",
    "section": "모델평가",
    "text": "모델평가\n\nmodel.eval()\ncost = 0\nfor time, snapshot in enumerate(train_dataset):\n    y_hat = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n    cost = cost + torch.mean((y_hat-snapshot.y)**2)\ncost = cost / (time+1)\ncost = cost.item()\nprint(\"MSE: {:.4f}\".format(cost))\n\nMSE: 0.1695\n\n\n\nmodel.eval()\ncost = 0\nfor time, snapshot in enumerate(test_dataset):\n    y_hat = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n    cost = cost + torch.mean((y_hat-snapshot.y)**2)\ncost = cost / (time+1)\ncost = cost.item()\nprint(\"MSE: {:.4f}\".format(cost))\n\nMSE: 0.1443\n\n\n\nyhat_train = torch.stack([model(snapshot.x,snapshot.edge_index, snapshot.edge_attr) for snapshot in train_dataset]).detach().numpy()\nyhat_test = torch.stack([model(snapshot.x,snapshot.edge_index, snapshot.edge_attr) for snapshot in test_dataset]).detach().numpy()\n\n\nurl = 'https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/solar.json'\ndata_dict = json.loads(urllib.request.urlopen(url).read())\nV = list(data_dict['node_ids'].keys())\nf = np.array(data_dict[\"FX\"])"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-soloar-stgcn-ver1-lag1.html#visualization",
    "href": "posts/SOLAR/2023-04-09-soloar-stgcn-ver1-lag1.html#visualization",
    "title": "[SOLAR] STGCN Ver1 lag1",
    "section": "Visualization",
    "text": "Visualization\n\nimport matplotlib.pyplot as plt\nplt.rcParams['font.family'] = 'NanumGothic'\n\n\nyhat_train.shape\n\n(14599, 44, 1)\n\n\n\nt1= 0\nt2= 100\nfig,ax = plt.subplots(5,1,figsize=(10,10))\nfor k in range(5):\n    ax[k].plot(f[t1:t2,k],'--',alpha=0.5,label='observed')\n    ax[k].set_title('node: {}'.format(V[k]))\n    ax[k].plot(yhat_train[t1:t2,k],label='predicted (tr)')\n    # test_time_index = range(yhat_train.shape[0],yhat_train.shape[0]+yhat_test.shape[0])\n    # test_predicted = yhat_test[:,k]\n    # ax[k].plot(test_time_index[t1:t2],test_predicted[t1:t2],label='predicted (test)')\n    ax[k].legend()\nfig.tight_layout()"
  },
  {
    "objectID": "posts/SOLAR/2023-03-01-todolist.html",
    "href": "posts/SOLAR/2023-03-01-todolist.html",
    "title": "[SOLAR] To do list",
    "section": "",
    "text": "04/12 update\n\n\n\n\n데이터 중복문제\n데이터 기간 재설정: 6월-8월15 // 8월15 ~9월15\n\n\n\n\nhttps://www.kaggle.com/code/javigallego/time-series-forecasting-tutorial#4-%7C-Time-Series-Components\n\n시계열 모델 돌릴때 이전에 임의로 결측값을 \\(0\\)으로 채운 것 다른방법으로도 채워서 해봐야하나??\n\n\n\n\n\nhttps://machinelearningmastery.com/lstm-for-time-series-prediction-in-pytorch/\n가장 기본모델로 돌려보자.\n\n\n\n\n\n\n\n\nscaling이 필요할까..? (우선 스케일링안된 데이터 사용)\n\n\n\n\nhttps://pinkocto.github.io/noteda/posts/SOLAR/2023-04-07-stcgn-data-ver2.html#comparison\n\n\n\n\n\n지역별 correlation\nlag4 : \\(\\tt{MSE}: 0.0934\\) (약 1시간)\nlag1,2 등 정보가 더 적을때도 STGCN ver1이 더 좋은가?\n\n\n\n\n\nenvelope의 correlation\nlag4: \\(\\tt{MSE}: 0.0938\\) (약 1시간)\n\n\n\n\n\n\nimport pandas as pd\n\n\ncol = ['Model', 'lag', 'epoch','learning rate','scaling','EPT', 'train(MSE)','test(MSE)', 'Time(sec)']\n\n\ndf_row = pd.DataFrame(columns = col)\ndf_row['Model'] = ['STGCN v1','STGCN v2','STGCN v1', 'STGCN v2']\ndf_row['lag'] = ['lag4', 'lag4', 'lag1', 'lag1']\ndf_row['epoch'] = [50, 50, 50, 50]\ndf_row['learning rate'] = [0.01, 0.01, 0.01, 0.01]\ndf_row['scaling'] = ['X', 'X', 'X', 'X']\ndf_row['EPT'] = ['X', 'O', 'X', 'O']\n# df_row['Undersampling'] = ['X', 'X']\n# df_row['hyper tunning'] = ['X', 'O']\ndf_row['train(MSE)'] = [0.1041, 0.1069,0.1695, 0.1711]\ndf_row['test(MSE)'] = [0.0934, 0.0938, 0.1443, 0.1452]\ndf_row['Time(sec)'] = ['약 1시간 (시간측정X)','약 1시간 (시간측정X)', '2916.28218 (약 48.60분)', '2888.63086 (약 48.14분)']\n\n\ndf_row\n\n\n\n\n\n  \n    \n      \n      Model\n      lag\n      epoch\n      learning rate\n      scaling\n      EPT\n      train(MSE)\n      test(MSE)\n      Time(sec)\n    \n  \n  \n    \n      0\n      STGCN v1\n      lag4\n      50\n      0.01\n      X\n      X\n      0.1041\n      0.0934\n      약 1시간 (시간측정X)\n    \n    \n      1\n      STGCN v2\n      lag4\n      50\n      0.01\n      X\n      O\n      0.1069\n      0.0938\n      약 1시간 (시간측정X)\n    \n    \n      2\n      STGCN v1\n      lag1\n      50\n      0.01\n      X\n      X\n      0.1695\n      0.1443\n      2916.28218 (약 48.60분)\n    \n    \n      3\n      STGCN v2\n      lag1\n      50\n      0.01\n      X\n      O\n      0.1711\n      0.1452\n      2888.63086 (약 48.14분)\n    \n  \n\n\n\n\n- STGCN ver1\n\n\n\nSTGCN ve1 lag4\n\n\n- STGCN ver2\n\n\n\nSTGCN ver2 lag4\n\n\n\nver2가 더 성능이 잘 나올줄 알았는데 뭔가 잘못했나??\n시각화 그림을 보면 위에 가위로 자른 것 같이 생김. 일사량이 2.5이상으로 관측되면 잘 예측을 못하는 것 같음.\n맥시멈이 2.5인느낌. (너무 안전하게 예측하려고 하나?)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-ept-by-region.html",
    "href": "posts/SOLAR/2023-04-06-ept-by-region.html",
    "title": "[SOLAR] EPT by region",
    "section": "",
    "text": "ref: https://www.sciencedirect.com/science/article/pii/S2352711021000492"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-ept-by-region.html#데이터-처리",
    "href": "posts/SOLAR/2023-04-06-ept-by-region.html#데이터-처리",
    "title": "[SOLAR] EPT by region",
    "section": "데이터 처리",
    "text": "데이터 처리\n\ndf = df |> mutate(date=ymd_hm(date))\ndf %>% head()\n\n\n\nA tibble: 6 × 3\n\n    regionsolar_radiationdate\n    <chr><dbl><dttm>\n\n\n    북춘천02021-01-01 00:00:00\n    북춘천02021-01-01 01:00:00\n    북춘천02021-01-01 02:00:00\n    북춘천02021-01-01 03:00:00\n    북춘천02021-01-01 04:00:00\n    북춘천02021-01-01 05:00:00\n\n\n\n\n\ndim(df)\n\n\n8030003\n\n\n\nunique(df$region) %>% length()\n\n44"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-ept-by-region.html#plot",
    "href": "posts/SOLAR/2023-04-06-ept-by-region.html#plot",
    "title": "[SOLAR] EPT by region",
    "section": "Plot",
    "text": "Plot\n\nfor (i in 1:44){\n     assign(paste0('data',1:44)[i],df |> filter(region == unique(df$region)[i]))\n     assign(paste0('data',1:44)[i],eval(parse(text=paste0('data',i)))[order(eval(parse(text=paste0('data',i)))$date),])\n     assign(paste0('y',1:44)[i], eval(parse(text=paste0('data',i)))$solar_radiation)\n}\n\n\nfor (i in 1:44){\n    plot(eval(parse(text=paste0('y',i)))[1:500], ann=FALSE)\n    lines(eval(parse(text=paste0('y',i))),lty=2)\n    title(main = as.character(unique(df$region)[i]), xlab='time', ylab='solar radiation')\n    }"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-ept-by-region.html#etp-수행",
    "href": "posts/SOLAR/2023-04-06-ept-by-region.html#etp-수행",
    "title": "[SOLAR] EPT by region",
    "section": "ETP 수행",
    "text": "ETP 수행\n\nept = function(y){\n    EpM = eptransf(signal=y,tau=24,process=c(\"envelope\",\"average\"))$EpM\n    EpM*2\n}\n\n\n아래 코드 오래걸림 주의\n\n\nlibrary(tictoc)\n\n\ntic('지역별 yU계산')\nfor (i in 1:44){\n    assign(paste0('yU',1:44)[i], ept(eval(parse(text=paste0('y',i)))))\n}\ntoc()\n\n\nfor (i in 1:44){\n    plot(eval(parse(text=paste0('y',i)))[1:500], ann=FALSE)\n    lines(eval(parse(text=paste0('yU',i))),col = 2, lty=2)\n    title(main = as.character(unique(df$region)[i]), xlab='time', ylab='solar radiation')\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nref : https://jobmanager1.tistory.com/84\nref : https://rbasall.tistory.com/101"
  },
  {
    "objectID": "posts/SOLAR/2023-04-07-stcgn-data-ver2.html",
    "href": "posts/SOLAR/2023-04-07-stcgn-data-ver2.html",
    "title": "[SOLAR] Dataset for STGCN Ver2",
    "section": "",
    "text": "data\n\n\n\n\nimport pandas as pd\nimport numpy as np\nimport json\nimport urllib\n\nimport matplotlib.pyplot as plt\n\n\n# 일반적인 모듈 \nimport numpy as np\nimport matplotlib.pyplot as plt \nimport networkx as nx \nfrom tqdm import tqdm \n\n# 파이토치 관련 \nimport torch\nimport torch.nn.functional as F\n\n# PyG 관련 \nfrom torch_geometric.data import Data ## Data: 그래프자료형을 만드는 클래스\n\n# STGCN 관련 \nimport torch_geometric_temporal\nfrom torch_geometric_temporal.nn.recurrent import GConvGRU\nfrom torch_geometric_temporal.signal import temporal_signal_split \n\n- solar.json\n\nurl = 'https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/solar.json'\ndata_dict = json.loads(urllib.request.urlopen(url).read())\n\n\ndata_dict.keys()\n\ndict_keys(['edges', 'node_ids', 'weights', 'FX'])\n\n\n\nnp.array(data_dict['weights']).shape\n\n(1892,)\n\n\n- EPT weights\n\nurl2 = 'https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/yU_weight.csv'\nyu_weight = pd.read_csv(url2)\n\n\nyu_weight.shape\n\n(44, 44)\n\n\n\ndata_dict['weights'][:10], \n\n([0.962366714092048,\n  0.909825582944558,\n  0.985656552711889,\n  0.871680934662379,\n  0.90065860620053,\n  0.890926813199931,\n  0.94308108402774,\n  0.936899352767745,\n  0.94447272168175,\n  0.840858046009325],\n 0.8927396029030008)\n\n\n\nweights = []    \n \nfor i in range(44):\n    for j in range(44):\n        if i != j:\n            weights.append(yu_weight.iloc[i,j]) \n\n\nweights[:10], \n\n([0.936531892351231,\n  0.7910049258531,\n  0.971789275111083,\n  0.687837348221919,\n  0.770130634080735,\n  0.736971292542263,\n  0.901832850136046,\n  0.881446449497764,\n  0.895348289525123,\n  0.636585300037113],)\n\n\n\n\n\n\nnp.mean(data_dict['weights']), np.mean(weights)\n\n(0.8927396029030008, 0.7271816268896101)\n\n\n\nplt.hist(np.array(data_dict['weights']), alpha = 0.5, label = 'weights')\nplt.hist(np.array(weights), alpha = 0.5, label = 'EPT weights')\nplt.legend(loc='upper left')\n\n<matplotlib.legend.Legend at 0x7f752626fd90>\n\n\n\n\n\n- start\n\nnp.array(data_dict['weights']).shape\n\n(1892,)\n\n\n\nnp.array(weights).shape\n\n(1892,)\n\n\n\ndata_dict['weights'] = weights\n\n\ndata_dict['weights'][:10]\n\n[0.936531892351231,\n 0.7910049258531,\n 0.971789275111083,\n 0.687837348221919,\n 0.770130634080735,\n 0.736971292542263,\n 0.901832850136046,\n 0.881446449497764,\n 0.895348289525123,\n 0.636585300037113]\n\n\n\nnp.array(data_dict['weights']).mean()\n\n0.7271816268896101\n\n\n\ndata_dict.keys()\n\ndict_keys(['edges', 'node_ids', 'weights', 'FX'])\n\n\n\n# file_path = './data/solar2.json'\n\n\n# with open(file_path, 'w') as f:\n#     json.dump(data_dict, f)\n\n\nwith open(file_path, 'r') as f:\n    test = json.load(f, encoding='cp949')\n\n- 테스트\n\nfrom mysolar import SolarEPTDatasetLoader\n\n\nloader = SolarEPTDatasetLoader()\ndataset = loader.get_dataset(lags=4)\ntrain_dataset, test_dataset = temporal_signal_split(dataset, train_ratio=0.8)\n\n\ndata_train=[]\nfor time, snapshot in enumerate(train_dataset):\n    data_train.append([time, snapshot])\n\n\ndata_train[0][1].x.shape,data_train[0][1].y.shape,data_train[0][1].edge_index.shape,data_train[0][1].edge_attr.shape\n\n(torch.Size([44, 4]),\n torch.Size([44]),\n torch.Size([2, 1892]),\n torch.Size([1892]))\n\n\n\ndata_test=[]\nfor time, snapshot in enumerate(test_dataset):\n    data_test.append([time,snapshot])\n\n\ndata_test[0][1].x.shape,data_test[0][1].y.shape,data_test[0][1].edge_index.shape,data_test[0][1].edge_attr.shape\n\n(torch.Size([44, 4]),\n torch.Size([44]),\n torch.Size([2, 1892]),\n torch.Size([1892]))"
  },
  {
    "objectID": "posts/SOLAR/2023-04-04-EPT.html",
    "href": "posts/SOLAR/2023-04-04-EPT.html",
    "title": "[SOLAR] EPT",
    "section": "",
    "text": "ref: https://www.sciencedirect.com/science/article/pii/S2352711021000492\n\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(EPT)\n\n\nurl = 'https://raw.githubusercontent.com/miruetoto/yechan3/main/posts/3_Researches/SOLAR/solar_radiation.csv'\ndf = read_csv(url)\n\nRows: 803000 Columns: 3\n── Column specification ────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): region, date\ndbl (1): solar_radiation\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ndf = df |> filter(region == '북춘천') |> mutate(date=ymd_hm(date))\ndf\n\n\n\nA tibble: 18250 × 3\n\n    regionsolar_radiationdate\n    <chr><dbl><dttm>\n\n\n    북춘천0.002021-01-01 00:00:00\n    북춘천0.002021-01-01 01:00:00\n    북춘천0.002021-01-01 02:00:00\n    북춘천0.002021-01-01 03:00:00\n    북춘천0.002021-01-01 04:00:00\n    북춘천0.002021-01-01 05:00:00\n    북춘천0.002021-01-01 06:00:00\n    북춘천0.002021-01-01 07:00:00\n    북춘천0.002021-01-01 08:00:00\n    북춘천0.372021-01-01 09:00:00\n    북춘천0.962021-01-01 10:00:00\n    북춘천1.402021-01-01 11:00:00\n    북춘천1.722021-01-01 12:00:00\n    북춘천1.842021-01-01 13:00:00\n    북춘천1.742021-01-01 14:00:00\n    북춘천1.302021-01-01 15:00:00\n    북춘천0.932021-01-01 16:00:00\n    북춘천0.292021-01-01 17:00:00\n    북춘천0.012021-01-01 18:00:00\n    북춘천0.002021-01-01 19:00:00\n    북춘천0.002021-01-01 07:00:00\n    북춘천0.002021-01-01 20:00:00\n    북춘천0.002021-01-01 06:00:00\n    북춘천0.002021-01-01 21:00:00\n    북춘천0.002021-01-01 05:00:00\n    북춘천0.002021-01-02 00:00:00\n    북춘천0.002021-01-02 01:00:00\n    북춘천0.002021-01-02 02:00:00\n    북춘천0.002021-01-02 03:00:00\n    북춘천0.002021-01-02 04:00:00\n    ⋮⋮⋮\n    북춘천0.002022-12-30 07:00:00\n    북춘천0.002022-12-30 20:00:00\n    북춘천0.002022-12-30 06:00:00\n    북춘천0.002022-12-30 21:00:00\n    북춘천0.002022-12-30 05:00:00\n    북춘천0.002022-12-31 00:00:00\n    북춘천0.002022-12-31 01:00:00\n    북춘천0.002022-12-31 02:00:00\n    북춘천0.002022-12-31 03:00:00\n    북춘천0.002022-12-31 04:00:00\n    북춘천0.002022-12-31 05:00:00\n    북춘천0.002022-12-31 06:00:00\n    북춘천0.002022-12-31 07:00:00\n    북춘천0.002022-12-31 08:00:00\n    북춘천0.222022-12-31 09:00:00\n    북춘천0.502022-12-31 10:00:00\n    북춘천0.802022-12-31 11:00:00\n    북춘천2.132022-12-31 12:00:00\n    북춘천1.782022-12-31 13:00:00\n    북춘천1.452022-12-31 14:00:00\n    북춘천0.782022-12-31 15:00:00\n    북춘천0.382022-12-31 16:00:00\n    북춘천0.152022-12-31 17:00:00\n    북춘천0.002022-12-31 18:00:00\n    북춘천0.002022-12-31 19:00:00\n    북춘천0.002022-12-31 07:00:00\n    북춘천0.002022-12-31 20:00:00\n    북춘천0.002022-12-31 06:00:00\n    북춘천0.002022-12-31 21:00:00\n    북춘천0.002022-12-31 05:00:00\n\n\n\n\n- 지역을 북춘천으로 고정\n\ndf2 = df |> filter(region =='북춘천') \ndf2 = df2[order(df2$date),]\n\n\ny = df2$solar_radiation\ny\n\n\n0000000000000.370.961.41.721.841.741.30.930.290.010000000000000000.320.951.461.791.911.821.50.970.370.010000000000000000.290.891.41.751.761.350.820.520.30.010000000000000000.330.931.321.531.671.5110.790.1900000000000000000.190.791.411.761.931.851.561.050.450.020000000000000000.511.381.811.881.931.851.5210.410.020000000000000000.110.741.441.811.981.911.611.090.450.020000000000000000.360.971.491.8521.911.611.10.480.03000⋯000000000000.010.471.31.711.871.881.721.380.880.3200000000000000000.190.681.351.712.191.891.380.820.2600000000000000000.150.420.931.071.181.051.160.830.300000000000000000.080.280.430.741.41.841.530.850.2700000000000000000.411.021.841.921.851.721.420.930.340.010000000000000000.471.281.681.81.851.741.40.890.30.010000000000000000.150.641.11.732.121.741.290.860.310.010000000000000000.220.50.82.131.781.450.780.380.150000\n\n\n\nplot(y[1:500])\nlines(y[1:500],lty=2)\n\n\n\n\n- EPT 수행\n\nept = function(y){\n    EpM = eptransf(signal=y,tau=24,process=c(\"envelope\",\"average\"))$EpM\n    EpM*2\n}\n\n\nyU = ept(y)\n\n\nplot(y[1:500])\nlines(yU[1:500],col=2,lty=2)\n\n\n\n\n- todo: 모든 지역에대하여 yU를 구하여 저장"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-windmill.html",
    "href": "posts/SOLAR/2023-04-06-windmill.html",
    "title": "WindmillOutputLargeDataset 분석 (실패)",
    "section": "",
    "text": "중간에 커널 끊김 (학습시간 4시간 정도), 좀더 작은 버전으로 해볼 것."
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-windmill.html#ref",
    "href": "posts/SOLAR/2023-04-06-windmill.html#ref",
    "title": "WindmillOutputLargeDataset 분석 (실패)",
    "section": "Ref",
    "text": "Ref\n\nhttps://pytorch-geometric-temporal.readthedocs.io/en/latest/modules/dataset.html#module-torch_geometric_temporal.dataset.chickenpox\nhttps://seoyeonc.github.io/blog/posts/GCN/2023-03-20-data%20load,%20data%20save%20as%20pickle.html#windmilloutputlargedatasetloader"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-windmill.html#import",
    "href": "posts/SOLAR/2023-04-06-windmill.html#import",
    "title": "WindmillOutputLargeDataset 분석 (실패)",
    "section": "import",
    "text": "import\n\nimport pandas as pd\nimport numpy as np\nimport json\nimport urllib\n\n\n# 일반적인 모듈 \nimport numpy as np\nimport matplotlib.pyplot as plt \nimport networkx as nx \nfrom tqdm import tqdm \n\n# 파이토치 관련 \nimport torch\nimport torch.nn.functional as F\n\n# PyG 관련 \nfrom torch_geometric.data import Data ## Data: 그래프자료형을 만드는 클래스\n\n# STGCN 관련 \nimport torch_geometric_temporal\nfrom torch_geometric_temporal.nn.recurrent import GConvGRU\nfrom torch_geometric_temporal.signal import temporal_signal_split \n\n\nclass RecurrentGCN(torch.nn.Module):\n    def __init__(self, node_features, filters):\n        super(RecurrentGCN, self).__init__()\n        self.recurrent = GConvGRU(node_features, filters, 2)\n        self.linear = torch.nn.Linear(filters, 1)\n\n    def forward(self, x, edge_index, edge_weight):\n        h = self.recurrent(x, edge_index, edge_weight)\n        h = F.relu(h)\n        h = self.linear(h)\n        return h"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-windmill.html#windmilloutputlargedataset-살펴보기",
    "href": "posts/SOLAR/2023-04-06-windmill.html#windmilloutputlargedataset-살펴보기",
    "title": "WindmillOutputLargeDataset 분석 (실패)",
    "section": "WindmillOutputLargeDataset 살펴보기",
    "text": "WindmillOutputLargeDataset 살펴보기\n\nweighted edges\n\nHourly energy output of windmills from a European country for more than 2 years. Vertices represent 319 windmills and weighted edges describe the strength of relationships. The target variable allows for regression tasks.\n\n\\(T = 17472\\)\n$V = $ 풍력발전소\n$N = $ 노드 수\n\\(E = 101761 = N^2\\) 에지 수\n\n\\({\\bf f}=\\begin{bmatrix} {\\bf f}_1\\\\ {\\bf f}_2\\\\ \\dots \\\\ {\\bf f}_{17472} \\end{bmatrix}=\\begin{bmatrix} f(t=1,v=\\tt{V1}) & \\dots & f(t=1,v=\\tt{V319}) \\\\ f(t=2,v=\\tt{V1}) & \\dots & f(t=2,v=\\tt{V319}) \\\\ \\dots & \\dots & \\dots \\\\ f(t=17472,v=\\tt{V1}) & \\dots & f(t=17472,v=\\tt{V319}) \\end{bmatrix}\\)\n\nurl = \"https://graphmining.ai/temporal_datasets/windmill_output.json\"\ndata_dict = json.loads(urllib.request.urlopen(url).read())\ndata_dict.keys()\n\ndict_keys(['block', 'time_periods', 'weights', 'edges'])\n\n\n\n365*2*24 # 1년 365일 기준 하루 24시간 --> 17520시간.\n\n17520\n\n\n\ndata_dict['time_periods']\n\n17472\n\n\n\nnp.array(data_dict['block']).shape # fx\n\n(17472, 319)\n\n\n\nlen(data_dict['weights'])\n\n101761\n\n\n\nnp.array(data_dict['edges']).shape\n\n(101761, 2)\n\n\n\n319 ** 2\n\n101761\n\n\n\nnp.array(data_dict['weights']).shape\n\n(101761,)\n\n\n\nnp.array(data_dict['weights']).reshape(319, 319)\n\narray([[1.        , 0.83313653, 0.76403123, ..., 0.03572003, 0.02756888,\n        0.01799128],\n       [0.83313653, 1.        , 0.91705372, ..., 0.03025762, 0.0241852 ,\n        0.01583424],\n       [0.76403123, 0.91705372, 1.        , ..., 0.02794797, 0.02269021,\n        0.01487937],\n       ...,\n       [0.03572003, 0.03025762, 0.02794797, ..., 1.        , 0.29412671,\n        0.21992883],\n       [0.02756888, 0.0241852 , 0.02269021, ..., 0.29412671, 1.        ,\n        0.64651593],\n       [0.01799128, 0.01583424, 0.01487937, ..., 0.21992883, 0.64651593,\n        1.        ]])\n\n\n\nnode_ids = {}\nfor i in range(319):\n    node_ids['node' + str(i+1)] = i\n\n\nedges = np.array(data_dict['edges']).T\nedge_weight = np.array(data_dict['weights'])"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-windmill.html#section",
    "href": "posts/SOLAR/2023-04-06-windmill.html#section",
    "title": "WindmillOutputLargeDataset 분석 (실패)",
    "section": "–",
    "text": "–"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-windmill.html#windmilloutputlargedatasetloader",
    "href": "posts/SOLAR/2023-04-06-windmill.html#windmilloutputlargedatasetloader",
    "title": "WindmillOutputLargeDataset 분석 (실패)",
    "section": "WindmillOutputLargeDatasetLoader",
    "text": "WindmillOutputLargeDatasetLoader\nref: https://github.com/benedekrozemberczki/pytorch_geometric_temporal/blob/master/docs/source/notes/introduction.rst\n\ntorch_geometric_temporal.signal.StaticGraphTemporalSignal \n\ntorch_geometric_temporal.signal.static_graph_temporal_signal.StaticGraphTemporalSignal\n\n\n\nloader = torch_geometric_temporal.dataset.WindmillOutputLargeDatasetLoader()\ndataset = loader.get_dataset(lags=4)\ntrain_dataset, test_dataset = temporal_signal_split(dataset, train_ratio=0.8)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-windmill.html#learn",
    "href": "posts/SOLAR/2023-04-06-windmill.html#learn",
    "title": "WindmillOutputLargeDataset 분석 (실패)",
    "section": "Learn",
    "text": "Learn\n\nmodel = RecurrentGCN(node_features=4, filters=32)\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\nmodel.train()\n\nfor epoch in tqdm(range(50)):\n    for t, snapshot in enumerate(train_dataset):\n        yt_hat = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n        cost = torch.mean((yt_hat-snapshot.y)**2)\n        cost.backward()\n        optimizer.step()\n        optimizer.zero_grad()\n\n  0%|                                                                                                              | 0/50 [00:26<?, ?it/s]\n\n\nKeyboardInterrupt: \n\n\n\n학습이 매우 느림.. (8시50분시작 ..새벽 1시 20분에 끝남..4시간넘게 걸린다.)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-windmill.html#visualization",
    "href": "posts/SOLAR/2023-04-06-windmill.html#visualization",
    "title": "WindmillOutputLargeDataset 분석 (실패)",
    "section": "Visualization",
    "text": "Visualization\n\nmodel.eval()\ncost = 0\nfor time, snapshot in enumerate(test_dataset):\n    y_hat = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n    cost = cost + torch.mean((y_hat-snapshot.y)**2)\ncost = cost / (time+1)\ncost = cost.item()\nprint(\"MSE: {:.4f}\".format(cost))\n\nMSE: 1.0237\n\n\n\n# yhat_train = torch.stack([model(snapshot.x,snapshot.edge_index, snapshot.edge_attr) for snapshot in train_dataset]).detach().numpy()\n# yhat_test = torch.stack([model(snapshot.x,snapshot.edge_index, snapshot.edge_attr) for snapshot in test_dataset]).detach().numpy()\n\n\n커널 죽음ㅠㅠㅠ (사이즈를 줄여서 해야할 듯.)\n\n\n# V = list(node_ids)\n\n\nfig,ax = plt.subplots(319,1,figsize=(10,50))\nfor k in range(319):\n    ax[k].plot(f[:,k],'--',alpha=0.5,label='observed')\n    ax[k].set_title('node: {}'.format(V[k]))\n    ax[k].plot(yhat_train[:,k],label='predicted (tr)')\n    ax[k].plot(range(yhat_train.shape[0],yhat_train.shape[0]+yhat_test.shape[0]),yhat_test[:,k],label='predicted (test)')\n    ax[k].legend()\n# fig.tight_layout()\n\nNameError: name 'f' is not defined"
  },
  {
    "objectID": "posts/SOLAR/2023-03-29-data0.html",
    "href": "posts/SOLAR/2023-03-29-data0.html",
    "title": "Data preprocessing",
    "section": "",
    "text": "raw data\nprep_data\nDownload Link (homepage)\n\n\n\n\n\n\n\n\n\nfile name\ndescription\nnote\n\n\n\n\nOBS_ASOS_TIM_data0.csv\n2021-01-01 ~ 2021-12-31\n21년 데이터셋 (1년씩 다운 가능)\n\n\nOBS_ASOS_TIM_data1.csv\n2022-01-01 ~ 2022-12-31\n22년 데이터셋 (1년씩 다운 가능)\n\n\nraw.csv\n2021-01-01 ~ 2022-12-31\n21~22년 데이터셋 (위의 두개 데이터 합친 것)\n\n\nprep_data.csv\nraw.csv 전처리한 데이터셋\n\n\n\ntest_raw.csv\n2023-01-01 ~ 2023-01-15\n2주간의 데이터셋 for test (확정x)\n\n\nprep_test.csv\ntest_raw.csv 전처리한 데이터셋\nprep_data와 전처리과정 동일\n\n\nrestructuring_prep_data.csv\nprep_data.csv 재구조화, 결측치처리X\ncolumn:지점명, row:일시, value=일사량 으로 재구조화한 데이터셋 (observation number = \\(8030 \\times 45\\) )\n\n\nrestructuring_raw.csv\nraw.csv 재구조화, 결측치처리X\ncolumn:지점명, row:일시, value=일사량 으로 재구조화한 데이터셋 (observation number = \\(10379\\times50\\) )\n\n\n\n\n2021-01-01부터 2022-12-31 약 2년간의 데이터셋\n00시부터 23시까지 1시간 간격으로 측정한 데이터셋 (08시부터 18시까지 관측된 데이터가 대다수)\n총 49개의 지점\n\n\nimport pandas as pd\nimport numpy as np\nimport gc\n\n\ndf0 = pd.read_csv('./data/OBS_ASOS_TIM_data0.csv', encoding='cp949') # 2021-01-01 ~ 2021-12-31\ndf1 = pd.read_csv('./data/OBS_ASOS_TIM_data1.csv') # 2022-01-01 ~ 2023-12-31\ndf2 = pd.read_csv('./data/test_raw.csv', encoding='cp949') # 2023-01-01 ~ 2023-01-15\n\n\n# # dtype 변환 및 hour변수 생성.\n# df1['일시'] = pd.to_datetime(df1['일시'])\n# df1['Datetime'] = df1['일시'].dt.date\n# df1['hour'] = df1['일시'].dt.hour\n# df1.head()\n\n\n# import datetime\n# df1 = df1[df1['Datetime'] != datetime.date(2023, 1, 1)]\n# df1 = df1.drop(['Datetime', 'hour'], axis=1)\n# df1.to_csv('./data/OBS_ASOS_TIM_data1.csv', index=False)\n\n\ndf_raw = pd.concat([df0, df1])\ndf_raw.head()\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2021-01-01 08:00\n      0.00\n    \n    \n      1\n      93\n      북춘천\n      2021-01-01 09:00\n      0.37\n    \n    \n      2\n      93\n      북춘천\n      2021-01-01 10:00\n      0.96\n    \n    \n      3\n      93\n      북춘천\n      2021-01-01 11:00\n      1.40\n    \n    \n      4\n      93\n      북춘천\n      2021-01-01 12:00\n      1.72\n    \n  \n\n\n\n\n\ndf_raw.shape\n\n(444720, 4)\n\n\n\n# 2021-01-01 ~ 2023-01-01 dataset (2 years)\n# df_raw.to_csv('./data/raw.csv', index=False)"
  },
  {
    "objectID": "posts/SOLAR/2023-03-29-data0.html#데이터-탐색-for-preprocessing",
    "href": "posts/SOLAR/2023-03-29-data0.html#데이터-탐색-for-preprocessing",
    "title": "Data preprocessing",
    "section": "데이터 탐색 (for preprocessing)",
    "text": "데이터 탐색 (for preprocessing)\n\ngc.collect()\n\n38\n\n\n\n관측지점 수\n\n# 관측지점 수\nlen(df0['지점'].unique()), len(df1['지점'].unique())\n\n(48, 49)\n\n\n22년도에 관측지점이 하나 더 추가된 듯하다..\n\nset(df1['지점명'].unique()) - (set(df0['지점명'].unique()) & set(df1['지점명'].unique()))\n\n{'제천'}\n\n\n\ndf1[df1['지점명']=='제천']  # 관측기록이 1회밖에 없다.\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n    \n  \n  \n    \n      167426\n      221\n      제천\n      2022-10-27 07:00:00\n      0.0\n    \n  \n\n\n\n\n제천에서 관측된 값이 하나밖에 없으므로 제거해주는 것이 좋을 듯 하다.\n\ndf0['지점명'].unique(),  df1['지점명'].unique()\n\n(array(['북춘천', '철원', '동두천', '파주', '대관령', '춘천', '백령도', '북강릉', '강릉', '서울',\n        '인천', '원주', '울릉도', '수원', '충주', '서산', '청주', '대전', '추풍령', '안동', '상주',\n        '포항', '대구', '전주', '창원', '광주', '부산', '목포', '여수', '흑산도', '고창', '홍성',\n        '제주', '고산', '진주', '고창군', '영광군', '김해시', '순창군', '북창원', '양산시', '보성군',\n        '강진군', '의령군', '함양군', '광양시', '청송군', '경주시'], dtype=object),\n array(['북춘천', '철원', '동두천', '파주', '대관령', '춘천', '백령도', '북강릉', '강릉', '서울',\n        '인천', '원주', '울릉도', '수원', '충주', '서산', '청주', '대전', '추풍령', '안동', '상주',\n        '포항', '대구', '전주', '창원', '광주', '부산', '목포', '여수', '흑산도', '고창', '홍성',\n        '제주', '고산', '진주', '제천', '고창군', '영광군', '김해시', '순창군', '북창원', '양산시',\n        '보성군', '강진군', '의령군', '함양군', '광양시', '청송군', '경주시'], dtype=object))\n\n\n\n\n날짜형 변환 및 Datetime, hour 변수 생성\n\n# dtype 변환 및 hour변수 생성.\ndf_raw['일시'] = pd.to_datetime(df_raw['일시'])\ndf_raw['Datetime'] = df_raw['일시'].dt.date\ndf_raw['hour'] = df_raw['일시'].dt.hour\ndf_raw.head()\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2021-01-01 08:00:00\n      0.00\n      2021-01-01\n      8\n    \n    \n      1\n      93\n      북춘천\n      2021-01-01 09:00:00\n      0.37\n      2021-01-01\n      9\n    \n    \n      2\n      93\n      북춘천\n      2021-01-01 10:00:00\n      0.96\n      2021-01-01\n      10\n    \n    \n      3\n      93\n      북춘천\n      2021-01-01 11:00:00\n      1.40\n      2021-01-01\n      11\n    \n    \n      4\n      93\n      북춘천\n      2021-01-01 12:00:00\n      1.72\n      2021-01-01\n      12\n    \n  \n\n\n\n\n\ndf_raw.info()\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 444720 entries, 0 to 229676\nData columns (total 6 columns):\n #   Column     Non-Null Count   Dtype         \n---  ------     --------------   -----         \n 0   지점         444720 non-null  int64         \n 1   지점명        444720 non-null  object        \n 2   일시         444720 non-null  datetime64[ns]\n 3   일사(MJ/m2)  444720 non-null  float64       \n 4   Datetime   444720 non-null  object        \n 5   hour       444720 non-null  int64         \ndtypes: datetime64[ns](1), float64(1), int64(2), object(2)\nmemory usage: 23.8+ MB\n\n\n\ndf_raw.shape[0]/df_raw['지점명'].nunique() # 지점하나당 9000개 정도의 관측치가 있음.\n\n9075.918367346938\n\n\n\n\n시간대별 관측치 수\n\ndf_raw['hour'].value_counts().sort_index()\n\n0       114\n1       114\n2       114\n3       114\n4       114\n5       186\n6     12896\n7     23300\n8     33764\n9     33779\n10    33780\n11    33763\n12    33768\n13    33773\n14    33773\n15    33772\n16    33783\n17    33759\n18    33737\n19    22851\n20    13032\n21      206\n22      114\n23      114\nName: hour, dtype: int64\n\n\n00시부터 23시까지 필터링해서 홈페이지에서 다운받아왔지만 대다수 데이터가 08시~18시까지 관측되어있음.\n\n\n지점별 관측치 수 (2021-01-01 ~ 2023-01-01)\n\npd.DataFrame(df_raw['지점명'].value_counts())\n\n\n\n\n\n  \n    \n      \n      지점명\n    \n  \n  \n    \n      백령도\n      9673\n    \n    \n      울릉도\n      9608\n    \n    \n      창원\n      9595\n    \n    \n      의령군\n      9594\n    \n    \n      북강릉\n      9592\n    \n    \n      강진군\n      9591\n    \n    \n      제주\n      9591\n    \n    \n      대구\n      9591\n    \n    \n      목포\n      9587\n    \n    \n      북창원\n      9586\n    \n    \n      포항\n      9585\n    \n    \n      홍성\n      9585\n    \n    \n      여수\n      9585\n    \n    \n      철원\n      9584\n    \n    \n      북춘천\n      9584\n    \n    \n      함양군\n      9583\n    \n    \n      서울\n      9582\n    \n    \n      춘천\n      9581\n    \n    \n      청송군\n      9581\n    \n    \n      고산\n      9581\n    \n    \n      보성군\n      9580\n    \n    \n      경주시\n      9579\n    \n    \n      원주\n      9579\n    \n    \n      대관령\n      9578\n    \n    \n      광양시\n      9576\n    \n    \n      안동\n      9574\n    \n    \n      김해시\n      9574\n    \n    \n      인천\n      9573\n    \n    \n      서산\n      9572\n    \n    \n      고창군\n      9571\n    \n    \n      수원\n      9570\n    \n    \n      전주\n      9566\n    \n    \n      순창군\n      9566\n    \n    \n      청주\n      9565\n    \n    \n      진주\n      9563\n    \n    \n      추풍령\n      9557\n    \n    \n      영광군\n      9554\n    \n    \n      부산\n      9553\n    \n    \n      양산시\n      9547\n    \n    \n      고창\n      9531\n    \n    \n      강릉\n      9478\n    \n    \n      광주\n      9469\n    \n    \n      흑산도\n      9428\n    \n    \n      대전\n      9418\n    \n    \n      파주\n      6172\n    \n    \n      상주\n      6169\n    \n    \n      동두천\n      6164\n    \n    \n      충주\n      5254\n    \n    \n      제천\n      1\n    \n  \n\n\n\n\n\n365*2*11 # 11시간관측을 기준으로 했을 때 지점당 관측치 개수..\n\n8030\n\n\n대다수 지점에서 2년간 약 9500건 관측되었지만, 파주, 상주, 동두천, 충주, 제천(1)은 다른지점에 비해 관측치가 적음.\n\n\n파주, 상주, 동두천\n\ndf_raw.head() ## 북춘천\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2021-01-01 08:00:00\n      0.00\n      2021-01-01\n      8\n    \n    \n      1\n      93\n      북춘천\n      2021-01-01 09:00:00\n      0.37\n      2021-01-01\n      9\n    \n    \n      2\n      93\n      북춘천\n      2021-01-01 10:00:00\n      0.96\n      2021-01-01\n      10\n    \n    \n      3\n      93\n      북춘천\n      2021-01-01 11:00:00\n      1.40\n      2021-01-01\n      11\n    \n    \n      4\n      93\n      북춘천\n      2021-01-01 12:00:00\n      1.72\n      2021-01-01\n      12\n    \n  \n\n\n\n\n\ndf_raw[df_raw['지점명']=='파주'].iloc[[0]] \n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      10961\n      99\n      파주\n      2021-10-12\n      0.0\n      2021-10-12\n      0\n    \n  \n\n\n\n\n\ndf_raw[df_raw['지점명']=='상주'].iloc[[0]]\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      84525\n      137\n      상주\n      2021-10-12\n      0.0\n      2021-10-12\n      0\n    \n  \n\n\n\n\n\ndf_raw[df_raw['지점명']=='동두천'].iloc[[0]]\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      9583\n      98\n      동두천\n      2021-10-12\n      0.0\n      2021-10-12\n      0\n    \n  \n\n\n\n\n\n\n충주\n\ndf_raw[df_raw['지점명']=='충주'].iloc[[0]]\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      60308\n      127\n      충주\n      2021-11-18 18:00:00\n      0.0\n      2021-11-18\n      18\n    \n  \n\n\n\n\n\n\n제천\n\ndf_raw[df_raw['지점명']=='제천']\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      167426\n      221\n      제천\n      2022-10-27 07:00:00\n      0.0\n      2022-10-27\n      7\n    \n  \n\n\n\n\n\n보유기간 1904년 4월 ~ 현재 (지점별 상이함)\n\n\n파주, 상주, 동두천 지점은 2021-10-12일 이전의 기록은 보유하고 있지 않음.\n충주는 2021-11-18일 이전의 기록은 보유하고 있지 않음.\n제천은 2022-10-27일 단 하루만의 기록만 있음.\nref: https://minwon.kma.go.kr/main/obvStn.do\nref: https://data.kma.go.kr/data/grnd/selectAsosRltmList.do?pgmNo=36"
  },
  {
    "objectID": "posts/SOLAR/2023-03-29-data0.html#데이터-처리-및-csv파일로-내보내기",
    "href": "posts/SOLAR/2023-03-29-data0.html#데이터-처리-및-csv파일로-내보내기",
    "title": "Data preprocessing",
    "section": "데이터 처리 및 csv파일로 내보내기",
    "text": "데이터 처리 및 csv파일로 내보내기\n\n제천, 파주, 상주, 동두천 제거\n\ndf_prep1 = df_raw[~df_raw['지점명'].str.contains('제천|파주|상주|동두천|충주')]\n\n\n\n관측시간 08시 ~ 18시\n\ndf_prep1[(df_prep1['hour']>=8) & (df_prep1['hour'] <= 18)]\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2021-01-01 08:00:00\n      0.00\n      2021-01-01\n      8\n    \n    \n      1\n      93\n      북춘천\n      2021-01-01 09:00:00\n      0.37\n      2021-01-01\n      9\n    \n    \n      2\n      93\n      북춘천\n      2021-01-01 10:00:00\n      0.96\n      2021-01-01\n      10\n    \n    \n      3\n      93\n      북춘천\n      2021-01-01 11:00:00\n      1.40\n      2021-01-01\n      11\n    \n    \n      4\n      93\n      북춘천\n      2021-01-01 12:00:00\n      1.72\n      2021-01-01\n      12\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      229672\n      283\n      경주시\n      2022-12-31 14:00:00\n      1.82\n      2022-12-31\n      14\n    \n    \n      229673\n      283\n      경주시\n      2022-12-31 15:00:00\n      1.52\n      2022-12-31\n      15\n    \n    \n      229674\n      283\n      경주시\n      2022-12-31 16:00:00\n      0.96\n      2022-12-31\n      16\n    \n    \n      229675\n      283\n      경주시\n      2022-12-31 17:00:00\n      0.35\n      2022-12-31\n      17\n    \n    \n      229676\n      283\n      경주시\n      2022-12-31 18:00:00\n      0.01\n      2022-12-31\n      18\n    \n  \n\n352279 rows × 6 columns\n\n\n\n\ndf_prep1[(df_prep1['hour']>=8) & (df_prep1['hour'] <= 18)]['hour'].value_counts().sort_index()\n\n8     32025\n9     32038\n10    32036\n11    32020\n12    32025\n13    32028\n14    32029\n15    32028\n16    32039\n17    32017\n18    31994\nName: hour, dtype: int64\n\n\n\ndf_prep2 = df_prep1[(df_prep1['hour']>=8) & (df_prep1['hour'] <= 18)]\ndf_prep2.head()\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2021-01-01 08:00:00\n      0.00\n      2021-01-01\n      8\n    \n    \n      1\n      93\n      북춘천\n      2021-01-01 09:00:00\n      0.37\n      2021-01-01\n      9\n    \n    \n      2\n      93\n      북춘천\n      2021-01-01 10:00:00\n      0.96\n      2021-01-01\n      10\n    \n    \n      3\n      93\n      북춘천\n      2021-01-01 11:00:00\n      1.40\n      2021-01-01\n      11\n    \n    \n      4\n      93\n      북춘천\n      2021-01-01 12:00:00\n      1.72\n      2021-01-01\n      12\n    \n  \n\n\n\n\n\ndf_prep2['지점명'].nunique()\n\n44\n\n\n\ndf_prep2['지점명'].value_counts()\n\n북춘천    8030\n북강릉    8030\n철원     8030\n강진군    8030\n백령도    8029\n의령군    8029\n홍성     8029\n목포     8028\n창원     8028\n춘천     8027\n제주     8026\n원주     8026\n대구     8026\n서울     8025\n북창원    8023\n여수     8023\n함양군    8023\n대관령    8022\n포항     8021\n보성군    8021\n인천     8019\n청송군    8019\n서산     8019\n김해시    8018\n고산     8018\n경주시    8018\n수원     8014\n광양시    8012\n안동     8012\n순창군    8012\n고창군    8011\n청주     8009\n추풍령    8007\n전주     8006\n영광군    8001\n진주     7999\n부산     7989\n양산시    7987\n고창     7981\n울릉도    7974\n광주     7925\n강릉     7920\n흑산도    7896\n대전     7887\nName: 지점명, dtype: int64\n\n\n\ndf_prep2.to_csv('./data/prep_data.csv', index=False)"
  },
  {
    "objectID": "posts/SOLAR/2023-03-29-data0.html#테스트용-데이터-전처리",
    "href": "posts/SOLAR/2023-03-29-data0.html#테스트용-데이터-전처리",
    "title": "Data preprocessing",
    "section": "테스트용 데이터 전처리",
    "text": "테스트용 데이터 전처리\n\n# df2 = pd.read_csv('./data/test_raw.csv', encoding='cp949')\ngc.collect()\n\n1258\n\n\n\n# dtype 변환 및 hour변수 생성.\ndf2['일시'] = pd.to_datetime(df2['일시'])\ndf2['Datetime'] = df2['일시'].dt.date\ndf2['hour'] = df2['일시'].dt.hour\ndf2.head()\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2023-01-01 08:00:00\n      0.00\n      2023-01-01\n      8\n    \n    \n      1\n      93\n      북춘천\n      2023-01-01 09:00:00\n      0.32\n      2023-01-01\n      9\n    \n    \n      2\n      93\n      북춘천\n      2023-01-01 10:00:00\n      0.90\n      2023-01-01\n      10\n    \n    \n      3\n      93\n      북춘천\n      2023-01-01 11:00:00\n      1.73\n      2023-01-01\n      11\n    \n    \n      4\n      93\n      북춘천\n      2023-01-01 12:00:00\n      1.86\n      2023-01-01\n      12\n    \n  \n\n\n\n\n\ndf2 = df2[~df2['지점명'].str.contains('제천|파주|상주|동두천|충주')]\n\n\ndf2 = df2[(df2['hour']>=8) & (df2['hour'] <= 18)]\ndf2.head()\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2023-01-01 08:00:00\n      0.00\n      2023-01-01\n      8\n    \n    \n      1\n      93\n      북춘천\n      2023-01-01 09:00:00\n      0.32\n      2023-01-01\n      9\n    \n    \n      2\n      93\n      북춘천\n      2023-01-01 10:00:00\n      0.90\n      2023-01-01\n      10\n    \n    \n      3\n      93\n      북춘천\n      2023-01-01 11:00:00\n      1.73\n      2023-01-01\n      11\n    \n    \n      4\n      93\n      북춘천\n      2023-01-01 12:00:00\n      1.86\n      2023-01-01\n      12\n    \n  \n\n\n\n\n\ndf2['hour'].value_counts()\n\n9     660\n10    660\n11    660\n13    660\n14    660\n15    660\n12    659\n16    659\n17    659\n18    659\n8     653\nName: hour, dtype: int64\n\n\n\n# df2.to_csv('./data/prep_test.csv',index=False)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-07-soloar-stgcn-ver1-lag4.html",
    "href": "posts/SOLAR/2023-04-07-soloar-stgcn-ver1-lag4.html",
    "title": "[SOLAR] STGCN Ver1 lag4",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport json\nimport urllib\n\n\n# 일반적인 모듈 \nimport numpy as np\nimport matplotlib.pyplot as plt \nimport networkx as nx \nfrom tqdm import tqdm \n\n# 파이토치 관련 \nimport torch\nimport torch.nn.functional as F\n\n# PyG 관련 \nfrom torch_geometric.data import Data ## Data: 그래프자료형을 만드는 클래스\n\n# STGCN 관련 \nimport torch_geometric_temporal\nfrom torch_geometric_temporal.nn.recurrent import GConvGRU\nfrom torch_geometric_temporal.signal import temporal_signal_split \n\n\nclass RecurrentGCN(torch.nn.Module):\n    def __init__(self, node_features, filters):\n        super(RecurrentGCN, self).__init__()\n        self.recurrent = GConvGRU(node_features, filters, 2)\n        self.linear = torch.nn.Linear(filters, 1)\n\n    def forward(self, x, edge_index, edge_weight):\n        h = self.recurrent(x, edge_index, edge_weight)\n        h = F.relu(h)\n        h = self.linear(h)\n        return h\n\n\nimport pickle \nwith open('stgcn.pickle', 'rb') as f: \n    model = pickle.load(f)\n\n\nmodel\n\nRecurrentGCN(\n  (recurrent): GConvGRU(\n    (conv_x_z): ChebConv(4, 32, K=2, normalization=sym)\n    (conv_h_z): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_r): ChebConv(4, 32, K=2, normalization=sym)\n    (conv_h_r): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_h): ChebConv(4, 32, K=2, normalization=sym)\n    (conv_h_h): ChebConv(32, 32, K=2, normalization=sym)\n  )\n  (linear): Linear(in_features=32, out_features=1, bias=True)\n)\n\n\n\nfrom mysolar import SolarDatasetLoader\n\n\nloader = SolarDatasetLoader()\ndataset = loader.get_dataset(lags=4)\ntrain_dataset, test_dataset = temporal_signal_split(dataset, train_ratio=0.8)\n\n\nnp.array(dataset.features).shape\n\n(18246, 44, 4)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-07-soloar-stgcn-ver1-lag4.html#모델평가",
    "href": "posts/SOLAR/2023-04-07-soloar-stgcn-ver1-lag4.html#모델평가",
    "title": "[SOLAR] STGCN Ver1 lag4",
    "section": "모델평가",
    "text": "모델평가\n\nmodel.eval()\ncost = 0\nfor time, snapshot in enumerate(train_dataset):\n    y_hat = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n    cost = cost + torch.mean((y_hat-snapshot.y)**2)\ncost = cost / (time+1)\ncost = cost.item()\nprint(\"MSE: {:.4f}\".format(cost))\n\nMSE: 0.1041\n\n\n\nmodel.eval()\ncost = 0\nfor time, snapshot in enumerate(test_dataset):\n    y_hat = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n    cost = cost + torch.mean((y_hat-snapshot.y)**2)\ncost = cost / (time+1)\ncost = cost.item()\nprint(\"MSE: {:.4f}\".format(cost))\n\nMSE: 0.0934\n\n\n\nyhat_train = torch.stack([model(snapshot.x,snapshot.edge_index, snapshot.edge_attr) for snapshot in train_dataset]).detach().numpy()\nyhat_test = torch.stack([model(snapshot.x,snapshot.edge_index, snapshot.edge_attr) for snapshot in test_dataset]).detach().numpy()\n\n\nurl = 'https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/solar.json'\ndata_dict = json.loads(urllib.request.urlopen(url).read())\nV = list(data_dict['node_ids'].keys())\nf = np.array(data_dict[\"FX\"])"
  },
  {
    "objectID": "posts/SOLAR/2023-04-07-soloar-stgcn-ver1-lag4.html#visualization",
    "href": "posts/SOLAR/2023-04-07-soloar-stgcn-ver1-lag4.html#visualization",
    "title": "[SOLAR] STGCN Ver1 lag4",
    "section": "Visualization",
    "text": "Visualization\n\nimport matplotlib.pyplot as plt\nplt.rcParams['font.family'] = 'NanumGothic'\n\n\nfig,ax = plt.subplots(44,1,figsize=(10,50))\nfor k in range(44):\n    ax[k].plot(f[4:104,k],'--',alpha=0.5,label='observed')\n    # ax[k].set_title('node: {}'.format(V[k]))\n    ax[k].plot(yhat_train[:100,k],label='predicted (tr)')\n    # ax[k].plot(range(yhat_train.shape[0],yhat_train.shape[0]+yhat_test.shape[0]),yhat_test[:,k],label='predicted (test)')\n    ax[k].legend()\nfig.tight_layout()"
  },
  {
    "objectID": "posts/SOLAR/2023-04-07-yu.html",
    "href": "posts/SOLAR/2023-04-07-yu.html",
    "title": "[SOLAR] yU",
    "section": "",
    "text": "ref: https://www.sciencedirect.com/science/article/pii/S2352711021000492"
  },
  {
    "objectID": "posts/SOLAR/2023-04-07-yu.html#데이터-처리",
    "href": "posts/SOLAR/2023-04-07-yu.html#데이터-처리",
    "title": "[SOLAR] yU",
    "section": "데이터 처리",
    "text": "데이터 처리\n\ndf = df |> mutate(date=ymd_hm(date))\ndf %>% head()\n\n\n\nA tibble: 6 × 3\n\n    regionsolar_radiationdate\n    <chr><dbl><dttm>\n\n\n    북춘천02021-01-01 00:00:00\n    북춘천02021-01-01 01:00:00\n    북춘천02021-01-01 02:00:00\n    북춘천02021-01-01 03:00:00\n    북춘천02021-01-01 04:00:00\n    북춘천02021-01-01 05:00:00\n\n\n\n\n\ndim(df)\n\n\n8030003\n\n\n\nunique(df$region) %>% length()\n\n44"
  },
  {
    "objectID": "posts/SOLAR/2023-04-07-yu.html#plot",
    "href": "posts/SOLAR/2023-04-07-yu.html#plot",
    "title": "[SOLAR] yU",
    "section": "Plot",
    "text": "Plot\n\nfor (i in 1:44){\n     assign(paste0('data',1:44)[i],df |> filter(region == unique(df$region)[i]))\n     assign(paste0('data',1:44)[i],eval(parse(text=paste0('data',i)))[order(eval(parse(text=paste0('data',i)))$date),])\n     assign(paste0('y',1:44)[i], eval(parse(text=paste0('data',i)))$solar_radiation)\n}\n\n\nfor (i in 1:44){\n    plot(eval(parse(text=paste0('y',i)))[1:500], ann=FALSE)\n    lines(eval(parse(text=paste0('y',i))),lty=2)\n    title(main = as.character(unique(df$region)[i]), xlab='time', ylab='solar radiation')\n    }"
  },
  {
    "objectID": "posts/SOLAR/2023-04-07-yu.html#etp-수행",
    "href": "posts/SOLAR/2023-04-07-yu.html#etp-수행",
    "title": "[SOLAR] yU",
    "section": "ETP 수행",
    "text": "ETP 수행\n\nept = function(y){\n    EpM = eptransf(signal=y,tau=24,process=c(\"envelope\",\"average\"))$EpM\n    EpM*2\n}\n\n\n아래 코드 오래걸림 주의\n\n\nlibrary(tictoc)\n\n\ntic('지역별 yU계산')\nfor (i in 1:44){\n    assign(paste0('yU',1:44)[i], ept(eval(parse(text=paste0('y',i)))))\n}\ntoc()\n\n지역별 yU계산: 353.519 sec elapsed\n\n\n\nlength(yU1)\n\n18250\n\n\n\nyU1\n\n\n1.6661.6661.6661.6661.6661.6661.6661.6661.6661.6661.67081.68841.72361.78241.81761.83521.841.84281.84561.84841.85121.8541.85681.85961.86241.86521.8681.87081.87361.87641.87921.8821.88481.88761.89041.89321.8961.89881.90161.90441.90721.911.90641.90041.89441.88841.88241.87641.87041.86441.85841.85241.84641.84041.83441.82841.82241.81641.81041.80441.79841.79241.78641.78041.77441.76841.76241.75641.75281.74921.74561.7421.73841.73481.73121.72761.7241.72041.71681.71321.70961.7061.70241.69881.69521.69161.6881.68441.68081.67721.67361.67361.6841.69441.70481.71521.72561.7361.74641.75681.76721.77761.7881.79841.80881.81921.82961.841.85041.86081.87121.88161.8921.90241.91281.92321.931.931.931.931.931.931.931.931.931.931.931.931.931.931.931.931.931.931.931.931.931.931.931.931.931.931.9321.9341.9361.9381.941.9421.9441.9461.9481.951.9521.9541.9561.9581.961.9621.9641.9661.9681.971.9721.9741.9761.9781.981.98081.98161.98241.98321.9841.98481.98561.98641.98721.9881.98881.98961.99041.99121.9921.99281.99361.99441.99521.9961.99681.99761.99841.999221.9981.9961.9941.9921.991.9881.9861.984⋯1.85561.85721.85881.86041.8621.86361.86521.86681.86841.871.87161.87321.87481.87641.8781.87961.881.89241.90481.91721.92961.9421.95441.96681.97921.99162.0042.01642.02882.04122.05362.0662.07842.09082.10322.11562.1282.14042.15282.16522.17762.192.1782.14562.10522.06482.02441.9841.94361.90321.86281.82241.7821.74161.70121.66081.62041.581.53961.49921.45881.41841.3781.33761.29721.25681.21641.19681.21521.24161.2681.29441.32081.34721.37361.41.42641.45281.47921.50561.5321.55841.58481.61121.63761.6641.69041.71681.74321.76961.7961.82561.84641.84961.85281.8561.85921.86241.86561.86881.8721.87521.87841.88161.88481.8881.89121.89441.89761.90081.9041.90721.91041.91361.91681.921.91721.91441.91161.90881.9061.90321.90041.89761.89481.8921.88921.88641.88361.88081.8781.87521.87241.86961.86681.8641.86121.85841.85561.85281.851.851.86081.87161.88241.89321.9041.91481.92561.93641.94721.9581.96881.97961.99042.00122.0122.02282.03362.04442.05522.0662.07682.08762.09842.10922.12042.12082.12122.12162.1222.12242.12282.12322.12362.1242.12442.12482.12522.12562.1262.12642.12682.12722.12762.1282.12842.12882.12922.12962.132.132.132.132.132.132.132.132.132.13"
  },
  {
    "objectID": "posts/SOLAR/2023-04-07-yu.html#yu-저장",
    "href": "posts/SOLAR/2023-04-07-yu.html#yu-저장",
    "title": "[SOLAR] yU",
    "section": "yU 저장",
    "text": "yU 저장\n\ndf_yU = do.call(cbind.data.frame, mget(paste0('yU', 1:44)))\n\n\nwrite.csv(df_yU, './df_yU.csv', row.names=FALSE)\n\n\n# for (i in 1:44){\n#     print(length(eval(parse(text=paste0('yU',i)))))}"
  },
  {
    "objectID": "posts/SOLAR/2023-04-07-yu.html#시각화",
    "href": "posts/SOLAR/2023-04-07-yu.html#시각화",
    "title": "[SOLAR] yU",
    "section": "시각화",
    "text": "시각화\n\nfor (i in 1:44){\n    plot(eval(parse(text=paste0('y',i)))[1:500], ann=FALSE)\n    lines(eval(parse(text=paste0('yU',i))),col = 2, lty=2)\n    title(main = as.character(unique(df$region)[i]), xlab='time', ylab='solar radiation')\n    }"
  },
  {
    "objectID": "posts/SOLAR/2023-04-07-yu.html#yu-correlation",
    "href": "posts/SOLAR/2023-04-07-yu.html#yu-correlation",
    "title": "[SOLAR] yU",
    "section": "yU Correlation",
    "text": "yU Correlation\n\ndf_yU = read_csv('./data/df_yU.csv')\n\nRows: 18250 Columns: 44\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (44): yU1, yU2, yU3, yU4, yU5, yU6, yU7, yU8, yU9, yU10, yU11, yU12, yU1...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nyU_cor = cor(df_yU)\n\n\nwrite.csv(yU_cor, './data/yU_weight.csv', row.names=FALSE)\n\n\nref : https://jobmanager1.tistory.com/84\nref : https://rbasall.tistory.com/101"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-corr.html",
    "href": "posts/SOLAR/2023-04-06-corr.html",
    "title": "[SOLAR] Correlation coefficient by region",
    "section": "",
    "text": "library(data.table)\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(recipes)\nlibrary(corrplot)\nlibrary(GGally)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-corr.html#correlation",
    "href": "posts/SOLAR/2023-04-06-corr.html#correlation",
    "title": "[SOLAR] Correlation coefficient by region",
    "section": "Correlation",
    "text": "Correlation\n\nnum_vars <- df %>% select(-date)\nweight <- cor(num_vars)\nweight\n\n\n\nA matrix: 44 × 44 of type dbl\n\n    북춘천철원대관령춘천백령도북강릉강릉서울인천원주⋯순창군북창원양산시보성군강진군의령군함양군광양시청송군경주시\n\n\n    북춘천1.00000000.96236670.90982560.98565660.87168090.90065860.89092680.94308110.93689940.9444727⋯0.87913650.85348270.85816940.86397400.85968520.86678300.87559780.86517210.88310080.8486414\n    철원0.96236671.00000000.89069610.96005730.88626390.88416100.87476390.94552730.94129330.9308258⋯0.86860650.84108620.84603560.85575580.85543860.85131030.86368900.85417160.86679450.8344436\n    대관령0.90982560.89069611.00000000.90551540.81928340.95308830.94734110.88496130.88252510.9211512⋯0.87752430.87260890.87710470.86825570.85759790.87901550.89007090.87039760.91696970.8885608\n    춘천0.98565660.96005730.90551541.00000000.87421090.89863900.88813890.94350840.93843420.9429720⋯0.88093960.85227160.85702130.86463310.86069420.86629430.87510420.86478200.88234000.8463213\n    백령도0.87168090.88626390.81928340.87421091.00000000.82074610.81376870.87548680.89881400.8418373⋯0.83297100.80321980.80368260.82838960.83019960.81600460.82579820.82429720.80596250.7860864\n    북강릉0.90065860.88416100.95308830.89863900.82074611.00000000.97705220.87656040.87876870.9086585⋯0.87454730.87007270.87343620.86707600.85600760.87818790.88095300.86536680.90730610.8865896\n    강릉0.89092680.87476390.94734110.88813890.81376870.97705221.00000000.86762730.86977540.9006898⋯0.86706830.86360820.86544780.86130960.84839180.87122730.87461980.85886820.90092040.8777924\n    서울0.94308110.94552730.88496130.94350840.87548680.87656040.86762731.00000000.95945320.9345457⋯0.87638220.84780500.84722070.85738280.85809660.85502020.86572900.85817450.86778110.8344653\n    인천0.93689940.94129330.88252510.93843420.89881400.87876870.86977540.95945321.00000000.9236006⋯0.88403320.85426900.85546320.87403700.87092110.86725670.87857780.87018520.87075620.8437449\n    원주0.94447270.93082580.92115120.94297200.84183730.90865850.90068980.93454570.92360061.0000000⋯0.89894230.86961050.87262400.87934750.87497280.88166300.89350010.87852450.90533450.8674754\n    울릉도0.84085800.82891050.85855730.83914710.77270460.85816420.84823670.82059290.82701560.8532737⋯0.85595070.86356200.86813290.84728260.84423100.86360510.86316810.85036490.87725990.8705571\n    수원0.94256350.93950890.89943540.94306860.87738880.89261660.88462970.96384220.96141710.9467150⋯0.89727820.86728520.86717250.88162390.88044850.87815030.88969430.88014170.88622850.8577320\n    서산0.92202230.91892300.88810520.92069530.88259030.88269370.87522970.93419210.94723710.9294862⋯0.90437160.86862550.86925630.88834560.88765280.88050100.89487730.88554230.88484430.8578193\n    청주0.91823670.90504900.90343090.91790840.84107890.89687110.88942760.91892550.91547610.9444102⋯0.92492170.88868400.88882410.90121590.89966250.89936120.91548140.90113790.91181540.8833474\n    대전0.89849000.88265250.89105100.89817380.82709280.88541310.87895300.89855360.89851640.9232921⋯0.92871910.89298370.89158130.90660020.90390680.90538850.92289340.90476430.91024320.8837027\n    추풍령0.89006050.87620400.90545220.89027500.82115400.90080260.89422750.88090660.88637170.9150908⋯0.93773670.92328680.92286330.92485190.91704750.93231370.94937880.92447280.94599950.9246200\n    안동0.90359100.88521710.91838630.90375460.82501810.91341890.90654600.88871830.89097730.9272982⋯0.92702150.92246470.92296570.91773800.90762730.92863650.93794690.91916080.96139130.9292945\n    포항0.85466180.83896090.89135600.85482100.79060870.89188400.88385830.84080040.84885050.8729144⋯0.89773430.93255090.93770070.90218680.88758650.93322840.92192480.90866860.94564880.9624291\n    대구0.88049760.86613860.90077360.87874960.82137280.89739960.88881930.86796520.87410670.8979111⋯0.93129020.94769840.94790040.93255740.92068280.95557090.95285090.93592820.95231160.9529934\n    전주0.88831450.87735680.88453240.88720240.82756220.88049190.87303740.88940530.89116110.9166516⋯0.95061010.90956070.90708410.92708070.92764880.91950440.93813760.92221060.91505040.8943981\n    창원0.86079630.84779010.87440680.86016990.80875120.87152050.86383460.84829660.86215790.8745101⋯0.92395270.97690180.96344420.94455470.92847980.96839080.94072460.95240460.92691300.9390504\n    광주0.85942370.85250110.85968650.86033290.81278460.85674520.84878970.86130310.86738400.8810247⋯0.95423770.91104900.90466160.93790630.93973800.91791490.92826810.92591540.90190950.8896842\n    부산0.85447880.84190870.87140320.85362290.80102510.86699390.85802330.84344060.85383820.8675622⋯0.91299840.96006960.96598170.93357000.91884180.95057310.92920540.93965770.92209300.9367743\n    목포0.86633740.86147620.86061270.86735670.83891680.85831300.85206650.86424250.88178560.8803827⋯0.94374800.90968720.90545510.94887360.95764670.92284550.92555600.93279790.89680090.8876638\n    여수0.85700350.84581090.86570560.85672800.81732710.85974890.85464620.84907260.86352030.8689917⋯0.92813560.94420000.93715530.96219770.94303670.95318040.93699560.96585720.90925800.9091946\n    흑산도0.82282580.82214030.80848140.82661570.82540140.81149830.80648380.82171010.84490930.8304114⋯0.88310310.85684140.85740710.89259770.89853220.86903390.87279490.87910700.83957940.8372829\n    고창0.87908340.87102610.86564930.88095600.83527630.86251080.85580080.87833740.88910040.8954195⋯0.95422990.90690180.90482820.93497520.93847400.91780220.92969910.92301780.90471720.8864325\n    홍성0.91704440.90910770.89306150.91830500.86733490.88921860.88224880.92604690.93383050.9297931⋯0.91452880.87906210.88020480.89874840.89786130.89129370.90580570.89412650.89556400.8688941\n    제주0.79767390.79445210.80816520.80047300.78782940.80411950.80035320.78487990.80516480.8102970⋯0.87030270.87024130.86730040.89229960.89521970.87457120.87294140.87859680.84743550.8538871\n    고산0.82326700.82143810.81854910.82609000.81067530.81299230.80859920.81786800.83478470.8321734⋯0.88442410.87592320.87250750.90350960.90758850.88336860.87846910.89477450.85391030.8524065\n    진주0.86052260.84694180.87741080.86009420.81787450.87303670.86673860.85237070.86558940.8758120⋯0.93157060.95900030.94635240.95239080.93495400.97175160.94899010.96103410.92389590.9320667\n    고창군0.87477910.86584960.86902380.87418820.82784790.86461250.85698680.87455600.88142480.8944722⋯0.95634670.90621030.90335760.93232190.93592950.91499480.92925500.92159380.90413300.8867928\n    영광군0.87216160.86535240.86206570.87295770.83683740.86124230.85414870.87267750.88637020.8886936⋯0.94891400.90359000.90162680.93365960.93802830.91534840.92557200.92183030.89834380.8827982\n    김해시0.85344840.84087600.87304980.85168270.80250670.86922090.86129060.84612690.85392520.8688775⋯0.91450680.97368310.97388080.93286690.91722590.95641720.93324380.94100440.92669110.9440780\n    순창군0.87913650.86860650.87752430.88093960.83297100.87454730.86706830.87638220.88403320.8989423⋯1.00000000.91874540.91695800.94576540.94677970.93258530.94948170.93881320.91738570.8984046\n    북창원0.85348270.84108620.87260890.85227160.80321980.87007270.86360820.84780500.85426900.8696105⋯0.91874541.00000000.96530020.93721720.92142390.96252270.93836910.94559180.92750890.9442955\n    양산시0.85816940.84603560.87710470.85702130.80368260.87343620.86544780.84722070.85546320.8726240⋯0.91695800.96530021.00000000.92979220.91516460.95358900.93408790.93731890.92848620.9451212\n    보성군0.86397400.85575580.86825570.86463310.82838960.86707600.86130960.85738280.87403700.8793475⋯0.94576540.93721720.92979221.00000000.96814880.94880620.94426150.96412040.91124690.9081843\n    강진군0.85968520.85543860.85759790.86069420.83019960.85600760.84839180.85809660.87092110.8749728⋯0.94677970.92142390.91516460.96814881.00000000.93153300.93262120.94796680.90211470.8929973\n    의령군0.86678300.85131030.87901550.86629430.81600460.87818790.87122730.85502020.86725670.8816630⋯0.93258530.96252270.95358900.94880620.93153301.00000000.95239100.95593960.93041170.9402360\n    함양군0.87559780.86368900.89007090.87510420.82579820.88095300.87461980.86572900.87857780.8935001⋯0.94948170.93836910.93408790.94426150.93262120.95239101.00000000.94214040.93475910.9279347\n    광양시0.86517210.85417160.87039760.86478200.82429720.86536680.85886820.85817450.87018520.8785245⋯0.93881320.94559180.93731890.96412040.94796680.95593960.94214041.00000000.91540760.9141593\n    청송군0.88310080.86679450.91696970.88234000.80596250.90730610.90092040.86778110.87075620.9053345⋯0.91738570.92750890.92848620.91124690.90211470.93041170.93475910.91540761.00000000.9439168\n    경주시0.84864140.83444360.88856080.84632130.78608640.88658960.87779240.83446530.84374490.8674754⋯0.89840460.94429550.94512120.90818430.89299730.94023600.92793470.91415930.94391681.0000000\n\n\n\n\n\n# write.csv(weight, './data/weight.csv', row.names=FALSE)\n\n\nweight |> dim()\n\n\n4444"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-corr.html#corrplot",
    "href": "posts/SOLAR/2023-04-06-corr.html#corrplot",
    "title": "[SOLAR] Correlation coefficient by region",
    "section": "Corrplot",
    "text": "Corrplot\n\noptions(repr.plot.width=30, repr.plot.height=30, repr.plot.res=300)\n\n\ncorrplot(round(weight,2), method = 'number')"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-solar-stgcn-ver2-lag1.html",
    "href": "posts/SOLAR/2023-04-09-solar-stgcn-ver2-lag1.html",
    "title": "[SOLAR] STGCN Ver2 lag1",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport json\nimport urllib\n\nimport matplotlib.pyplot as plt\nimport time\n\n\n# 일반적인 모듈 \nimport numpy as np\nimport matplotlib.pyplot as plt \nimport networkx as nx \nfrom tqdm import tqdm \n\n# 파이토치 관련 \nimport torch\nimport torch.nn.functional as F\n\n# PyG 관련 \nfrom torch_geometric.data import Data ## Data: 그래프자료형을 만드는 클래스\n\n# STGCN 관련 \nimport torch_geometric_temporal\nfrom torch_geometric_temporal.nn.recurrent import GConvGRU\nfrom torch_geometric_temporal.signal import temporal_signal_split \n\n\nclass RecurrentGCN(torch.nn.Module):\n    def __init__(self, node_features, filters):\n        super(RecurrentGCN, self).__init__()\n        self.recurrent = GConvGRU(node_features, filters, 2)\n        self.linear = torch.nn.Linear(filters, 1)\n\n    def forward(self, x, edge_index, edge_weight):\n        h = self.recurrent(x, edge_index, edge_weight)\n        h = F.relu(h)\n        h = self.linear(h)\n        return h\n\n\nfrom mysolar import SolarEPTDatasetLoader\n\n\nloader = SolarEPTDatasetLoader()\ndataset = loader.get_dataset(lags=1)\ntrain_dataset, test_dataset = temporal_signal_split(dataset, train_ratio=0.8)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-solar-stgcn-ver2-lag1.html#learn",
    "href": "posts/SOLAR/2023-04-09-solar-stgcn-ver2-lag1.html#learn",
    "title": "[SOLAR] STGCN Ver2 lag1",
    "section": "Learn",
    "text": "Learn\n\nmodel = RecurrentGCN(node_features=1, filters=32)\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\nmodel.train()\n\nRecurrentGCN(\n  (recurrent): GConvGRU(\n    (conv_x_z): ChebConv(1, 32, K=2, normalization=sym)\n    (conv_h_z): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_r): ChebConv(1, 32, K=2, normalization=sym)\n    (conv_h_r): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_h): ChebConv(1, 32, K=2, normalization=sym)\n    (conv_h_h): ChebConv(32, 32, K=2, normalization=sym)\n  )\n  (linear): Linear(in_features=32, out_features=1, bias=True)\n)\n\n\n\nstart = time.time()\nfor epoch in tqdm(range(50)):\n    for t, snapshot in enumerate(train_dataset):\n        yt_hat = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n        cost = torch.mean((yt_hat-snapshot.y)**2)\n        cost.backward()\n        optimizer.step()\n        optimizer.zero_grad()\nend = time.time()\nprint(f\"{end-start:.5f} sec\")\n\n100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 50/50 [48:08<00:00, 57.77s/it]\n\n\n2888.63086 sec\n\n\n\n\n\n\nprint(2888.63086/60, '분')\n\n48.14384766666667 분\n\n\n\nimport pickle \nwith open('stgcn2_lag1.pickle','wb') as fw:\n    pickle.dump(model, fw)\n\n\nimport pickle \nwith open('stgcn2_lag1.pickle', 'rb') as f: \n    model = pickle.load(f)\n\n\nmodel\n\nRecurrentGCN(\n  (recurrent): GConvGRU(\n    (conv_x_z): ChebConv(1, 32, K=2, normalization=sym)\n    (conv_h_z): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_r): ChebConv(1, 32, K=2, normalization=sym)\n    (conv_h_r): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_h): ChebConv(1, 32, K=2, normalization=sym)\n    (conv_h_h): ChebConv(32, 32, K=2, normalization=sym)\n  )\n  (linear): Linear(in_features=32, out_features=1, bias=True)\n)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-solar-stgcn-ver2-lag1.html#모델평가",
    "href": "posts/SOLAR/2023-04-09-solar-stgcn-ver2-lag1.html#모델평가",
    "title": "[SOLAR] STGCN Ver2 lag1",
    "section": "모델평가",
    "text": "모델평가\n\nmodel.eval()\ncost = 0\nfor time, snapshot in enumerate(train_dataset):\n    y_hat = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n    cost = cost + torch.mean((y_hat-snapshot.y)**2)\ncost = cost / (time+1)\ncost = cost.item()\nprint(\"MSE: {:.4f}\".format(cost))\n\nMSE: 0.1711\n\n\n\nmodel.eval()\ncost = 0\nfor time, snapshot in enumerate(test_dataset):\n    y_hat = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n    cost = cost + torch.mean((y_hat-snapshot.y)**2)\ncost = cost / (time+1)\ncost = cost.item()\nprint(\"MSE: {:.4f}\".format(cost))\n\nMSE: 0.1452"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-solar-stgcn-ver2-lag1.html#visualization",
    "href": "posts/SOLAR/2023-04-09-solar-stgcn-ver2-lag1.html#visualization",
    "title": "[SOLAR] STGCN Ver2 lag1",
    "section": "Visualization",
    "text": "Visualization\n\nyhat_train = torch.stack([model(snapshot.x,snapshot.edge_index, snapshot.edge_attr) for snapshot in train_dataset]).detach().numpy()\nyhat_test = torch.stack([model(snapshot.x,snapshot.edge_index, snapshot.edge_attr) for snapshot in test_dataset]).detach().numpy()\n\n\nurl = 'https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/solar2.json'\n\n\ndata_dict = json.loads(urllib.request.urlopen(url).read())\nV = list(data_dict['node_ids'].keys())\nf = np.array(data_dict[\"FX\"])\n\n\nimport matplotlib.pyplot as plt\nplt.rcParams['font.family'] = 'NanumGothic'\n\n\nfig,ax = plt.subplots(44,1,figsize=(10,50))\nfor k in range(44):\n    ax[k].plot(f[:,k],'--',alpha=0.5,label='observed')\n    ax[k].set_title('node: {}'.format(V[k]))\n    ax[k].plot(yhat_train[:,k],label='predicted (tr)')\n    ax[k].plot(range(yhat_train.shape[0],yhat_train.shape[0]+yhat_test.shape[0]),yhat_test[:,k],label='predicted (test)')\n    ax[k].legend()\nfig.tight_layout()\n\n\n\n\n\n깃헙 메모리문제(100MB 초과)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-10-lstm.html",
    "href": "posts/SOLAR/2023-04-10-lstm.html",
    "title": "[SOLAR] LSTM",
    "section": "",
    "text": "Data\n\n\n\n\nimport pandas as pd\nimport numpy as np\nimport json\nimport urllib\nimport gc\n\nimport matplotlib.pyplot as plt\n\n\nurl = 'https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/df_new.csv'\ndf = pd.read_csv(url)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-03-일사량.html",
    "href": "posts/SOLAR/2023-04-03-일사량.html",
    "title": "일사량자료정리",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport itertools\n\n\ndf0 = pd.read_csv('https://raw.githubusercontent.com/pinkocto/noteda/main/posts/data/OBS_ASOS_TIM_data0.csv', encoding='cp949') # 2021-01-01 ~ 2021-12-31\ndf1 = pd.read_csv('https://raw.githubusercontent.com/pinkocto/noteda/main/posts/data/OBS_ASOS_TIM_data1.csv') # 2022-01-01 ~ 2023-12-31\ndf2 = pd.read_csv('https://raw.githubusercontent.com/pinkocto/noteda/main/posts/data/test_raw.csv', encoding='cp949') # 2023-01-01 ~ 2023-01-15\n\n- df_raw\n\ndf_raw = pd.concat([df0, df1])\ndf_raw\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2021-01-01 08:00\n      0.00\n    \n    \n      1\n      93\n      북춘천\n      2021-01-01 09:00\n      0.37\n    \n    \n      2\n      93\n      북춘천\n      2021-01-01 10:00\n      0.96\n    \n    \n      3\n      93\n      북춘천\n      2021-01-01 11:00\n      1.40\n    \n    \n      4\n      93\n      북춘천\n      2021-01-01 12:00\n      1.72\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      229672\n      283\n      경주시\n      2022-12-31 14:00:00\n      1.82\n    \n    \n      229673\n      283\n      경주시\n      2022-12-31 15:00:00\n      1.52\n    \n    \n      229674\n      283\n      경주시\n      2022-12-31 16:00:00\n      0.96\n    \n    \n      229675\n      283\n      경주시\n      2022-12-31 17:00:00\n      0.35\n    \n    \n      229676\n      283\n      경주시\n      2022-12-31 18:00:00\n      0.01\n    \n  \n\n444720 rows × 4 columns\n\n\n\n- 지점칼럼 삭제 // 일시 \\(\\to\\) 날짜, 시간으로 분리\n\ndf_temp = df_raw.assign(날짜= list(map(lambda x: x[:10],df_raw['일시'])))\\\n.assign(시간 = list(map(lambda x: x[11:16], df_raw['일시'])))\\\n.drop(['일시','지점'], axis=1).rename({'일사(MJ/m2)':'일사'},axis=1).reset_index(drop=True)\ndf_temp\n\n\n\n\n\n  \n    \n      \n      지점명\n      일사\n      날짜\n      시간\n    \n  \n  \n    \n      0\n      북춘천\n      0.00\n      2021-01-01\n      08:00\n    \n    \n      1\n      북춘천\n      0.37\n      2021-01-01\n      09:00\n    \n    \n      2\n      북춘천\n      0.96\n      2021-01-01\n      10:00\n    \n    \n      3\n      북춘천\n      1.40\n      2021-01-01\n      11:00\n    \n    \n      4\n      북춘천\n      1.72\n      2021-01-01\n      12:00\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      444715\n      경주시\n      1.82\n      2022-12-31\n      14:00\n    \n    \n      444716\n      경주시\n      1.52\n      2022-12-31\n      15:00\n    \n    \n      444717\n      경주시\n      0.96\n      2022-12-31\n      16:00\n    \n    \n      444718\n      경주시\n      0.35\n      2022-12-31\n      17:00\n    \n    \n      444719\n      경주시\n      0.01\n      2022-12-31\n      18:00\n    \n  \n\n444720 rows × 4 columns\n\n\n\n- 파주, 상주, 동두천, 충주, 제천은 삭제\n\ndf_temp = df_temp.query(\"지점명 not in ['파주','상주','동두천','충주','제천']\").reset_index(drop=True)\ndf_temp\n\n\n\n\n\n  \n    \n      \n      지점명\n      일사\n      날짜\n      시간\n    \n  \n  \n    \n      0\n      북춘천\n      0.00\n      2021-01-01\n      08:00\n    \n    \n      1\n      북춘천\n      0.37\n      2021-01-01\n      09:00\n    \n    \n      2\n      북춘천\n      0.96\n      2021-01-01\n      10:00\n    \n    \n      3\n      북춘천\n      1.40\n      2021-01-01\n      11:00\n    \n    \n      4\n      북춘천\n      1.72\n      2021-01-01\n      12:00\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      420955\n      경주시\n      1.82\n      2022-12-31\n      14:00\n    \n    \n      420956\n      경주시\n      1.52\n      2022-12-31\n      15:00\n    \n    \n      420957\n      경주시\n      0.96\n      2022-12-31\n      16:00\n    \n    \n      420958\n      경주시\n      0.35\n      2022-12-31\n      17:00\n    \n    \n      420959\n      경주시\n      0.01\n      2022-12-31\n      18:00\n    \n  \n\n420960 rows × 4 columns\n\n\n\n- 시간이 비어있지 않도록…\n\nreg = df_temp['지점명'].unique().tolist() \nday = df_temp['날짜'].unique().tolist() \ntime = list(df_temp['시간'].unique())\ntime = ['0{}:00'.format(i) for i in range(0,8)] + time\n\n\ndf_temp2 = pd.DataFrame(itertools.product(reg,day,time)).rename({0:'지점명',1:'날짜',2:'시간'},axis=1).merge(df_temp,how='left').fillna(0)\ndf_temp2\n\n\n\n\n\n  \n    \n      \n      지점명\n      날짜\n      시간\n      일사\n    \n  \n  \n    \n      0\n      북춘천\n      2021-01-01\n      00:00\n      0.0\n    \n    \n      1\n      북춘천\n      2021-01-01\n      01:00\n      0.0\n    \n    \n      2\n      북춘천\n      2021-01-01\n      02:00\n      0.0\n    \n    \n      3\n      북춘천\n      2021-01-01\n      03:00\n      0.0\n    \n    \n      4\n      북춘천\n      2021-01-01\n      04:00\n      0.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      802995\n      경주시\n      2022-12-31\n      07:00\n      0.0\n    \n    \n      802996\n      경주시\n      2022-12-31\n      20:00\n      0.0\n    \n    \n      802997\n      경주시\n      2022-12-31\n      06:00\n      0.0\n    \n    \n      802998\n      경주시\n      2022-12-31\n      21:00\n      0.0\n    \n    \n      802999\n      경주시\n      2022-12-31\n      05:00\n      0.0\n    \n  \n\n803000 rows × 4 columns\n\n\n\n\ndf_temp2[:10]\n\n\n\n\n\n  \n    \n      \n      지점명\n      날짜\n      시간\n      일사\n    \n  \n  \n    \n      0\n      북춘천\n      2021-01-01\n      00:00\n      0.00\n    \n    \n      1\n      북춘천\n      2021-01-01\n      01:00\n      0.00\n    \n    \n      2\n      북춘천\n      2021-01-01\n      02:00\n      0.00\n    \n    \n      3\n      북춘천\n      2021-01-01\n      03:00\n      0.00\n    \n    \n      4\n      북춘천\n      2021-01-01\n      04:00\n      0.00\n    \n    \n      5\n      북춘천\n      2021-01-01\n      05:00\n      0.00\n    \n    \n      6\n      북춘천\n      2021-01-01\n      06:00\n      0.00\n    \n    \n      7\n      북춘천\n      2021-01-01\n      07:00\n      0.00\n    \n    \n      8\n      북춘천\n      2021-01-01\n      08:00\n      0.00\n    \n    \n      9\n      북춘천\n      2021-01-01\n      09:00\n      0.37\n    \n  \n\n\n\n\n\ndf_temp2[:-10]\n\n\n\n\n\n  \n    \n      \n      지점명\n      날짜\n      시간\n      일사\n    \n  \n  \n    \n      0\n      북춘천\n      2021-01-01\n      00:00\n      0.00\n    \n    \n      1\n      북춘천\n      2021-01-01\n      01:00\n      0.00\n    \n    \n      2\n      북춘천\n      2021-01-01\n      02:00\n      0.00\n    \n    \n      3\n      북춘천\n      2021-01-01\n      03:00\n      0.00\n    \n    \n      4\n      북춘천\n      2021-01-01\n      04:00\n      0.00\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      802985\n      경주시\n      2022-12-31\n      10:00\n      1.05\n    \n    \n      802986\n      경주시\n      2022-12-31\n      11:00\n      1.52\n    \n    \n      802987\n      경주시\n      2022-12-31\n      12:00\n      1.86\n    \n    \n      802988\n      경주시\n      2022-12-31\n      13:00\n      1.93\n    \n    \n      802989\n      경주시\n      2022-12-31\n      14:00\n      1.82\n    \n  \n\n802990 rows × 4 columns\n\n\n\n- 시간,날짜 \\(\\to\\) 일시\n\ndf_temp3=df_temp2.assign(일시 = list(map(lambda x,y: x+'-'+y,df_temp2['날짜'],df_temp2['시간'])))\\\n.drop(['날짜','시간'],axis=1)\ndf_temp3\n\n\n\n\n\n  \n    \n      \n      지점명\n      일사\n      일시\n    \n  \n  \n    \n      0\n      북춘천\n      0.0\n      2021-01-01-00:00\n    \n    \n      1\n      북춘천\n      0.0\n      2021-01-01-01:00\n    \n    \n      2\n      북춘천\n      0.0\n      2021-01-01-02:00\n    \n    \n      3\n      북춘천\n      0.0\n      2021-01-01-03:00\n    \n    \n      4\n      북춘천\n      0.0\n      2021-01-01-04:00\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      802995\n      경주시\n      0.0\n      2022-12-31-07:00\n    \n    \n      802996\n      경주시\n      0.0\n      2022-12-31-20:00\n    \n    \n      802997\n      경주시\n      0.0\n      2022-12-31-06:00\n    \n    \n      802998\n      경주시\n      0.0\n      2022-12-31-21:00\n    \n    \n      802999\n      경주시\n      0.0\n      2022-12-31-05:00\n    \n  \n\n803000 rows × 3 columns\n\n\n\n- 저장\n\ndf_temp3.rename({'지점명':'region','일사':'solar_radiation','일시':'date'},axis=1)\n\n\n\n\n\n  \n    \n      \n      region\n      solar_radiation\n      date\n    \n  \n  \n    \n      0\n      북춘천\n      0.0\n      2021-01-01-00:00\n    \n    \n      1\n      북춘천\n      0.0\n      2021-01-01-01:00\n    \n    \n      2\n      북춘천\n      0.0\n      2021-01-01-02:00\n    \n    \n      3\n      북춘천\n      0.0\n      2021-01-01-03:00\n    \n    \n      4\n      북춘천\n      0.0\n      2021-01-01-04:00\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      802995\n      경주시\n      0.0\n      2022-12-31-07:00\n    \n    \n      802996\n      경주시\n      0.0\n      2022-12-31-20:00\n    \n    \n      802997\n      경주시\n      0.0\n      2022-12-31-06:00\n    \n    \n      802998\n      경주시\n      0.0\n      2022-12-31-21:00\n    \n    \n      802999\n      경주시\n      0.0\n      2022-12-31-05:00\n    \n  \n\n803000 rows × 3 columns\n\n\n\n\ndf = df_temp3.rename({'지점명':'region','일사':'solar_radiation','일시':'date'},axis=1)\ndf.to_csv(\"solar_radiation.csv\",index=False)\n!git add .\n!git commit -m .\n!git push \n\n[main 553559d] .\n 3 files changed, 804001 insertions(+)\n create mode 100644 posts/2_Research/SOLAR/.ipynb_checkpoints/Untitled-checkpoint.ipynb\n create mode 100644 posts/2_Research/SOLAR/Untitled.ipynb\n create mode 100644 posts/2_Research/SOLAR/solar_radiation.csv\nEnumerating objects: 12, done.\nCounting objects: 100% (12/12), done.\nDelta compression using up to 16 threads\nCompressing objects: 100% (8/8), done.\nWriting objects: 100% (9/9), 2.72 MiB | 2.41 MiB/s, done.\nTotal 9 (delta 0), reused 0 (delta 0), pack-reused 0\nTo https://github.com/pinkocto/mm\n   7468929..553559d  main -> main\n\n\n- 불러오기\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/pinkocto/mm/main/posts/2_Research/SOLAR/solar_radiation.csv\")\ndf\n\n\n\n\n\n  \n    \n      \n      region\n      solar_radiation\n      date\n    \n  \n  \n    \n      0\n      북춘천\n      0.0\n      2021-01-01-00:00\n    \n    \n      1\n      북춘천\n      0.0\n      2021-01-01-01:00\n    \n    \n      2\n      북춘천\n      0.0\n      2021-01-01-02:00\n    \n    \n      3\n      북춘천\n      0.0\n      2021-01-01-03:00\n    \n    \n      4\n      북춘천\n      0.0\n      2021-01-01-04:00\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      802995\n      경주시\n      0.0\n      2022-12-31-07:00\n    \n    \n      802996\n      경주시\n      0.0\n      2022-12-31-20:00\n    \n    \n      802997\n      경주시\n      0.0\n      2022-12-31-06:00\n    \n    \n      802998\n      경주시\n      0.0\n      2022-12-31-21:00\n    \n    \n      802999\n      경주시\n      0.0\n      2022-12-31-05:00\n    \n  \n\n803000 rows × 3 columns\n\n\n\n- 다운로드\n\n# !wget https://raw.githubusercontent.com/miruetoto/yechan3/main/posts/3_Researches/SOLAR/solar_radiation.csv"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-solar-class.html",
    "href": "posts/SOLAR/2023-04-06-solar-class.html",
    "title": "[SOLAR] WindmillOutputLargeDatasetLoader",
    "section": "",
    "text": "ref: https://pytorch-geometric-temporal.readthedocs.io/en/latest/modules/dataset.html#torch_geometric_temporal.dataset.windmilllarge.WindmillOutputLargeDatasetLoader\n\n\nimport pandas as pd\nimport numpy as np\nimport json\nimport urllib\n\n\n# 일반적인 모듈 \nimport numpy as np\nimport matplotlib.pyplot as plt \nimport networkx as nx \nfrom tqdm import tqdm \n\n# 파이토치 관련 \nimport torch\nimport torch.nn.functional as F\n\n# PyG 관련 \nfrom torch_geometric.data import Data ## Data: 그래프자료형을 만드는 클래스\n\n# STGCN 관련 \nimport torch_geometric_temporal\nfrom torch_geometric_temporal.nn.recurrent import GConvGRU\nfrom torch_geometric_temporal.signal import temporal_signal_split \n\n\nurl = \"https://graphmining.ai/temporal_datasets/windmill_output.json\"\ndata_dict = json.loads(urllib.request.urlopen(url).read())\ndata_dict.keys()\n\ndict_keys(['block', 'time_periods', 'weights', 'edges'])\n\n\n\ntype(data_dict['weights']) # list 형태로 들어가있음.\n\nlist\n\n\n\ntype(data_dict['block']) # list 형태로 들어가 있음.\n\nlist\n\n\n\nnp.array(data_dict['block'])\n\narray([[0.1287, 0.1167, 0.0812, ..., 0.027 , 0.0201, 0.0228],\n       [0.0817, 0.1078, 0.1054, ..., 0.0439, 0.0262, 0.021 ],\n       [0.9418, 0.9589, 0.9447, ..., 0.7815, 0.8621, 0.2498],\n       ...,\n       [0.1391, 0.1829, 0.1383, ..., 0.0359, 0.0335, 0.0219],\n       [0.5972, 0.6057, 0.6123, ..., 0.2606, 0.4203, 0.1954],\n       [0.1298, 0.1504, 0.1442, ..., 0.0256, 0.093 , 0.0158]])\n\n\n\nnp.array(data_dict['block']).shape\n\n(17472, 319)\n\n\n\ntype(data_dict['block'])\n\nlist\n\n\n\nnp.array(data_dict['weights']).shape\n\n(101761,)\n\n\n\n# data_dict['block']\n\n\n# data_dict['edges']"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-solar-class.html#source-code-for-torch_geometric_temporal.dataset.windmillmedium",
    "href": "posts/SOLAR/2023-04-06-solar-class.html#source-code-for-torch_geometric_temporal.dataset.windmillmedium",
    "title": "[SOLAR] WindmillOutputLargeDatasetLoader",
    "section": "Source code for torch_geometric_temporal.dataset.windmillmedium",
    "text": "Source code for torch_geometric_temporal.dataset.windmillmedium\nimport json\nimport urllib\nimport numpy as np\nfrom ..signal import StaticGraphTemporalSignal\n\n\nclass WindmillOutputLargeDatasetLoader(object):\n    \"\"\"Hourly energy output of windmills from a European country\n    for more than 2 years. Vertices represent 319 windmills and\n    weighted edges describe the strength of relationships. The target\n    variable allows for regression tasks.\n    \"\"\"\n\n    def __init__(self):\n        self._read_web_data()\n\n    def _read_web_data(self):\n        url = \"https://graphmining.ai/temporal_datasets/windmill_output.json\"\n        self._dataset = json.loads(urllib.request.urlopen(url).read().decode())\n\n    def _get_edges(self):\n        self._edges = np.array(self._dataset[\"edges\"]).T\n\n    def _get_edge_weights(self):\n        self._edge_weights = np.array(self._dataset[\"weights\"]).T\n\n    def _get_targets_and_features(self):\n        stacked_target = np.stack(self._dataset[\"block\"])\n        standardized_target = (stacked_target - np.mean(stacked_target, axis=0)) / (\n            np.std(stacked_target, axis=0) + 10 ** -10\n        )\n        self.features = [\n            standardized_target[i : i + self.lags, :].T\n            for i in range(standardized_target.shape[0] - self.lags)\n        ]\n        self.targets = [\n            standardized_target[i + self.lags, :].T\n            for i in range(standardized_target.shape[0] - self.lags)\n        ]\n\n    def get_dataset(self, lags: int = 8) -> StaticGraphTemporalSignal:\n        \"\"\"Returning the Windmill Output data iterator.\n\n        Args types:\n            * **lags** *(int)* - The number of time lags.\n        Return types:\n            * **dataset** *(StaticGraphTemporalSignal)* - The Windmill Output dataset.\n        \"\"\"\n        self.lags = lags\n        self._get_edges()\n        self._get_edge_weights()\n        self._get_targets_and_features()\n        dataset = StaticGraphTemporalSignal(\n            self._edges, self._edge_weights, self.features, self.targets\n        )\n        return dataset\n\ntorch_geometric_temporal.signal.StaticGraphTemporalSignal"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-solar-class.html#source-code-for-solardatasetloader",
    "href": "posts/SOLAR/2023-04-06-solar-class.html#source-code-for-solardatasetloader",
    "title": "[SOLAR] WindmillOutputLargeDatasetLoader",
    "section": "Source code for SolarDatasetLoader",
    "text": "Source code for SolarDatasetLoader\n\nimport json\nimport urllib\nimport numpy as np\nfrom torch_geometric_temporal.signal.static_graph_temporal_signal import StaticGraphTemporalSignal\n\n\nclass SolarDatasetLoader(object):\n    \"\"\"Hourly energy output of windmills from a European country\n    for more than 2 years. Vertices represent 319 windmills and\n    weighted edges describe the strength of relationships. The target\n    variable allows for regression tasks.\n    \"\"\"\n\n    def __init__(self):\n        self._read_web_data()\n\n    def _read_web_data(self):\n        url = \"https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/solar.json\"\n        self._dataset = json.loads(urllib.request.urlopen(url).read().decode())\n\n    def _get_edges(self):\n        self._edges = np.array(self._dataset[\"edges\"]).T\n\n    def _get_edge_weights(self):\n        self._edge_weights = np.array(self._dataset[\"weights\"]).T\n\n    def _get_targets_and_features(self):\n        stacked_target = np.stack(self._dataset[\"FX\"])\n        self.features = [\n            stacked_target[i : i + self.lags, :].T\n            for i in range(stacked_target.shape[0] - self.lags)\n        ]\n        self.targets = [\n            stacked_target[i + self.lags, :].T\n            for i in range(stacked_target.shape[0] - self.lags)\n        ]\n\n    def get_dataset(self, lags: int = 4) -> StaticGraphTemporalSignal:\n        \"\"\"Returning the Windmill Output data iterator.\n\n        Args types:\n            * **lags** *(int)* - The number of time lags.\n        Return types:\n            * **dataset** *(StaticGraphTemporalSignal)* - The Windmill Output dataset.\n        \"\"\"\n        self.lags = lags\n        self._get_edges()\n        self._get_edge_weights()\n        self._get_targets_and_features()\n        dataset = StaticGraphTemporalSignal(\n            self._edges, self._edge_weights, self.features, self.targets\n        )\n        return dataset\n\n\nloader = SolarDatasetLoader()\ndataset = loader.get_dataset(lags=4)\ntrain_dataset, test_dataset = temporal_signal_split(dataset, train_ratio=0.8)\n\n\ndataset\n\n<torch_geometric_temporal.signal.static_graph_temporal_signal.StaticGraphTemporalSignal at 0x7f82258d5f40>\n\n\n\nmodel = RecurrentGCN(node_features=4, filters=32)\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\nmodel.train()\n\nfor epoch in tqdm(range(50)):\n    for t, snapshot in enumerate(train_dataset):\n        yt_hat = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n        cost = torch.mean((yt_hat-snapshot.y)**2)\n        cost.backward()\n        optimizer.step()\n        optimizer.zero_grad()\n\n\nimport mysolar"
  },
  {
    "objectID": "posts/SOLAR/2023-03-30-restructure-data.html",
    "href": "posts/SOLAR/2023-03-30-restructure-data.html",
    "title": "[R]데이터 재구조화",
    "section": "",
    "text": "library(data.table)\nlibrary(tidyverse)\n\n\nfile_path <- './data/'\nlist.files(file_path)\n\n[1] \"OBS_ASOS_TIM_data0.csv\"      \"OBS_ASOS_TIM_data1.csv\"     \n[3] \"prep_data.csv\"               \"prep_test.csv\"              \n[5] \"raw.csv\"                     \"restructuring_prep_data.csv\"\n[7] \"restructuring_raw.csv\"       \"test_raw.csv\"               \n\n\n\ndf_raw <- fread(file.path(file_path, 'raw.csv'))\nhead(df_raw)\n\n   지점 지점명             일시 일사(MJ/m2)\n1:   93 북춘천 2021-01-01 08:00        0.00\n2:   93 북춘천 2021-01-01 09:00        0.37\n3:   93 북춘천 2021-01-01 10:00        0.96\n4:   93 북춘천 2021-01-01 11:00        1.40\n5:   93 북춘천 2021-01-01 12:00        1.72\n6:   93 북춘천 2021-01-01 13:00        1.84\n\n\n\ndf_raw <- df_raw %>% dcast(일시 + '일사(MJ/m2)' ~ 지점명)\n\nUsing '일사(MJ/m2)' as value column. Use 'value.var' to override\n\ndf_raw %>% head()\n\n               일시 강릉 강진군 경주시 고산 고창 고창군 광양시 광주 김해시\n1: 2021-01-01 08:00 0.01   0.01   0.02 0.00 0.01   0.01   0.01 0.06   0.01\n2: 2021-01-01 09:00 0.37   0.17   0.45 0.05 0.14   0.22   0.25 0.19   0.41\n3: 2021-01-01 10:00 0.97   0.78   0.92 0.15 0.58   0.36   0.86 0.33   1.07\n4: 2021-01-01 11:00 1.48   1.75   1.14 0.15 0.61   0.30   1.31 0.66   1.49\n5: 2021-01-01 12:00 1.76   1.40   1.40 0.28 1.37   0.73   1.52 1.73   1.64\n6: 2021-01-01 13:00 1.92   1.16   1.38 0.17 1.31   1.26   1.13 1.75   1.98\n   대관령 대구 대전 동두천 목포 백령도 보성군 부산 북강릉 북창원 북춘천 상주\n1:   0.00 0.03 0.01     NA 0.01   0.00   0.02 0.03   0.01   0.01   0.00   NA\n2:   0.29 0.45 0.53     NA 0.30   0.13   0.35 0.47   0.35   0.27   0.37   NA\n3:   1.02 1.03 0.80     NA 1.01   0.65   0.88 1.10   0.92   0.92   0.96   NA\n4:   1.61 1.51 0.81     NA 0.96   1.04   1.38 1.62   1.39   1.22   1.40   NA\n5:   1.96 1.75 0.57     NA 1.01   1.71   1.63 1.94   1.71   1.86   1.72   NA\n6:   2.06 1.74 0.62     NA 1.01   1.87   1.31 2.11   1.82   1.99   1.84   NA\n   서산 서울 수원 순창군 안동 양산시 여수 영광군 울릉도 원주 의령군 인천 전주\n1: 0.00 0.00 0.00   0.00 0.01   0.01 0.00   0.00   0.00 0.00   0.03 0.00 0.01\n2: 0.06 0.27 0.18   0.24 0.40   0.27 0.30   0.23   0.24 0.35   0.51 0.15 0.51\n3: 0.18 0.76 0.60   0.45 0.99   1.07 0.97   0.34   0.68 1.15   1.37 0.65 1.19\n4: 0.31 1.40 1.22   0.76 0.96   1.60 1.34   1.00   0.51 1.59   1.69 1.20 1.13\n5: 0.46 1.74 1.69   0.65 1.85   1.91 1.40   1.35   0.47 2.02   2.04 1.48 1.19\n6: 0.36 1.61 1.78   1.70 1.99   2.02 1.98   1.65   0.89 1.91   1.64 1.70 1.28\n   제주 제천 진주 창원 철원 청송군 청주 추풍령 춘천 충주 파주 포항 함양군 홍성\n1: 0.00   NA 0.01 0.00 0.00   0.02 0.00   0.00 0.00   NA   NA 0.02   0.00 0.00\n2: 0.14   NA 0.54 0.29 0.11   0.46 0.27   0.27 0.31   NA   NA 0.38   0.25 0.07\n3: 0.27   NA 1.25 0.87 0.74   1.05 0.85   0.56 0.96   NA   NA 1.03   1.05 0.26\n4: 0.47   NA 1.59 1.41 1.37   1.26 0.75   0.69 1.46   NA   NA 1.53   1.65 0.43\n5: 0.26   NA 1.89 1.73 1.74   1.92 0.96   0.63 1.68   NA   NA 1.81   1.52 0.49\n6: 0.34   NA 1.80 1.83 1.98   1.85 0.87   1.26 1.78   NA   NA 1.86   1.13 0.52\n   흑산도\n1:   0.02\n2:   0.15\n3:   0.61\n4:   0.56\n5:   0.57\n6:   0.48\n\n\n\nwrite.csv(df_raw, './data/restructuring_raw.csv', row.names = FALSE)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-06-stgcn-data-ver1.html",
    "href": "posts/SOLAR/2023-04-06-stgcn-data-ver1.html",
    "title": "[SOLAR] Dataset for STGCN Ver1",
    "section": "",
    "text": "# !pip install torch-geometric\n# !pip install torch-geometric-temporal\n\n\n\n\n- 필요한 패키지 임포트\n\nimport pandas as pd\nimport numpy as np\nimport json\nimport urllib\n\n\n# 일반적인 모듈 \nimport numpy as np\nimport matplotlib.pyplot as plt \nimport networkx as nx \nfrom tqdm import tqdm \n\n# 파이토치 관련 \nimport torch\nimport torch.nn.functional as F\n\n# PyG 관련 \nfrom torch_geometric.data import Data\n\n# STGCN 관련 \nimport torch_geometric_temporal\nfrom torch_geometric_temporal.nn.recurrent import GConvGRU\nfrom torch_geometric_temporal.signal import temporal_signal_split \n\n\ntqdm: for문의 진행상태를 확인하기 위한 패키지\nnetworkx: 그래프 시그널 시각화를 위한 모듈\ntorch : 파이토치 (STGCN은 파이토치 기반으로 만들어짐) 모듈\ntorch.nn.functional: relu 등의 활성화함수를 불러오기 위한 모듈\nData : 그래프 자료를 만들기 위한 클래스\nGConvGRU : STGCN layer를 만드는 클래스\ntemporal_signal_split : STGCN dataset을 train/test 형태로 분리하는 기능이 있는 “함수”\n\n- STGCN 학습을 위한 클래스 선언\n\nclass RecurrentGCN(torch.nn.Module):\n    def __init__(self, node_features, filters):\n        super(RecurrentGCN, self).__init__()\n        self.recurrent = GConvGRU(node_features, filters, 2)\n        self.linear = torch.nn.Linear(filters, 1)\n\n    def forward(self, x, edge_index, edge_weight):\n        h = self.recurrent(x, edge_index, edge_weight)\n        h = F.relu(h)\n        h = self.linear(h)\n        return h\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\n\n\n\nurl = 'https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/df_new.csv'\ndf = pd.read_csv(url)\n\n\nurl2 = 'https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/weight.csv'\ndf2 = pd.read_csv(url2)\n\n\ndf = df.iloc[:,1:]\n\n\nnode_list =(df.columns).tolist()\nnode_ids = {node : i for i, node in enumerate(node_list)}\nnode_ids\n\n{'북춘천': 0,\n '철원': 1,\n '대관령': 2,\n '춘천': 3,\n '백령도': 4,\n '북강릉': 5,\n '강릉': 6,\n '서울': 7,\n '인천': 8,\n '원주': 9,\n '울릉도': 10,\n '수원': 11,\n '서산': 12,\n '청주': 13,\n '대전': 14,\n '추풍령': 15,\n '안동': 16,\n '포항': 17,\n '대구': 18,\n '전주': 19,\n '창원': 20,\n '광주': 21,\n '부산': 22,\n '목포': 23,\n '여수': 24,\n '흑산도': 25,\n '고창': 26,\n '홍성': 27,\n '제주': 28,\n '고산': 29,\n '진주': 30,\n '고창군': 31,\n '영광군': 32,\n '김해시': 33,\n '순창군': 34,\n '북창원': 35,\n '양산시': 36,\n '보성군': 37,\n '강진군': 38,\n '의령군': 39,\n '함양군': 40,\n '광양시': 41,\n '청송군': 42,\n '경주시': 43}\n\n\n\nedges = []    \n \nfor i in range(44):\n    for j in range(44):\n        if i != j:\n            edges.append([i,j]) \n# print(edges)\n\n\nnp.array(edges).shape\n\n(1892, 2)\n\n\n\n# from itertools import permutations\n# list(permutations(list(node_ids.values()), 2))\n\n\nlen(df['date']) # time\n\n18250\n\n\n\ndf2\n\n\n\n\n\n  \n    \n      \n      북춘천\n      철원\n      대관령\n      춘천\n      백령도\n      북강릉\n      강릉\n      서울\n      인천\n      원주\n      ...\n      순창군\n      북창원\n      양산시\n      보성군\n      강진군\n      의령군\n      함양군\n      광양시\n      청송군\n      경주시\n    \n  \n  \n    \n      0\n      1.000000\n      0.962367\n      0.909826\n      0.985657\n      0.871681\n      0.900659\n      0.890927\n      0.943081\n      0.936899\n      0.944473\n      ...\n      0.879136\n      0.853483\n      0.858169\n      0.863974\n      0.859685\n      0.866783\n      0.875598\n      0.865172\n      0.883101\n      0.848641\n    \n    \n      1\n      0.962367\n      1.000000\n      0.890696\n      0.960057\n      0.886264\n      0.884161\n      0.874764\n      0.945527\n      0.941293\n      0.930826\n      ...\n      0.868607\n      0.841086\n      0.846036\n      0.855756\n      0.855439\n      0.851310\n      0.863689\n      0.854172\n      0.866795\n      0.834444\n    \n    \n      2\n      0.909826\n      0.890696\n      1.000000\n      0.905515\n      0.819283\n      0.953088\n      0.947341\n      0.884961\n      0.882525\n      0.921151\n      ...\n      0.877524\n      0.872609\n      0.877105\n      0.868256\n      0.857598\n      0.879016\n      0.890071\n      0.870398\n      0.916970\n      0.888561\n    \n    \n      3\n      0.985657\n      0.960057\n      0.905515\n      1.000000\n      0.874211\n      0.898639\n      0.888139\n      0.943508\n      0.938434\n      0.942972\n      ...\n      0.880940\n      0.852272\n      0.857021\n      0.864633\n      0.860694\n      0.866294\n      0.875104\n      0.864782\n      0.882340\n      0.846321\n    \n    \n      4\n      0.871681\n      0.886264\n      0.819283\n      0.874211\n      1.000000\n      0.820746\n      0.813769\n      0.875487\n      0.898814\n      0.841837\n      ...\n      0.832971\n      0.803220\n      0.803683\n      0.828390\n      0.830200\n      0.816005\n      0.825798\n      0.824297\n      0.805963\n      0.786086\n    \n    \n      5\n      0.900659\n      0.884161\n      0.953088\n      0.898639\n      0.820746\n      1.000000\n      0.977052\n      0.876560\n      0.878769\n      0.908658\n      ...\n      0.874547\n      0.870073\n      0.873436\n      0.867076\n      0.856008\n      0.878188\n      0.880953\n      0.865367\n      0.907306\n      0.886590\n    \n    \n      6\n      0.890927\n      0.874764\n      0.947341\n      0.888139\n      0.813769\n      0.977052\n      1.000000\n      0.867627\n      0.869775\n      0.900690\n      ...\n      0.867068\n      0.863608\n      0.865448\n      0.861310\n      0.848392\n      0.871227\n      0.874620\n      0.858868\n      0.900920\n      0.877792\n    \n    \n      7\n      0.943081\n      0.945527\n      0.884961\n      0.943508\n      0.875487\n      0.876560\n      0.867627\n      1.000000\n      0.959453\n      0.934546\n      ...\n      0.876382\n      0.847805\n      0.847221\n      0.857383\n      0.858097\n      0.855020\n      0.865729\n      0.858174\n      0.867781\n      0.834465\n    \n    \n      8\n      0.936899\n      0.941293\n      0.882525\n      0.938434\n      0.898814\n      0.878769\n      0.869775\n      0.959453\n      1.000000\n      0.923601\n      ...\n      0.884033\n      0.854269\n      0.855463\n      0.874037\n      0.870921\n      0.867257\n      0.878578\n      0.870185\n      0.870756\n      0.843745\n    \n    \n      9\n      0.944473\n      0.930826\n      0.921151\n      0.942972\n      0.841837\n      0.908658\n      0.900690\n      0.934546\n      0.923601\n      1.000000\n      ...\n      0.898942\n      0.869611\n      0.872624\n      0.879347\n      0.874973\n      0.881663\n      0.893500\n      0.878524\n      0.905335\n      0.867475\n    \n    \n      10\n      0.840858\n      0.828910\n      0.858557\n      0.839147\n      0.772705\n      0.858164\n      0.848237\n      0.820593\n      0.827016\n      0.853274\n      ...\n      0.855951\n      0.863562\n      0.868133\n      0.847283\n      0.844231\n      0.863605\n      0.863168\n      0.850365\n      0.877260\n      0.870557\n    \n    \n      11\n      0.942564\n      0.939509\n      0.899435\n      0.943069\n      0.877389\n      0.892617\n      0.884630\n      0.963842\n      0.961417\n      0.946715\n      ...\n      0.897278\n      0.867285\n      0.867173\n      0.881624\n      0.880449\n      0.878150\n      0.889694\n      0.880142\n      0.886229\n      0.857732\n    \n    \n      12\n      0.922022\n      0.918923\n      0.888105\n      0.920695\n      0.882590\n      0.882694\n      0.875230\n      0.934192\n      0.947237\n      0.929486\n      ...\n      0.904372\n      0.868625\n      0.869256\n      0.888346\n      0.887653\n      0.880501\n      0.894877\n      0.885542\n      0.884844\n      0.857819\n    \n    \n      13\n      0.918237\n      0.905049\n      0.903431\n      0.917908\n      0.841079\n      0.896871\n      0.889428\n      0.918926\n      0.915476\n      0.944410\n      ...\n      0.924922\n      0.888684\n      0.888824\n      0.901216\n      0.899662\n      0.899361\n      0.915481\n      0.901138\n      0.911815\n      0.883347\n    \n    \n      14\n      0.898490\n      0.882652\n      0.891051\n      0.898174\n      0.827093\n      0.885413\n      0.878953\n      0.898554\n      0.898516\n      0.923292\n      ...\n      0.928719\n      0.892984\n      0.891581\n      0.906600\n      0.903907\n      0.905388\n      0.922893\n      0.904764\n      0.910243\n      0.883703\n    \n    \n      15\n      0.890061\n      0.876204\n      0.905452\n      0.890275\n      0.821154\n      0.900803\n      0.894228\n      0.880907\n      0.886372\n      0.915091\n      ...\n      0.937737\n      0.923287\n      0.922863\n      0.924852\n      0.917048\n      0.932314\n      0.949379\n      0.924473\n      0.945999\n      0.924620\n    \n    \n      16\n      0.903591\n      0.885217\n      0.918386\n      0.903755\n      0.825018\n      0.913419\n      0.906546\n      0.888718\n      0.890977\n      0.927298\n      ...\n      0.927022\n      0.922465\n      0.922966\n      0.917738\n      0.907627\n      0.928637\n      0.937947\n      0.919161\n      0.961391\n      0.929294\n    \n    \n      17\n      0.854662\n      0.838961\n      0.891356\n      0.854821\n      0.790609\n      0.891884\n      0.883858\n      0.840800\n      0.848850\n      0.872914\n      ...\n      0.897734\n      0.932551\n      0.937701\n      0.902187\n      0.887587\n      0.933228\n      0.921925\n      0.908669\n      0.945649\n      0.962429\n    \n    \n      18\n      0.880498\n      0.866139\n      0.900774\n      0.878750\n      0.821373\n      0.897400\n      0.888819\n      0.867965\n      0.874107\n      0.897911\n      ...\n      0.931290\n      0.947698\n      0.947900\n      0.932557\n      0.920683\n      0.955571\n      0.952851\n      0.935928\n      0.952312\n      0.952993\n    \n    \n      19\n      0.888314\n      0.877357\n      0.884532\n      0.887202\n      0.827562\n      0.880492\n      0.873037\n      0.889405\n      0.891161\n      0.916652\n      ...\n      0.950610\n      0.909561\n      0.907084\n      0.927081\n      0.927649\n      0.919504\n      0.938138\n      0.922211\n      0.915050\n      0.894398\n    \n    \n      20\n      0.860796\n      0.847790\n      0.874407\n      0.860170\n      0.808751\n      0.871520\n      0.863835\n      0.848297\n      0.862158\n      0.874510\n      ...\n      0.923953\n      0.976902\n      0.963444\n      0.944555\n      0.928480\n      0.968391\n      0.940725\n      0.952405\n      0.926913\n      0.939050\n    \n    \n      21\n      0.859424\n      0.852501\n      0.859687\n      0.860333\n      0.812785\n      0.856745\n      0.848790\n      0.861303\n      0.867384\n      0.881025\n      ...\n      0.954238\n      0.911049\n      0.904662\n      0.937906\n      0.939738\n      0.917915\n      0.928268\n      0.925915\n      0.901910\n      0.889684\n    \n    \n      22\n      0.854479\n      0.841909\n      0.871403\n      0.853623\n      0.801025\n      0.866994\n      0.858023\n      0.843441\n      0.853838\n      0.867562\n      ...\n      0.912998\n      0.960070\n      0.965982\n      0.933570\n      0.918842\n      0.950573\n      0.929205\n      0.939658\n      0.922093\n      0.936774\n    \n    \n      23\n      0.866337\n      0.861476\n      0.860613\n      0.867357\n      0.838917\n      0.858313\n      0.852067\n      0.864243\n      0.881786\n      0.880383\n      ...\n      0.943748\n      0.909687\n      0.905455\n      0.948874\n      0.957647\n      0.922845\n      0.925556\n      0.932798\n      0.896801\n      0.887664\n    \n    \n      24\n      0.857004\n      0.845811\n      0.865706\n      0.856728\n      0.817327\n      0.859749\n      0.854646\n      0.849073\n      0.863520\n      0.868992\n      ...\n      0.928136\n      0.944200\n      0.937155\n      0.962198\n      0.943037\n      0.953180\n      0.936996\n      0.965857\n      0.909258\n      0.909195\n    \n    \n      25\n      0.822826\n      0.822140\n      0.808481\n      0.826616\n      0.825401\n      0.811498\n      0.806484\n      0.821710\n      0.844909\n      0.830411\n      ...\n      0.883103\n      0.856841\n      0.857407\n      0.892598\n      0.898532\n      0.869034\n      0.872795\n      0.879107\n      0.839579\n      0.837283\n    \n    \n      26\n      0.879083\n      0.871026\n      0.865649\n      0.880956\n      0.835276\n      0.862511\n      0.855801\n      0.878337\n      0.889100\n      0.895420\n      ...\n      0.954230\n      0.906902\n      0.904828\n      0.934975\n      0.938474\n      0.917802\n      0.929699\n      0.923018\n      0.904717\n      0.886433\n    \n    \n      27\n      0.917044\n      0.909108\n      0.893061\n      0.918305\n      0.867335\n      0.889219\n      0.882249\n      0.926047\n      0.933830\n      0.929793\n      ...\n      0.914529\n      0.879062\n      0.880205\n      0.898748\n      0.897861\n      0.891294\n      0.905806\n      0.894126\n      0.895564\n      0.868894\n    \n    \n      28\n      0.797674\n      0.794452\n      0.808165\n      0.800473\n      0.787829\n      0.804120\n      0.800353\n      0.784880\n      0.805165\n      0.810297\n      ...\n      0.870303\n      0.870241\n      0.867300\n      0.892300\n      0.895220\n      0.874571\n      0.872941\n      0.878597\n      0.847435\n      0.853887\n    \n    \n      29\n      0.823267\n      0.821438\n      0.818549\n      0.826090\n      0.810675\n      0.812992\n      0.808599\n      0.817868\n      0.834785\n      0.832173\n      ...\n      0.884424\n      0.875923\n      0.872508\n      0.903510\n      0.907588\n      0.883369\n      0.878469\n      0.894774\n      0.853910\n      0.852406\n    \n    \n      30\n      0.860523\n      0.846942\n      0.877411\n      0.860094\n      0.817874\n      0.873037\n      0.866739\n      0.852371\n      0.865589\n      0.875812\n      ...\n      0.931571\n      0.959000\n      0.946352\n      0.952391\n      0.934954\n      0.971752\n      0.948990\n      0.961034\n      0.923896\n      0.932067\n    \n    \n      31\n      0.874779\n      0.865850\n      0.869024\n      0.874188\n      0.827848\n      0.864613\n      0.856987\n      0.874556\n      0.881425\n      0.894472\n      ...\n      0.956347\n      0.906210\n      0.903358\n      0.932322\n      0.935929\n      0.914995\n      0.929255\n      0.921594\n      0.904133\n      0.886793\n    \n    \n      32\n      0.872162\n      0.865352\n      0.862066\n      0.872958\n      0.836837\n      0.861242\n      0.854149\n      0.872677\n      0.886370\n      0.888694\n      ...\n      0.948914\n      0.903590\n      0.901627\n      0.933660\n      0.938028\n      0.915348\n      0.925572\n      0.921830\n      0.898344\n      0.882798\n    \n    \n      33\n      0.853448\n      0.840876\n      0.873050\n      0.851683\n      0.802507\n      0.869221\n      0.861291\n      0.846127\n      0.853925\n      0.868877\n      ...\n      0.914507\n      0.973683\n      0.973881\n      0.932867\n      0.917226\n      0.956417\n      0.933244\n      0.941004\n      0.926691\n      0.944078\n    \n    \n      34\n      0.879136\n      0.868607\n      0.877524\n      0.880940\n      0.832971\n      0.874547\n      0.867068\n      0.876382\n      0.884033\n      0.898942\n      ...\n      1.000000\n      0.918745\n      0.916958\n      0.945765\n      0.946780\n      0.932585\n      0.949482\n      0.938813\n      0.917386\n      0.898405\n    \n    \n      35\n      0.853483\n      0.841086\n      0.872609\n      0.852272\n      0.803220\n      0.870073\n      0.863608\n      0.847805\n      0.854269\n      0.869611\n      ...\n      0.918745\n      1.000000\n      0.965300\n      0.937217\n      0.921424\n      0.962523\n      0.938369\n      0.945592\n      0.927509\n      0.944296\n    \n    \n      36\n      0.858169\n      0.846036\n      0.877105\n      0.857021\n      0.803683\n      0.873436\n      0.865448\n      0.847221\n      0.855463\n      0.872624\n      ...\n      0.916958\n      0.965300\n      1.000000\n      0.929792\n      0.915165\n      0.953589\n      0.934088\n      0.937319\n      0.928486\n      0.945121\n    \n    \n      37\n      0.863974\n      0.855756\n      0.868256\n      0.864633\n      0.828390\n      0.867076\n      0.861310\n      0.857383\n      0.874037\n      0.879347\n      ...\n      0.945765\n      0.937217\n      0.929792\n      1.000000\n      0.968149\n      0.948806\n      0.944262\n      0.964120\n      0.911247\n      0.908184\n    \n    \n      38\n      0.859685\n      0.855439\n      0.857598\n      0.860694\n      0.830200\n      0.856008\n      0.848392\n      0.858097\n      0.870921\n      0.874973\n      ...\n      0.946780\n      0.921424\n      0.915165\n      0.968149\n      1.000000\n      0.931533\n      0.932621\n      0.947967\n      0.902115\n      0.892997\n    \n    \n      39\n      0.866783\n      0.851310\n      0.879016\n      0.866294\n      0.816005\n      0.878188\n      0.871227\n      0.855020\n      0.867257\n      0.881663\n      ...\n      0.932585\n      0.962523\n      0.953589\n      0.948806\n      0.931533\n      1.000000\n      0.952391\n      0.955940\n      0.930412\n      0.940236\n    \n    \n      40\n      0.875598\n      0.863689\n      0.890071\n      0.875104\n      0.825798\n      0.880953\n      0.874620\n      0.865729\n      0.878578\n      0.893500\n      ...\n      0.949482\n      0.938369\n      0.934088\n      0.944262\n      0.932621\n      0.952391\n      1.000000\n      0.942140\n      0.934759\n      0.927935\n    \n    \n      41\n      0.865172\n      0.854172\n      0.870398\n      0.864782\n      0.824297\n      0.865367\n      0.858868\n      0.858174\n      0.870185\n      0.878524\n      ...\n      0.938813\n      0.945592\n      0.937319\n      0.964120\n      0.947967\n      0.955940\n      0.942140\n      1.000000\n      0.915408\n      0.914159\n    \n    \n      42\n      0.883101\n      0.866795\n      0.916970\n      0.882340\n      0.805963\n      0.907306\n      0.900920\n      0.867781\n      0.870756\n      0.905335\n      ...\n      0.917386\n      0.927509\n      0.928486\n      0.911247\n      0.902115\n      0.930412\n      0.934759\n      0.915408\n      1.000000\n      0.943917\n    \n    \n      43\n      0.848641\n      0.834444\n      0.888561\n      0.846321\n      0.786086\n      0.886590\n      0.877792\n      0.834465\n      0.843745\n      0.867475\n      ...\n      0.898405\n      0.944296\n      0.945121\n      0.908184\n      0.892997\n      0.940236\n      0.927935\n      0.914159\n      0.943917\n      1.000000\n    \n  \n\n44 rows × 44 columns\n\n\n\n\nweights = []    \n \nfor i in range(44):\n    for j in range(44):\n        if i != j:\n            weights.append(df2.iloc[i,j]) \n\n\nnp.array(weights).shape\n\n(1892,)\n\n\n\nFX = []    \nfor i in range(18250):\n    FX.append(list(df.iloc[i,:])) \n#FX\n\n\nnp.array(FX).shape\n\n(18250, 44)\n\n\n- weights, edges, node_ids, FX\n\ndata_dict = {'edges':edges, 'node_ids':node_ids, 'weights':weights, 'FX':FX}\n\n\ndata_dict.keys()\n\ndict_keys(['edges', 'node_ids', 'weights', 'FX'])\n\n\n\nfile_path = './data/solar.json'\n\n\nwith open(file_path, 'w') as f:\n    json.dump(data_dict, f)\n\n\nwith open(file_path, 'r') as f:\n    test = json.load(f, encoding='cp949')\n\n\n# json_data = json.dumps(data_dict, ensure_ascii=False)\n# json_data\n\n\n\\({\\bf f}=\\begin{bmatrix} {\\bf f}_1\\\\ {\\bf f}_2\\\\ \\dots \\\\ {\\bf f}_{521} \\end{bmatrix}=\\begin{bmatrix} f(t=1,v=\\tt{BACS}) & \\dots & f(t=1,v=\\tt{ZALA}) \\\\ f(t=2,v=\\tt{BACS}) & \\dots & f(t=2,v=\\tt{ZALA}) \\\\ \\dots & \\dots & \\dots \\\\ f(t=521,v=\\tt{BACS}) & \\dots & f(t=521,v=\\tt{ZALA}) \\end{bmatrix}\\)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-ft.html",
    "href": "posts/SOLAR/2023-04-09-ft.html",
    "title": "푸리에 변환",
    "section": "",
    "text": "ref: 파이썬으로 배우는 음성인식\nref: 퓨리에변환 교수님 버전\nref: wiki"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-ft.html#위키버전",
    "href": "posts/SOLAR/2023-04-09-ft.html#위키버전",
    "title": "푸리에 변환",
    "section": "위키버전",
    "text": "위키버전\n푸리에 변환(Fourier transform, FT) 은 시간이나 공간에 대한 함수를 시간 또는 공간 주파수 성분으로 분해하는 변환을 말한다. 종종 이 변환으로 나타난 주파수 영역에서 함수를 표현한 결과물을 가리키는 용어로도 사용된다. 조제프 푸리에가 열전도에 대한 연구에서 열 방정식의 해를 구할 때 처음 사용되었다.\n시간에 대한 함수를 푸리에 변환했을 때 얻어지는 복소함수에서 각 주파수에서의 진폭은 원래 함수를 구성하던 그 주파수 성분의 크기를, 편각은 기본 사인 곡선과의 위상차(phase offset)를 나타낸다. 푸리에 변환된 결과물로부터 피변환함수를 복원할 수도 있다. 이를 증명하는 정리를 푸리에 역변환 정리 라고 한다.\n시간 영역에서는 좁은 지역에서 표현되는 함수를 주파수 영역으로 푸리에 변환하면 함수가 넓게 퍼지게 된다. 이를 불확정성 원리라 한다. 그러나 가우스 함수는 푸리에 변환을 해도 똑같이 가우스 함수로 나타난다. 이 가우스 함수는 확률 이론과 통계학에서 뿐만 아니라 정규 분포를 나타내는 물리 현상에 대한 연구에서 매우 중요하게 다뤄진다. 조제프 푸리에가 푸리에 변환을 통해 구한 열 방정식의 해가 바로 가우스 함수의 꼴을 띄었다.\n엄밀히 말하자면 푸리에 변환은 일종의 적분 변환 으로, 리만 이상적분이어서 더 복잡한 적분 이론을 요구하는 응용분야에서는 적합하지 않을 수 있다. 대표적으로 많은 경우 디랙 델타 함수를 일종의 함수로 푸리에 변환에 응용하지만, 수학적으로 엄밀한 관점을 취하자면 더 심도있는 고찰이 필요한 것이다."
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-ft.html#주파수-영역",
    "href": "posts/SOLAR/2023-04-09-ft.html#주파수-영역",
    "title": "푸리에 변환",
    "section": "주파수 영역",
    "text": "주파수 영역\n\n\n\nimage.png\n\n\n\nfrom IPython.display import IFrame\nIFrame(\"https://upload.wikimedia.org/wikipedia/commons/7/72/Fourier_transform_time_and_frequency_domains_%28small%29.gif\", width=\"300\" ,height = \"240\",frameborder=\"0\")"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-ft.html#푸리에-변환의-단점",
    "href": "posts/SOLAR/2023-04-09-ft.html#푸리에-변환의-단점",
    "title": "푸리에 변환",
    "section": "푸리에 변환의 단점",
    "text": "푸리에 변환의 단점\n시간에 대한 연속성이 고려되지 않음으로써 많은 문제가 야기된다. 이러한 단점을 보완하기 위해 DTFT, STFT, 웨이블릿 변환, 가버변환, MFCCs 등등이 연구되어 나왔다.\n\n와닿지가 않아.. 웨이블릿 변환? 가버변환?"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-ft.html#예비학습-모델링이란",
    "href": "posts/SOLAR/2023-04-09-ft.html#예비학습-모델링이란",
    "title": "푸리에 변환",
    "section": "예비학습: 모델링이란?",
    "text": "예비학습: 모델링이란?\n- 모델링이란?\n\\[y_i = f(x_i) + \\epsilon_i\\]\n의 꼴에서 \\(f\\)의 모양을 결정하는 과정을 의미한다.\n- 파라메트릭 모델링\n\\(f\\)의 모양을 결정할 때 데이터에 대한 확실한 사전정보가 있는 경우가 있다. 예를들어 “\\(f(x)\\)는 \\(x\\)에 선형변환으로 만들어질 수 있다. (즉, \\(f(x) = \\beta_0 + \\beta_1x\\))”라는 사실을 알고 있는 경우이다. 이는\n\\[y_i = f(x_i) + \\epsilon_i\\]\n와 같은 모델에서 \\(f\\)가 어떠한 형태를 가질것인지를 미리 알고있다고 생각한다는 말과 같다. 이처럼 \\(f\\)가 어떤 모양인지 미리 알고 접근하는 방법을 파라메트릭 모델링 이라고 한다.\n- 세미파라메트릭 모델링\n사전정보가 없어서 \\(f\\)를 어떻게 모델링할지 감이 안 올수도 있다. 즉 자료를 봤는데 선형의 모양을 가지는지 어떤지 감을 못잡겠는 경우이다. 이것을 바꾸어 말하면 \\(\\{ y_i\\}\\)가 \\(\\{x_i\\}\\)의 어떤 space에 있는지 감을 못잡겠다는 뜻이다. 혹은 모델링이 귀찮을 수도 있다. 이럴 경우 \\(f(x)\\)가 \\(x\\)의 어떤 특정스페이스 \\(\\cal{A}\\)의 부분공간에 존재한다고 가정하고 그 특정 스페이스 \\(\\cal{A}\\)를 생성할 수 있는 베이시스를 선택하여 문제를 풀 수 있다. 가령 예를들면 “\\(f(x)\\)가 어떤 공간에 있는지 모르겠는데 최소한 비숍스페이스의 부분공간에 있는 것 같아”라고 생각한다면 웨이블릿 베이시스를 선택하여 모델링 하는 것이다. 보통 위와 같은 접근법은 무한대의 basis를 활용한다. 많은 수학자들이 “이런식으로 무한개의 basis를 활용하면 특정공간에 있는 어떠한 함수도 표현할 수 있어요~” 이런식의 증명을 많이 해놓았는데 이런 증명결과들을 적극적으로 활용하는 셈이다. 이렇게 \\(f\\)를 표현하는게 무한개의 basis를 활용하는 모델링을 semi-parametric modeling 이라고 한다.\n- 웨이블릿과 푸리에변동으로 \\(f(x)\\)를 추론하는 것이 대표적인 세미파라메트릭 모델링이다."
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-ft.html#import",
    "href": "posts/SOLAR/2023-04-09-ft.html#import",
    "title": "푸리에 변환",
    "section": "import",
    "text": "import\n\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport rpy2\n%load_ext rpy2.ipython"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-ft.html#예제신호-소개",
    "href": "posts/SOLAR/2023-04-09-ft.html#예제신호-소개",
    "title": "푸리에 변환",
    "section": "예제신호 소개",
    "text": "예제신호 소개\n- 아래와 같은 신호를 고려하자.\n\nn=100\nt=np.linspace(0,0.99,n)\nf_true =3+ 1.5*np.sin(2*np.pi*t)+2*np.sin(10*np.pi*t)\nϵ=np.random.normal(scale=0.2,size=n)\nf = f_true + ϵ\nplt.plot(t,f,'.')\nplt.plot(t,f_true)\n\n\n\n\n\n목표 : 파란점을 관찰 \\(\\to\\) 주황선을 추론\n\n- 수식화하면 아래와 같다.\n\\[f_i = 3 + 1.5\\times \\sin(2\\pi t_i) + 2\\times \\sin(10\\pi t_i) + \\epsilon_i, \\quad t_i = \\frac{i}{100}\\]\n회귀분석 느낌으로 표현하면 아래와 같이 표현가능하다.\n\\[y_i = \\beta_0 + \\beta_1x_{i1} + \\beta_2x_{i2} + \\epsilon_i\\]\n단, \\(x_{i1} = \\sin(2\\pi t_i)\\)이고 \\(x_{i2} = \\sin(10\\pi t_i).\\)\n우리의 목표는 이제 아래와 같이 정리할 수 있다.\n\n주어진 것: \\((y_i, x_{i1}, x_{i2})\\)\n목표: \\(\\beta_0, \\beta_1, \\beta_2\\)를 추론"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-ft.html#방법1-회귀분석",
    "href": "posts/SOLAR/2023-04-09-ft.html#방법1-회귀분석",
    "title": "푸리에 변환",
    "section": "방법1: 회귀분석",
    "text": "방법1: 회귀분석\n- x1, x2, y를 아래와 같이 col-vector로 선언\n\n# t=np.linspace(0,0.99,n)\nx1 = np.sin(2*np.pi*t)\nx2 = np.sin(10*np.pi*t)\n\n\\(\\bf{X} = [1, x1, x2]\\) 라고 생각하고 회귀분석을 수행한다.\n\n# n=100\n# f = f_true + ϵ\nX=np.ones((n,3))\nX[:,1] = x1\nX[:,2] = x2\nX = np.matrix(X)\ny = np.matrix(f).T # y는 col-vec로 선언\nβhat = (X.T*X).I*X.T*y\nβhat\n\nmatrix([[3.00673254],\n        [1.47090366],\n        [2.06163848]])\n\n\n- R을 이용해서 구해볼 수도 있음.\n\n%R -i f,x1,x2\n\n\n%%R \nlm(f~x1+x2)\n\n\nCall:\nlm(formula = f ~ x1 + x2)\n\nCoefficients:\n(Intercept)           x1           x2  \n      3.007        1.471        2.062"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-ft.html#방법2",
    "href": "posts/SOLAR/2023-04-09-ft.html#방법2",
    "title": "푸리에 변환",
    "section": "방법2",
    "text": "방법2\nx1, x2을 모른다면? 우리가 \\(f=y\\) 만을 알고있다면?\n그러니까 \\(x_{i1}=\\sin(2\\pi t_i)\\)이고 \\(x_{i2} = \\sin(10\\pi t_i)\\) 인지 모른다면? (구체적으로 2와 10과 같은 숫자를 모른다면? = 주파수를 모른다면?)\n잘은 모르겠지만 아래의 베이시스중에 하나는 걸릴 것 같다.\n\nx1=np.sin(2*np.pi*t)\nx2=np.sin(4*np.pi*t)\nx3=np.sin(6*np.pi*t)\nx4=np.sin(8*np.pi*t)\nx5=np.sin(10*np.pi*t)\n\n\nX=np.ones((n,6))\nX[:,1]=x1\nX[:,2]=x2\nX[:,3]=x3\nX[:,4]=x4\nX[:,5]=x5\nX=np.matrix(X)\nβhat= (X.T*X).I*X.T*y\nβhat\n\nmatrix([[ 3.00673254e+00],\n        [ 1.47090366e+00],\n        [-2.51527234e-02],\n        [-8.29437604e-04],\n        [ 5.00178446e-02],\n        [ 2.06163848e+00]])\n\n\n그럴듯함\n적합해보자..\n\nplt.plot(f, '.')\nplt.plot(X*βhat)\n\n\n\n\n비판1: 베이시스를 막 추가했는데 (\\(=p\\)가 늘어났는데) 오버피팅이 생기는것이 아닌가? \\(\\to\\) 절대안생김\n비판2: 저 베이시스중에서 안걸리면 어떻게 할것임? \\(\\to\\) 무한대의 베이시스를 쓰겠음 \\(\\Rightarrow\\) 이게 퓨리에 변환\n\nx1=np.sin(2*np.pi*t)\nx2=np.cos(2*np.pi*t)\nx3=np.sin(4*np.pi*t)\nx4=np.cos(4*np.pi*t)\nx5=np.sin(6*np.pi*t)\nx6=np.cos(6*np.pi*t)\nx7=np.sin(8*np.pi*t)\nx8=np.cos(8*np.pi*t)\n... \n# 수틀리면 베이시스 더 쓸수도 있다 --> 무한대까지 쓸 수 있지만 무한대까지 쓸 필요는 없음.. (나아퀴스트 정리)\n\nEllipsis"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-ft.html#방법3-퓨리에-변환",
    "href": "posts/SOLAR/2023-04-09-ft.html#방법3-퓨리에-변환",
    "title": "푸리에 변환",
    "section": "방법3: 퓨리에 변환",
    "text": "방법3: 퓨리에 변환\n- 퓨리에 변환 결과\n\nfbar = np.abs(np.fft.fft(f))/100\nplt.plot(fbar,'.')\n\n\n\n\n- 세부적인 이론이 있지만 실수인 경우는 fbar는 아래의 특징을 가짐\n\nfbar[0]을 제외하고 나머지는 대칭임.\n\n- 따라서 그림을 아래와 같이 그려도 정보손실없음\n\nfbar2=np.zeros(50)\nfbar2[0] = fbar[0] \nfbar2[1:50] = 2*fbar[1:50]\nplt.plot(fbar2,'.')\n\n\n\n\n대충보면 인덱스 10이전까지의 값만 살펴보면 될것 같도 나머지는 \\(0\\) 근처임\n\nfbar2[[0,1,5]]\n\narray([3.00673254, 1.47117598, 2.06163854])\n\n\n이것은 각각 1, x1, x2에 대한 베이시스임을 알 수 있다.\n- 퓨리에 변환요약: 아무런 생각없이 무한대의 베이시스를 넣고 계수값을 구하면 잘 적합된다.\n- 퓨리에의 통찰: 어지간한 함수는 저주파부터 고주파의 cos함수 (혹은 sin함수)에 적당한 계수를 곱한뒤 합치면 표현가능하다."
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-ft.html#pca",
    "href": "posts/SOLAR/2023-04-09-ft.html#pca",
    "title": "푸리에 변환",
    "section": "PCA",
    "text": "PCA\n- 생각해보니까 베이시스를 무한대로 넣는것이 매우 통쾌해보임\n- 종종 \\(p\\)가 너무 커서 곤란한 상황이 많음. \\(\\to\\) 공부해야할 것도 많음.\n\n다중공선성\n오버피팅\n변수선택\n\\(\\dots\\)\n\n- 베이시스가 직교였더라면.. \\(\\to\\) 기존 베이시스를 변환하여 직교 베이시스로 만들자!\n- 기존 베이시스를 변환하여 직교 베이시스로 만드는 방법: Eigen-value decomposition, SVD"
  },
  {
    "objectID": "posts/SOLAR/2023-03-30-correlation.html",
    "href": "posts/SOLAR/2023-03-30-correlation.html",
    "title": "[R]Correlation coefficient by region",
    "section": "",
    "text": "library(data.table)\nlibrary(tidyverse)\nlibrary(recipes)\nlibrary(corrplot)\nlibrary(GGally)\n\n\nfile_path <- './data/'\nlist.files(file_path)\n\n[1] \"OBS_ASOS_TIM_data0.csv\"      \"OBS_ASOS_TIM_data1.csv\"     \n[3] \"prep_data.csv\"               \"prep_test.csv\"              \n[5] \"raw.csv\"                     \"restructuring_prep_data.csv\"\n[7] \"restructuring_raw.csv\"       \"test_raw.csv\"               \n\n\n\ndf1 <- fread(file.path(file_path, 'prep_data.csv'))\nhead(df1)\n\n   지점 지점명                일시 일사(MJ/m2)   Datetime hour\n1:   93 북춘천 2021-01-01 08:00:00        0.00 2021-01-01    8\n2:   93 북춘천 2021-01-01 09:00:00        0.37 2021-01-01    9\n3:   93 북춘천 2021-01-01 10:00:00        0.96 2021-01-01   10\n4:   93 북춘천 2021-01-01 11:00:00        1.40 2021-01-01   11\n5:   93 북춘천 2021-01-01 12:00:00        1.72 2021-01-01   12\n6:   93 북춘천 2021-01-01 13:00:00        1.84 2021-01-01   13\n\n\n\nglimpse(df1)\n\nRows: 352,279\nColumns: 6\n$ 지점          <int> 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, …\n$ 지점명        <chr> \"북춘천\", \"북춘천\", \"북춘천\", \"북춘천\", \"북춘천\", \"북춘…\n$ 일시          <dttm> 2021-01-01 08:00:00, 2021-01-01 09:00:00, 2021-01-01 10…\n$ `일사(MJ/m2)` <dbl> 0.00, 0.37, 0.96, 1.40, 1.72, 1.84, 1.74, 1.30, 0.93, 0.…\n$ Datetime      <IDate> 2021-01-01, 2021-01-01, 2021-01-01, 2021-01-01, 2021-0…\n$ hour          <int> 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 8, 9, 10, 11, …"
  },
  {
    "objectID": "posts/SOLAR/2023-03-30-correlation.html#지역별-일사량-correlation",
    "href": "posts/SOLAR/2023-03-30-correlation.html#지역별-일사량-correlation",
    "title": "[R]Correlation coefficient by region",
    "section": "지역별 일사량 correlation",
    "text": "지역별 일사량 correlation\n\ndf1 <- subset(df1, select = -c(Datetime,hour))\ndf1 %>% head()\n\n   지점 지점명                일시 일사(MJ/m2)\n1:   93 북춘천 2021-01-01 08:00:00        0.00\n2:   93 북춘천 2021-01-01 09:00:00        0.37\n3:   93 북춘천 2021-01-01 10:00:00        0.96\n4:   93 북춘천 2021-01-01 11:00:00        1.40\n5:   93 북춘천 2021-01-01 12:00:00        1.72\n6:   93 북춘천 2021-01-01 13:00:00        1.84\n\n\n\ndf1 <- df1 %>% dcast(일시 + '일사(MJ/m2)' ~ 지점명)\n\nUsing '일사(MJ/m2)' as value column. Use 'value.var' to override\n\ndf1 %>% head()\n\n                  일시 강릉 강진군 경주시 고산 고창 고창군 광양시 광주 김해시\n1: 2021-01-01 08:00:00 0.01   0.01   0.02 0.00 0.01   0.01   0.01 0.06   0.01\n2: 2021-01-01 09:00:00 0.37   0.17   0.45 0.05 0.14   0.22   0.25 0.19   0.41\n3: 2021-01-01 10:00:00 0.97   0.78   0.92 0.15 0.58   0.36   0.86 0.33   1.07\n4: 2021-01-01 11:00:00 1.48   1.75   1.14 0.15 0.61   0.30   1.31 0.66   1.49\n5: 2021-01-01 12:00:00 1.76   1.40   1.40 0.28 1.37   0.73   1.52 1.73   1.64\n6: 2021-01-01 13:00:00 1.92   1.16   1.38 0.17 1.31   1.26   1.13 1.75   1.98\n   대관령 대구 대전 목포 백령도 보성군 부산 북강릉 북창원 북춘천 서산 서울 수원\n1:   0.00 0.03 0.01 0.01   0.00   0.02 0.03   0.01   0.01   0.00 0.00 0.00 0.00\n2:   0.29 0.45 0.53 0.30   0.13   0.35 0.47   0.35   0.27   0.37 0.06 0.27 0.18\n3:   1.02 1.03 0.80 1.01   0.65   0.88 1.10   0.92   0.92   0.96 0.18 0.76 0.60\n4:   1.61 1.51 0.81 0.96   1.04   1.38 1.62   1.39   1.22   1.40 0.31 1.40 1.22\n5:   1.96 1.75 0.57 1.01   1.71   1.63 1.94   1.71   1.86   1.72 0.46 1.74 1.69\n6:   2.06 1.74 0.62 1.01   1.87   1.31 2.11   1.82   1.99   1.84 0.36 1.61 1.78\n   순창군 안동 양산시 여수 영광군 울릉도 원주 의령군 인천 전주 제주 진주 창원\n1:   0.00 0.01   0.01 0.00   0.00   0.00 0.00   0.03 0.00 0.01 0.00 0.01 0.00\n2:   0.24 0.40   0.27 0.30   0.23   0.24 0.35   0.51 0.15 0.51 0.14 0.54 0.29\n3:   0.45 0.99   1.07 0.97   0.34   0.68 1.15   1.37 0.65 1.19 0.27 1.25 0.87\n4:   0.76 0.96   1.60 1.34   1.00   0.51 1.59   1.69 1.20 1.13 0.47 1.59 1.41\n5:   0.65 1.85   1.91 1.40   1.35   0.47 2.02   2.04 1.48 1.19 0.26 1.89 1.73\n6:   1.70 1.99   2.02 1.98   1.65   0.89 1.91   1.64 1.70 1.28 0.34 1.80 1.83\n   철원 청송군 청주 추풍령 춘천 포항 함양군 홍성 흑산도\n1: 0.00   0.02 0.00   0.00 0.00 0.02   0.00 0.00   0.02\n2: 0.11   0.46 0.27   0.27 0.31 0.38   0.25 0.07   0.15\n3: 0.74   1.05 0.85   0.56 0.96 1.03   1.05 0.26   0.61\n4: 1.37   1.26 0.75   0.69 1.46 1.53   1.65 0.43   0.56\n5: 1.74   1.92 0.96   0.63 1.68 1.81   1.52 0.49   0.57\n6: 1.98   1.85 0.87   1.26 1.78 1.86   1.13 0.52   0.48\n\n\n\ndf1 %>% dim()\n\n[1] 8030   45\n\n\n\nnum_vars <- df1 %>% select(-일시)\nweight <- cor(num_vars, use = 'pairwise.complete.obs')\nweight\n\n            강릉    강진군    경주시      고산      고창    고창군    광양시\n강릉   1.0000000 0.7044017 0.7703514 0.6312139 0.7271388 0.7274934 0.7274176\n강진군 0.7044017 1.0000000 0.7871212 0.8176767 0.8834400 0.8764382 0.8971808\n경주시 0.7703514 0.7871212 1.0000000 0.7099020 0.7799916 0.7784246 0.8319129\n고산   0.6312139 0.8176767 0.7099020 1.0000000 0.7921017 0.7795135 0.7932090\n고창   0.7271388 0.8834400 0.7799916 0.7921017 1.0000000 0.9636801 0.8544049\n고창군 0.7274934 0.8764382 0.7784246 0.7795135 0.9636801 1.0000000 0.8486326\n광양시 0.7274176 0.8971808 0.8319129 0.7932090 0.8544049 0.8486326 1.0000000\n광주   0.7170920 0.8914366 0.7876565 0.7827690 0.9146688 0.9194130 0.8646192\n김해시 0.7300587 0.8298323 0.8884789 0.7437849 0.8087741 0.8033153 0.8822539\n대관령 0.9096524 0.7151957 0.7830542 0.6468294 0.7392306 0.7430812 0.7428423\n대구   0.7819328 0.8349168 0.9057791 0.7419595 0.8402181 0.8374690 0.8696729\n대전   0.7877771 0.8254926 0.7894997 0.7319483 0.8703778 0.8717858 0.8306825\n목포   0.7089408 0.9132795 0.7733647 0.8247665 0.9118592 0.8988462 0.8636433\n백령도 0.6416767 0.6633466 0.5821691 0.6347485 0.6769029 0.6643130 0.6525396\n보성군 0.7255909 0.9352029 0.8147853 0.8078128 0.8760113 0.8668396 0.9300403\n부산   0.7257286 0.8372601 0.8794130 0.7617967 0.8139354 0.8044084 0.8836403\n북강릉 0.9679702 0.7130858 0.7787018 0.6373739 0.7346559 0.7357016 0.7335184\n북창원 0.7343323 0.8400905 0.8902254 0.7544385 0.8178678 0.8134796 0.8933071\n북춘천 0.7934575 0.7164055 0.6997703 0.6530018 0.7611288 0.7533824 0.7298274\n서산   0.7602535 0.7739392 0.7187583 0.7145626 0.8221190 0.8170089 0.7726253\n서울   0.7497483 0.7169152 0.6754826 0.6466854 0.7611490 0.7564272 0.7202050\n수원   0.7783023 0.7568028 0.7172262 0.6803819 0.8051685 0.7995755 0.7589846\n순창군 0.7477589 0.8975007 0.8024646 0.7772885 0.9201761 0.9223830 0.8847395\n안동   0.8229087 0.8124436 0.8620901 0.7209146 0.8361734 0.8326433 0.8380486\n양산시 0.7420517 0.8297895 0.8982046 0.7489133 0.8166139 0.8102864 0.8794260\n여수   0.7224022 0.8869236 0.8229676 0.8053798 0.8417374 0.8333109 0.9373270\n영광군 0.7199346 0.8802219 0.7709653 0.7998266 0.9641461 0.9451684 0.8482541\n울릉도 0.7249746 0.7068337 0.7591943 0.6533281 0.7212534 0.7202619 0.7193463\n원주   0.8140140 0.7470349 0.7367868 0.6706000 0.7940990 0.7931988 0.7567017\n의령군 0.7482024 0.8586170 0.8799885 0.7668327 0.8383795 0.8297413 0.9122636\n인천   0.7528825 0.7408405 0.6909296 0.6769771 0.7819980 0.7702349 0.7411685\n전주   0.7559655 0.8532850 0.7884779 0.7517062 0.9090750 0.9179114 0.8453850\n제주   0.6288149 0.8025710 0.7278624 0.8944810 0.7713076 0.7571275 0.7723644\n진주   0.7360999 0.8707244 0.8665368 0.7781282 0.8413993 0.8361220 0.9289161\n창원   0.7359527 0.8550384 0.8796000 0.7711443 0.8308083 0.8192160 0.9070658\n철원   0.7613446 0.7099067 0.6728015 0.6511250 0.7463221 0.7376000 0.7094024\n청송군 0.8119685 0.8001702 0.8917156 0.7111140 0.8110318 0.8101408 0.8313951\n청주   0.7906018 0.7990762 0.7691019 0.7160675 0.8455261 0.8479594 0.8049821\n추풍령 0.7994430 0.8366508 0.8551957 0.7404377 0.8598107 0.8605002 0.8527017\n춘천   0.7901031 0.7224999 0.6979233 0.6616856 0.7671444 0.7562610 0.7326951\n포항   0.7800426 0.7743982 0.9299494 0.6950692 0.7746035 0.7687438 0.8202247\n함양군 0.7573195 0.8647581 0.8575342 0.7611798 0.8670402 0.8639479 0.8876091\n홍성   0.7739988 0.7936477 0.7400062 0.7120808 0.8396157 0.8379117 0.7897796\n흑산도 0.6521117 0.8186882 0.7064828 0.7694346 0.8178804 0.7992953 0.7803099\n            광주    김해시    대관령      대구      대전      목포    백령도\n강릉   0.7170920 0.7300587 0.9096524 0.7819328 0.7877771 0.7089408 0.6416767\n강진군 0.8914366 0.8298323 0.7151957 0.8349168 0.8254926 0.9132795 0.6633466\n경주시 0.7876565 0.8884789 0.7830542 0.9057791 0.7894997 0.7733647 0.5821691\n고산   0.7827690 0.7437849 0.6468294 0.7419595 0.7319483 0.8247665 0.6347485\n고창   0.9146688 0.8087741 0.7392306 0.8402181 0.8703778 0.9118592 0.6769029\n고창군 0.9194130 0.8033153 0.7430812 0.8374690 0.8717858 0.8988462 0.6643130\n광양시 0.8646192 0.8822539 0.7428423 0.8696729 0.8306825 0.8636433 0.6525396\n광주   1.0000000 0.8158252 0.7287727 0.8403959 0.8495617 0.8965627 0.6407831\n김해시 0.8158252 1.0000000 0.7453142 0.8887980 0.7995963 0.8046722 0.6070276\n대관령 0.7287727 0.7453142 1.0000000 0.7979967 0.8065325 0.7187562 0.6486741\n대구   0.8403959 0.8887980 0.7979967 1.0000000 0.8506620 0.8210361 0.6376003\n대전   0.8495617 0.7995963 0.8065325 0.8506620 1.0000000 0.8314861 0.6798361\n목포   0.8965627 0.8046722 0.7187562 0.8210361 0.8314861 1.0000000 0.6780046\n백령도 0.6407831 0.6070276 0.6486741 0.6376003 0.6798361 0.6780046 1.0000000\n보성군 0.8845403 0.8600309 0.7327299 0.8569582 0.8299595 0.8942154 0.6569948\n부산   0.8135183 0.9416264 0.7442714 0.8808684 0.7944530 0.8090207 0.6050058\n북강릉 0.7254612 0.7381310 0.9101192 0.7919992 0.7953191 0.7153731 0.6528630\n북창원 0.8291321 0.9478310 0.7446947 0.8916729 0.8034837 0.8140079 0.6083347\n북춘천 0.7252158 0.7024307 0.8228481 0.7529493 0.8213730 0.7268557 0.7488592\n서산   0.7879468 0.7305079 0.7799326 0.7733257 0.8704259 0.7968942 0.7699792\n서울   0.7339461 0.6916416 0.7758534 0.7310587 0.8213377 0.7271795 0.7578969\n수원   0.7737683 0.7260335 0.8012578 0.7700634 0.8652538 0.7720480 0.7594207\n순창군 0.9272002 0.8289053 0.7593288 0.8619748 0.8794022 0.8893603 0.6721664\n안동   0.8283607 0.8429188 0.8384814 0.8925808 0.8807708 0.8055843 0.6524766\n양산시 0.8177595 0.9521355 0.7577321 0.8970682 0.8062842 0.8069924 0.6097318\n여수   0.8493501 0.8819975 0.7367787 0.8583893 0.8134349 0.8548388 0.6442821\n영광군 0.9057378 0.7998990 0.7304388 0.8286563 0.8597324 0.9188443 0.6817800\n울릉도 0.7132909 0.7400635 0.7387259 0.7683306 0.7448819 0.7094023 0.5787507\n원주   0.7708492 0.7337471 0.8453858 0.7896731 0.8717413 0.7559130 0.6905395\n의령군 0.8420095 0.9095451 0.7554448 0.9060476 0.8269171 0.8389763 0.6318475\n인천   0.7447416 0.7045141 0.7703520 0.7412998 0.8222485 0.7609958 0.8040668\n전주   0.8888634 0.8112366 0.7722900 0.8523081 0.9133086 0.8622079 0.6592059\n제주   0.7596200 0.7419911 0.6407150 0.7406006 0.7082283 0.8051050 0.6046135\n진주   0.8525976 0.9057840 0.7510854 0.8919844 0.8243969 0.8485560 0.6387758\n창원   0.8314682 0.9390908 0.7502029 0.8896739 0.8128315 0.8293878 0.6228163\n철원   0.7141419 0.6791410 0.7858886 0.7253687 0.7919180 0.7195667 0.7786030\n청송군 0.8116415 0.8518849 0.8355435 0.9033966 0.8409124 0.7873538 0.6156391\n청주   0.8225686 0.7730950 0.8121126 0.8217519 0.9340775 0.8073679 0.6890909\n추풍령 0.8482247 0.8438536 0.8160104 0.9001672 0.8990270 0.8302442 0.6497277\n춘천   0.7305449 0.7020522 0.8162753 0.7528873 0.8238574 0.7337111 0.7573548\n포항   0.7778093 0.8596690 0.7870301 0.8946346 0.7903350 0.7591535 0.5899988\n함양군 0.8701505 0.8646009 0.7805615 0.9048076 0.8635005 0.8491819 0.6557867\n홍성   0.8075240 0.7518216 0.7897041 0.7956803 0.8969670 0.8068467 0.7400695\n흑산도 0.7870179 0.7320231 0.6528066 0.7385520 0.7535020 0.8404021 0.6941095\n          보성군      부산    북강릉    북창원    북춘천      서산      서울\n강릉   0.7255909 0.7257286 0.9679702 0.7343323 0.7934575 0.7602535 0.7497483\n강진군 0.9352029 0.8372601 0.7130858 0.8400905 0.7164055 0.7739392 0.7169152\n경주시 0.8147853 0.8794130 0.7787018 0.8902254 0.6997703 0.7187583 0.6754826\n고산   0.8078128 0.7617967 0.6373739 0.7544385 0.6530018 0.7145626 0.6466854\n고창   0.8760113 0.8139354 0.7346559 0.8178678 0.7611288 0.8221190 0.7611490\n고창군 0.8668396 0.8044084 0.7357016 0.8134796 0.7533824 0.8170089 0.7564272\n광양시 0.9300403 0.8836403 0.7335184 0.8933071 0.7298274 0.7726253 0.7202050\n광주   0.8845403 0.8135183 0.7254612 0.8291321 0.7252158 0.7879468 0.7339461\n김해시 0.8600309 0.9416264 0.7381310 0.9478310 0.7024307 0.7305079 0.6916416\n대관령 0.7327299 0.7442714 0.9101192 0.7446947 0.8228481 0.7799326 0.7758534\n대구   0.8569582 0.8808684 0.7919992 0.8916729 0.7529493 0.7733257 0.7310587\n대전   0.8299595 0.7944530 0.7953191 0.8034837 0.8213730 0.8704259 0.8213377\n목포   0.8942154 0.8090207 0.7153731 0.8140079 0.7268557 0.7968942 0.7271795\n백령도 0.6569948 0.6050058 0.6528630 0.6083347 0.7488592 0.7699792 0.7578969\n보성군 1.0000000 0.8653985 0.7314723 0.8705693 0.7214366 0.7724279 0.7120614\n부산   0.8653985 1.0000000 0.7360026 0.9244689 0.7053734 0.7304751 0.6877386\n북강릉 0.7314723 0.7360026 1.0000000 0.7398839 0.8043851 0.7695153 0.7591225\n북창원 0.8705693 0.9244689 0.7398839 1.0000000 0.7014921 0.7345072 0.6953645\n북춘천 0.7214366 0.7053734 0.8043851 0.7014921 1.0000000 0.8464304 0.8880320\n서산   0.7724279 0.7304751 0.7695153 0.7345072 0.8464304 1.0000000 0.8712843\n서울   0.7120614 0.6877386 0.7591225 0.6953645 0.8880320 0.8712843 1.0000000\n수원   0.7561238 0.7237300 0.7878541 0.7301601 0.8852839 0.9103966 0.9294995\n순창군 0.8942576 0.8320893 0.7552090 0.8391475 0.7614330 0.8123020 0.7569485\n안동   0.8300610 0.8337583 0.8292302 0.8440515 0.8065327 0.8132446 0.7781851\n양산시 0.8585161 0.9411281 0.7512068 0.9362627 0.7165714 0.7385374 0.6980767\n여수   0.9260953 0.8928121 0.7257559 0.8905387 0.7162523 0.7568196 0.7044715\n영광군 0.8700168 0.8028268 0.7281906 0.8095866 0.7482024 0.8202048 0.7523703\n울릉도 0.7099740 0.7471160 0.7369568 0.7435075 0.7046652 0.7065594 0.6669393\n원주   0.7523637 0.7330975 0.8201516 0.7353742 0.8893776 0.8609313 0.8716929\n의령군 0.8928065 0.9020603 0.7543172 0.9237839 0.7274792 0.7574265 0.7079273\n인천   0.7437245 0.7054006 0.7634885 0.7061770 0.8776439 0.9001509 0.9251643\n전주   0.8502945 0.8077149 0.7640608 0.8173279 0.7769179 0.8383011 0.7811974\n제주   0.7959999 0.7647027 0.6343205 0.7553778 0.6176302 0.6668662 0.5969400\n진주   0.9057814 0.9008628 0.7426414 0.9217478 0.7172328 0.7602648 0.7066561\n창원   0.8864386 0.9321884 0.7449116 0.9553970 0.7199012 0.7514318 0.6986658\n철원   0.7072997 0.6818365 0.7730390 0.6789079 0.9255283 0.8408882 0.8933250\n청송군 0.8164553 0.8458486 0.8175297 0.8546239 0.7650954 0.7701954 0.7380262\n청주   0.7994026 0.7665014 0.7982529 0.7769299 0.8385112 0.8855845 0.8415998\n추풍령 0.8496216 0.8397673 0.8059089 0.8475369 0.7835218 0.8120067 0.7664872\n춘천   0.7274171 0.7070234 0.8031310 0.7027904 0.9731768 0.8471127 0.8912841\n포항   0.8008197 0.8636413 0.7878648 0.8658308 0.7105419 0.7226261 0.6859115\n함양군 0.8869784 0.8606665 0.7627671 0.8766537 0.7485743 0.7891970 0.7329445\n홍성   0.7928560 0.7478028 0.7820003 0.7557474 0.8345775 0.9434424 0.8540948\n흑산도 0.8049325 0.7432957 0.6578724 0.7381646 0.6802003 0.7603084 0.6815248\n            수원    순창군      안동    양산시      여수    영광군    울릉도\n강릉   0.7783023 0.7477589 0.8229087 0.7420517 0.7224022 0.7199346 0.7249746\n강진군 0.7568028 0.8975007 0.8124436 0.8297895 0.8869236 0.8802219 0.7068337\n경주시 0.7172262 0.8024646 0.8620901 0.8982046 0.8229676 0.7709653 0.7591943\n고산   0.6803819 0.7772885 0.7209146 0.7489133 0.8053798 0.7998266 0.6533281\n고창   0.8051685 0.9201761 0.8361734 0.8166139 0.8417374 0.9641461 0.7212534\n고창군 0.7995755 0.9223830 0.8326433 0.8102864 0.8333109 0.9451684 0.7202619\n광양시 0.7589846 0.8847395 0.8380486 0.8794260 0.9373270 0.8482541 0.7193463\n광주   0.7737683 0.9272002 0.8283607 0.8177595 0.8493501 0.9057378 0.7132909\n김해시 0.7260335 0.8289053 0.8429188 0.9521355 0.8819975 0.7998990 0.7400635\n대관령 0.8012578 0.7593288 0.8384814 0.7577321 0.7367787 0.7304388 0.7387259\n대구   0.7700634 0.8619748 0.8925808 0.8970682 0.8583893 0.8286563 0.7683306\n대전   0.8652538 0.8794022 0.8807708 0.8062842 0.8134349 0.8597324 0.7448819\n목포   0.7720480 0.8893603 0.8055843 0.8069924 0.8548388 0.9188443 0.7094023\n백령도 0.7594207 0.6721664 0.6524766 0.6097318 0.6442821 0.6817800 0.5787507\n보성군 0.7561238 0.8942576 0.8300610 0.8585161 0.9260953 0.8700168 0.7099740\n부산   0.7237300 0.8320893 0.8337583 0.9411281 0.8928121 0.8028268 0.7471160\n북강릉 0.7878541 0.7552090 0.8292302 0.7512068 0.7257559 0.7281906 0.7369568\n북창원 0.7301601 0.8391475 0.8440515 0.9362627 0.8905387 0.8095866 0.7435075\n북춘천 0.8852839 0.7614330 0.8065327 0.7165714 0.7162523 0.7482024 0.7046652\n서산   0.9103966 0.8123020 0.8132446 0.7385374 0.7568196 0.8202048 0.7065594\n서울   0.9294995 0.7569485 0.7781851 0.6980767 0.7044715 0.7523703 0.6669393\n수원   1.0000000 0.7963496 0.8152007 0.7325813 0.7450592 0.7978568 0.7018066\n순창군 0.7963496 1.0000000 0.8571997 0.8384777 0.8624229 0.9055046 0.7358091\n안동   0.8152007 0.8571997 1.0000000 0.8492824 0.8257826 0.8247471 0.7778509\n양산시 0.7325813 0.8384777 0.8492824 1.0000000 0.8788297 0.8068656 0.7520630\n여수   0.7450592 0.8624229 0.8257826 0.8788297 1.0000000 0.8369935 0.7083689\n영광군 0.7978568 0.9055046 0.8247471 0.8068656 0.8369935 1.0000000 0.7240009\n울릉도 0.7018066 0.7358091 0.7778509 0.7520630 0.7083689 0.7240009 1.0000000\n원주   0.8932862 0.7995618 0.8543312 0.7450469 0.7404038 0.7818861 0.7275374\n의령군 0.7498167 0.8660499 0.8546061 0.9093550 0.9069745 0.8311861 0.7416053\n인천   0.9277949 0.7722378 0.7820094 0.7111549 0.7312228 0.7794496 0.6793449\n전주   0.8245585 0.9059995 0.8588714 0.8154674 0.8271208 0.8955517 0.7351030\n제주   0.6397318 0.7616506 0.7110714 0.7488517 0.7885493 0.7795366 0.6754414\n진주   0.7474439 0.8691255 0.8473833 0.8990435 0.9184982 0.8375318 0.7309659\n창원   0.7378704 0.8515362 0.8480343 0.9309611 0.9077339 0.8219253 0.7501301\n철원   0.8798808 0.7417757 0.7699446 0.6935911 0.6957997 0.7361521 0.6830782\n청송군 0.7706801 0.8376779 0.9264677 0.8601384 0.8210849 0.7987202 0.7721911\n청주   0.8834187 0.8540764 0.8672225 0.7796850 0.7861436 0.8368720 0.7466784\n추풍령 0.8084938 0.8841590 0.9119007 0.8518558 0.8362716 0.8477300 0.7629999\n춘천   0.8895352 0.7683245 0.8092655 0.7175429 0.7194752 0.7534400 0.7044135\n포항   0.7217079 0.7999456 0.8637574 0.8797223 0.8139715 0.7668033 0.7646536\n함양군 0.7766888 0.9041378 0.8747375 0.8710237 0.8771199 0.8562663 0.7440533\n홍성   0.9031126 0.8320726 0.8342946 0.7598523 0.7731670 0.8341619 0.7174028\n흑산도 0.7291019 0.7936983 0.7299876 0.7391625 0.7747905 0.8281585 0.6667363\n            원주    의령군      인천      전주      제주      진주      창원\n강릉   0.8140140 0.7482024 0.7528825 0.7559655 0.6288149 0.7360999 0.7359527\n강진군 0.7470349 0.8586170 0.7408405 0.8532850 0.8025710 0.8707244 0.8550384\n경주시 0.7367868 0.8799885 0.6909296 0.7884779 0.7278624 0.8665368 0.8796000\n고산   0.6706000 0.7668327 0.6769771 0.7517062 0.8944810 0.7781282 0.7711443\n고창   0.7940990 0.8383795 0.7819980 0.9090750 0.7713076 0.8413993 0.8308083\n고창군 0.7931988 0.8297413 0.7702349 0.9179114 0.7571275 0.8361220 0.8192160\n광양시 0.7567017 0.9122636 0.7411685 0.8453850 0.7723644 0.9289161 0.9070658\n광주   0.7708492 0.8420095 0.7447416 0.8888634 0.7596200 0.8525976 0.8314682\n김해시 0.7337471 0.9095451 0.7045141 0.8112366 0.7419911 0.9057840 0.9390908\n대관령 0.8453858 0.7554448 0.7703520 0.7722900 0.6407150 0.7510854 0.7502029\n대구   0.7896731 0.9060476 0.7412998 0.8523081 0.7406006 0.8919844 0.8896739\n대전   0.8717413 0.8269171 0.8222485 0.9133086 0.7082283 0.8243969 0.8128315\n목포   0.7559130 0.8389763 0.7609958 0.8622079 0.8051050 0.8485560 0.8293878\n백령도 0.6905395 0.6318475 0.8040668 0.6592059 0.6046135 0.6387758 0.6228163\n보성군 0.7523637 0.8928065 0.7437245 0.8502945 0.7959999 0.9057814 0.8864386\n부산   0.7330975 0.9020603 0.7054006 0.8077149 0.7647027 0.9008628 0.9321884\n북강릉 0.8201516 0.7543172 0.7634885 0.7640608 0.6343205 0.7426414 0.7449116\n북창원 0.7353742 0.9237839 0.7061770 0.8173279 0.7553778 0.9217478 0.9553970\n북춘천 0.8893776 0.7274792 0.8776439 0.7769179 0.6176302 0.7172328 0.7199012\n서산   0.8609313 0.7574265 0.9001509 0.8383011 0.6668662 0.7602648 0.7514318\n서울   0.8716929 0.7079273 0.9251643 0.7811974 0.5969400 0.7066561 0.6986658\n수원   0.8932862 0.7498167 0.9277949 0.8245585 0.6397318 0.7474439 0.7378704\n순창군 0.7995618 0.8660499 0.7722378 0.9059995 0.7616506 0.8691255 0.8515362\n안동   0.8543312 0.8546061 0.7820094 0.8588714 0.7110714 0.8473833 0.8480343\n양산시 0.7450469 0.9093550 0.7111549 0.8154674 0.7488517 0.8990435 0.9309611\n여수   0.7404038 0.9069745 0.7312228 0.8271208 0.7885493 0.9184982 0.9077339\n영광군 0.7818861 0.8311861 0.7794496 0.8955517 0.7795366 0.8375318 0.8219253\n울릉도 0.7275374 0.7416053 0.6793449 0.7351030 0.6754414 0.7309659 0.7501301\n원주   1.0000000 0.7577556 0.8514177 0.8337043 0.6416255 0.7484442 0.7474502\n의령군 0.7577556 1.0000000 0.7300582 0.8351702 0.7619990 0.9462497 0.9355706\n인천   0.8514177 0.7300582 1.0000000 0.7847122 0.6334885 0.7307739 0.7243945\n전주   0.8337043 0.8351702 0.7847122 1.0000000 0.7276156 0.8384768 0.8222323\n제주   0.6416255 0.7619990 0.6334885 0.7276156 1.0000000 0.7731759 0.7730517\n진주   0.7484442 0.9462497 0.7307739 0.8384768 0.7731759 1.0000000 0.9325524\n창원   0.7474502 0.9355706 0.7243945 0.8222323 0.7730517 0.9325524 1.0000000\n철원   0.8634073 0.6982029 0.8874605 0.7560478 0.6132508 0.6922773 0.6958414\n청송군 0.8102739 0.8580750 0.7407527 0.8302317 0.7115593 0.8479342 0.8533791\n청주   0.8911557 0.7962606 0.8365598 0.8843604 0.6859250 0.7954768 0.7876874\n추풍령 0.8339665 0.8649878 0.7770587 0.8886191 0.7341553 0.8611533 0.8539492\n춘천   0.8887503 0.7304621 0.8839953 0.7780728 0.6258659 0.7205106 0.7222870\n포항   0.7470316 0.8650930 0.6997455 0.7838372 0.7128223 0.8506123 0.8611485\n함양군 0.7852669 0.9035722 0.7567638 0.8767203 0.7625222 0.9016603 0.8816933\n홍성   0.8600133 0.7780833 0.8718450 0.8638290 0.6740860 0.7773982 0.7699036\n흑산도 0.6964196 0.7585652 0.7266833 0.7716874 0.7560648 0.7680741 0.7599527\n            철원    청송군      청주    추풍령      춘천      포항    함양군\n강릉   0.7613446 0.8119685 0.7906018 0.7994430 0.7901031 0.7800426 0.7573195\n강진군 0.7099067 0.8001702 0.7990762 0.8366508 0.7224999 0.7743982 0.8647581\n경주시 0.6728015 0.8917156 0.7691019 0.8551957 0.6979233 0.9299494 0.8575342\n고산   0.6511250 0.7111140 0.7160675 0.7404377 0.6616856 0.6950692 0.7611798\n고창   0.7463221 0.8110318 0.8455261 0.8598107 0.7671444 0.7746035 0.8670402\n고창군 0.7376000 0.8101408 0.8479594 0.8605002 0.7562610 0.7687438 0.8639479\n광양시 0.7094024 0.8313951 0.8049821 0.8527017 0.7326951 0.8202247 0.8876091\n광주   0.7141419 0.8116415 0.8225686 0.8482247 0.7305449 0.7778093 0.8701505\n김해시 0.6791410 0.8518849 0.7730950 0.8438536 0.7020522 0.8596690 0.8646009\n대관령 0.7858886 0.8355435 0.8121126 0.8160104 0.8162753 0.7870301 0.7805615\n대구   0.7253687 0.9033966 0.8217519 0.9001672 0.7528873 0.8946346 0.9048076\n대전   0.7919180 0.8409124 0.9340775 0.8990270 0.8238574 0.7903350 0.8635005\n목포   0.7195667 0.7873538 0.8073679 0.8302442 0.7337111 0.7591535 0.8491819\n백령도 0.7786030 0.6156391 0.6890909 0.6497277 0.7573548 0.5899988 0.6557867\n보성군 0.7072997 0.8164553 0.7994026 0.8496216 0.7274171 0.8008197 0.8869784\n부산   0.6818365 0.8458486 0.7665014 0.8397673 0.7070234 0.8636413 0.8606665\n북강릉 0.7730390 0.8175297 0.7982529 0.8059089 0.8031310 0.7878648 0.7627671\n북창원 0.6789079 0.8546239 0.7769299 0.8475369 0.7027904 0.8658308 0.8766537\n북춘천 0.9255283 0.7650954 0.8385112 0.7835218 0.9731768 0.7105419 0.7485743\n서산   0.8408882 0.7701954 0.8855845 0.8120067 0.8471127 0.7226261 0.7891970\n서울   0.8933250 0.7380262 0.8415998 0.7664872 0.8912841 0.6859115 0.7329445\n수원   0.8798808 0.7706801 0.8834187 0.8084938 0.8895352 0.7217079 0.7766888\n순창군 0.7417757 0.8376779 0.8540764 0.8841590 0.7683245 0.7999456 0.9041378\n안동   0.7699446 0.9264677 0.8672225 0.9119007 0.8092655 0.8637574 0.8747375\n양산시 0.6935911 0.8601384 0.7796850 0.8518558 0.7175429 0.8797223 0.8710237\n여수   0.6957997 0.8210849 0.7861436 0.8362716 0.7194752 0.8139715 0.8771199\n영광군 0.7361521 0.7987202 0.8368720 0.8477300 0.7534400 0.7668033 0.8562663\n울릉도 0.6830782 0.7721911 0.7466784 0.7629999 0.7044135 0.7646536 0.7440533\n원주   0.8634073 0.8102739 0.8911557 0.8339665 0.8887503 0.7470316 0.7852669\n의령군 0.6982029 0.8580750 0.7962606 0.8649878 0.7304621 0.8650930 0.9035722\n인천   0.8874605 0.7407527 0.8365598 0.7770587 0.8839953 0.6997455 0.7567638\n전주   0.7560478 0.8302317 0.8843604 0.8886191 0.7780728 0.7838372 0.8767203\n제주   0.6132508 0.7115593 0.6859250 0.7341553 0.6258659 0.7128223 0.7625222\n진주   0.6922773 0.8479342 0.7954768 0.8611533 0.7205106 0.8506123 0.9016603\n창원   0.6958414 0.8533791 0.7876874 0.8539492 0.7222870 0.8611485 0.8816933\n철원   1.0000000 0.7343021 0.8133196 0.7573181 0.9232183 0.6811928 0.7266237\n청송군 0.7343021 1.0000000 0.8260340 0.8971555 0.7659701 0.8941903 0.8691234\n청주   0.8133196 0.8260340 1.0000000 0.8773984 0.8408750 0.7681914 0.8314643\n추풍령 0.7573181 0.8971555 0.8773984 1.0000000 0.7862335 0.8528547 0.9021148\n춘천   0.9232183 0.7659701 0.8408750 0.7862335 1.0000000 0.7134771 0.7513840\n포항   0.6811928 0.8941903 0.7681914 0.8528547 0.7134771 1.0000000 0.8442816\n함양군 0.7266237 0.8691234 0.8314643 0.9021148 0.7513840 0.8442816 1.0000000\n홍성   0.8196972 0.7909038 0.9026294 0.8342819 0.8404144 0.7409981 0.8102419\n흑산도 0.6798892 0.7072905 0.7423761 0.7510629 0.6921622 0.6976962 0.7705203\n            홍성    흑산도\n강릉   0.7739988 0.6521117\n강진군 0.7936477 0.8186882\n경주시 0.7400062 0.7064828\n고산   0.7120808 0.7694346\n고창   0.8396157 0.8178804\n고창군 0.8379117 0.7992953\n광양시 0.7897796 0.7803099\n광주   0.8075240 0.7870179\n김해시 0.7518216 0.7320231\n대관령 0.7897041 0.6528066\n대구   0.7956803 0.7385520\n대전   0.8969670 0.7535020\n목포   0.8068467 0.8404021\n백령도 0.7400695 0.6941095\n보성군 0.7928560 0.8049325\n부산   0.7478028 0.7432957\n북강릉 0.7820003 0.6578724\n북창원 0.7557474 0.7381646\n북춘천 0.8345775 0.6802003\n서산   0.9434424 0.7603084\n서울   0.8540948 0.6815248\n수원   0.9031126 0.7291019\n순창군 0.8320726 0.7936983\n안동   0.8342946 0.7299876\n양산시 0.7598523 0.7391625\n여수   0.7731670 0.7747905\n영광군 0.8341619 0.8281585\n울릉도 0.7174028 0.6667363\n원주   0.8600133 0.6964196\n의령군 0.7780833 0.7585652\n인천   0.8718450 0.7266833\n전주   0.8638290 0.7716874\n제주   0.6740860 0.7560648\n진주   0.7773982 0.7680741\n창원   0.7699036 0.7599527\n철원   0.8196972 0.6798892\n청송군 0.7909038 0.7072905\n청주   0.9026294 0.7423761\n추풍령 0.8342819 0.7510629\n춘천   0.8404144 0.6921622\n포항   0.7409981 0.6976962\n함양군 0.8102419 0.7705203\n홍성   1.0000000 0.7597044\n흑산도 0.7597044 1.0000000\n\n\n\ncorrplot(round(weight,2), method = 'number')\n\n\n\n\n\nwrite.csv(df1, './data/restructuring_prep_data.csv', row.names = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n요인\n제곱합\n자유도\n평균제곱\n\\(F_0\\)\n유의확률\n\n\n\n\n회귀\n\\(SSR\\)\n\\(1\\)\n\\(MSR = \\frac{SSR}{1}\\)\n\\(\\frac{MSR}{MSE}\\)\n\\(P(F\\geq F_0)\\)\n\n\n잔차\n\\(SSE\\)\n\\(n-1\\)\n\\(MSE=\\frac{SSE}{n-1}\\)\n\n\n\n\n계\n\\(SST\\)\n\\(n\\)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-08-solar-stgcn-ver2-lag4.html",
    "href": "posts/SOLAR/2023-04-08-solar-stgcn-ver2-lag4.html",
    "title": "[SOLAR] STGCN Ver2 lag4",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport json\nimport urllib\n\nimport matplotlib.pyplot as plt\nimport time\n\n\n# 일반적인 모듈 \nimport numpy as np\nimport matplotlib.pyplot as plt \nimport networkx as nx \nfrom tqdm import tqdm \n\n# 파이토치 관련 \nimport torch\nimport torch.nn.functional as F\n\n# PyG 관련 \nfrom torch_geometric.data import Data ## Data: 그래프자료형을 만드는 클래스\n\n# STGCN 관련 \nimport torch_geometric_temporal\nfrom torch_geometric_temporal.nn.recurrent import GConvGRU\nfrom torch_geometric_temporal.signal import temporal_signal_split \n\n\nclass RecurrentGCN(torch.nn.Module):\n    def __init__(self, node_features, filters):\n        super(RecurrentGCN, self).__init__()\n        self.recurrent = GConvGRU(node_features, filters, 2)\n        self.linear = torch.nn.Linear(filters, 1)\n\n    def forward(self, x, edge_index, edge_weight):\n        h = self.recurrent(x, edge_index, edge_weight)\n        h = F.relu(h)\n        h = self.linear(h)\n        return h\n\n\nfrom mysolar import SolarEPTDatasetLoader\n\n\nloader = SolarEPTDatasetLoader()\ndataset = loader.get_dataset(lags=4)\ntrain_dataset, test_dataset = temporal_signal_split(dataset, train_ratio=0.8)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-08-solar-stgcn-ver2-lag4.html#learn",
    "href": "posts/SOLAR/2023-04-08-solar-stgcn-ver2-lag4.html#learn",
    "title": "[SOLAR] STGCN Ver2 lag4",
    "section": "Learn",
    "text": "Learn\n\nmodel = RecurrentGCN(node_features=4, filters=32)\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\nmodel.train()\n\nRecurrentGCN(\n  (recurrent): GConvGRU(\n    (conv_x_z): ChebConv(4, 32, K=2, normalization=sym)\n    (conv_h_z): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_r): ChebConv(4, 32, K=2, normalization=sym)\n    (conv_h_r): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_h): ChebConv(4, 32, K=2, normalization=sym)\n    (conv_h_h): ChebConv(32, 32, K=2, normalization=sym)\n  )\n  (linear): Linear(in_features=32, out_features=1, bias=True)\n)\n\n\n\n# start = time.time()\n# for epoch in tqdm(range(50)):\n#     for t, snapshot in enumerate(train_dataset):\n#         yt_hat = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n#         cost = torch.mean((yt_hat-snapshot.y)**2)\n#         cost.backward()\n#         optimizer.step()\n#         optimizer.zero_grad()\n# end = time.time()\n# print(f\"{end-start:.5f} sec\")\n\n100%|█████████████████████████████████████████████████████████████████| 50/50 [40:30<00:00, 48.61s/it]\n\n\n2430.25206 sec\n\n\n\n\n\n\nimport pickle \nwith open('stgcn2.pickle','wb') as fw:\n    pickle.dump(model, fw)\n\n\nimport pickle \nwith open('stgcn2.pickle', 'rb') as f: \n    model = pickle.load(f)\n\n\nmodel\n\nRecurrentGCN(\n  (recurrent): GConvGRU(\n    (conv_x_z): ChebConv(4, 32, K=2, normalization=sym)\n    (conv_h_z): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_r): ChebConv(4, 32, K=2, normalization=sym)\n    (conv_h_r): ChebConv(32, 32, K=2, normalization=sym)\n    (conv_x_h): ChebConv(4, 32, K=2, normalization=sym)\n    (conv_h_h): ChebConv(32, 32, K=2, normalization=sym)\n  )\n  (linear): Linear(in_features=32, out_features=1, bias=True)\n)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-08-solar-stgcn-ver2-lag4.html#모델평가",
    "href": "posts/SOLAR/2023-04-08-solar-stgcn-ver2-lag4.html#모델평가",
    "title": "[SOLAR] STGCN Ver2 lag4",
    "section": "모델평가",
    "text": "모델평가\n\nmodel.eval()\ncost = 0\nfor time, snapshot in enumerate(train_dataset):\n    y_hat = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n    cost = cost + torch.mean((y_hat-snapshot.y)**2)\ncost = cost / (time+1)\ncost = cost.item()\nprint(\"MSE: {:.4f}\".format(cost))\n\nMSE: 0.1069\n\n\n\nmodel.eval()\ncost = 0\nfor time, snapshot in enumerate(test_dataset):\n    y_hat = model(snapshot.x, snapshot.edge_index, snapshot.edge_attr)\n    cost = cost + torch.mean((y_hat-snapshot.y)**2)\ncost = cost / (time+1)\ncost = cost.item()\nprint(\"MSE: {:.4f}\".format(cost))\n\nMSE: 0.0938"
  },
  {
    "objectID": "posts/SOLAR/2023-04-08-solar-stgcn-ver2-lag4.html#visualization",
    "href": "posts/SOLAR/2023-04-08-solar-stgcn-ver2-lag4.html#visualization",
    "title": "[SOLAR] STGCN Ver2 lag4",
    "section": "Visualization",
    "text": "Visualization\n\nyhat_train = torch.stack([model(snapshot.x,snapshot.edge_index, snapshot.edge_attr) for snapshot in train_dataset]).detach().numpy()\nyhat_test = torch.stack([model(snapshot.x,snapshot.edge_index, snapshot.edge_attr) for snapshot in test_dataset]).detach().numpy()\n\n\nyhat_train.shape\n\n(14596, 44, 1)\n\n\n\nf.shape\n\n(18250, 44)\n\n\n\ntime\n\n14595\n\n\n\ndf = pd.read_csv(\"./data/solar_radiation.csv\")\n\n\ndf['date'][0]>= '2021-01-01-00:00'\n\nTrue\n\n\n\ndf.region.unique()\n\narray(['북춘천', '철원', '대관령', '춘천', '백령도', '북강릉', '강릉', '서울', '인천', '원주',\n       '울릉도', '수원', '서산', '청주', '대전', '추풍령', '안동', '포항', '대구', '전주', '창원',\n       '광주', '부산', '목포', '여수', '흑산도', '고창', '홍성', '제주', '고산', '진주', '고창군',\n       '영광군', '김해시', '순창군', '북창원', '양산시', '보성군', '강진군', '의령군', '함양군',\n       '광양시', '청송군', '경주시'], dtype=object)\n\n\n\nreg=['부산','창원','김해시','서울','인천','울릉도','고창','포항','대구','창원','북창원']\nreg2=['부산','김해시','서울','인천']\n\n\ndf.query(\"date >= '2022-07-01-01:00' and date <= '2022-07-20-23:00' and region in @reg2\").drop_duplicates()\\\n.plot(backend='plotly',x='date',y='solar_radiation',color='region')"
  },
  {
    "objectID": "posts/SOLAR/2023-04-08-solar-stgcn-ver2-lag4.html#월-8월15-8월15-9월15",
    "href": "posts/SOLAR/2023-04-08-solar-stgcn-ver2-lag4.html#월-8월15-8월15-9월15",
    "title": "[SOLAR] STGCN Ver2 lag4",
    "section": "6월-8월15 // 8월15 ~9월15",
    "text": "6월-8월15 // 8월15 ~9월15\n\ndf.query(\"date >= '2022-09-01-01:00' and date <= '2022-09-01-23:00' and ( region=='부산')\").drop_duplicates()\n\n\n\n\n\n  \n    \n      \n      region\n      solar_radiation\n      date\n    \n  \n  \n    \n      416701\n      부산\n      0.00\n      2022-09-01-01:00\n    \n    \n      416702\n      부산\n      0.00\n      2022-09-01-02:00\n    \n    \n      416703\n      부산\n      0.00\n      2022-09-01-03:00\n    \n    \n      416704\n      부산\n      0.00\n      2022-09-01-04:00\n    \n    \n      416705\n      부산\n      0.00\n      2022-09-01-05:00\n    \n    \n      416706\n      부산\n      0.00\n      2022-09-01-06:00\n    \n    \n      416707\n      부산\n      0.11\n      2022-09-01-07:00\n    \n    \n      416708\n      부산\n      0.44\n      2022-09-01-08:00\n    \n    \n      416709\n      부산\n      0.48\n      2022-09-01-09:00\n    \n    \n      416710\n      부산\n      0.29\n      2022-09-01-10:00\n    \n    \n      416711\n      부산\n      0.50\n      2022-09-01-11:00\n    \n    \n      416712\n      부산\n      0.35\n      2022-09-01-12:00\n    \n    \n      416713\n      부산\n      0.35\n      2022-09-01-13:00\n    \n    \n      416714\n      부산\n      0.46\n      2022-09-01-14:00\n    \n    \n      416715\n      부산\n      0.64\n      2022-09-01-15:00\n    \n    \n      416716\n      부산\n      0.59\n      2022-09-01-16:00\n    \n    \n      416717\n      부산\n      0.30\n      2022-09-01-17:00\n    \n    \n      416718\n      부산\n      0.18\n      2022-09-01-18:00\n    \n    \n      416719\n      부산\n      0.02\n      2022-09-01-19:00\n    \n    \n      416721\n      부산\n      0.00\n      2022-09-01-20:00\n    \n    \n      416723\n      부산\n      0.00\n      2022-09-01-21:00\n    \n  \n\n\n\n\n\nurl = 'https://raw.githubusercontent.com/pinkocto/noteda/main/posts/SOLAR/data/solar2.json'\n\n\ndata_dict = json.loads(urllib.request.urlopen(url).read())\nV = list(data_dict['node_ids'].keys())\nf = np.array(data_dict[\"FX\"])\n\n\nimport matplotlib.pyplot as plt\nplt.rcParams['font.family'] = 'NanumGothic'\n\n\nfig,ax = plt.subplots(44,1,figsize=(10,50))\nlag= 4 \nT = 100 \nfor k in range(44):\n    ax[k].plot(f[lag:(lag+T),k],'--',alpha=0.5,label='observed')\n#    ax[k].set_title('node: {}'.format(V[k]))\n    ax[k].plot(yhat_train[:T,k],label='predicted (tr)')\n#    ax[k].plot(range(yhat_train.shape[0],yhat_train.shape[0]+yhat_test.shape[0]),yhat_test[:,k],label='predicted (test)')\n    ax[k].legend()\nfig.tight_layout()\n\n# plt.savefig('stgcn-ver2-lag4-vis.png')\n\n\n\n\n\n깃헙 메모리문제(100MB 초과)"
  },
  {
    "objectID": "posts/SOLAR/2023-04-09-lstm-prac.html",
    "href": "posts/SOLAR/2023-04-09-lstm-prac.html",
    "title": "LSTM for Time Series Prediction (연습)",
    "section": "",
    "text": "연습용, LSTM을 사용하여 시계열 예측 신경망 구축\n\n\nlookback이 의미하는바를 정확히 모르겠음.\n\nLet’s see how LSTM can be used to build a time series prediction neural network with an example.\nThe problem you will look at in this post is the international airline passengers prediction problem. This is a problem where, given a year and a month, the task is to predict the number of international airline passengers in units of 1,000. The data ranges from January 1949 to December 1960, or 12 years, with 144 observations.\nIt is a regression problem. That is, given the number of passengers (in unit of 1,000) the recent months, what is the number of passengers the next month. The dataset has only one feature: The number of passengers.\n\n국제 항공사 승객 수(1000명 단위)를 예측하는 문제\n데이터 범위는 1949년 1월부터 1960년 12월까지이며 1달단위로 관측된 데이터이며, 관측치는 \\(144(12\\times 12)\\)개\n\n\n\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\ndf = pd.read_csv('https://raw.githubusercontent.com/jbrownlee/Datasets/master/airline-passengers.csv')\ndf.head()\n\n\n\n\n\n  \n    \n      \n      Month\n      Passengers\n    \n  \n  \n    \n      0\n      1949-01\n      112\n    \n    \n      1\n      1949-02\n      118\n    \n    \n      2\n      1949-03\n      132\n    \n    \n      3\n      1949-04\n      129\n    \n    \n      4\n      1949-05\n      121\n    \n  \n\n\n\n\n\ndf.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 144 entries, 0 to 143\nData columns (total 2 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   Month       144 non-null    object\n 1   Passengers  144 non-null    int64 \ndtypes: int64(1), object(1)\nmemory usage: 2.4+ KB\n\n\n\ntimeseries = df[['Passengers']].values.astype('float32')\n\nplt.plot(timeseries)\nplt.show()\n\n\n\n\nThis time series has 144 time steps. You can see from the plot that there is an upward trend. There are also some periodicity in the dataset that corresponds to the summer holiday period in the northern hemisphere. Usually a time series should be “detrended” to remove the linear trend component and normalized before processing. For simplicity, these are skipped in this projectc\n\n증가하는 추세를 보이지만 여기서는 따로 처리하지 않았음.\n\n\n\n\n\n# train-test split for time series\ntrain_size = int(len(timeseries) * 0.67) # train ratio = 67%\ntest_size = len(timeseries) - train_size\ntrain_size, test_size\n\n(96, 48)\n\n\n\ntrain, test = timeseries[:train_size], timeseries[train_size:]\n\n\ntrain.shape, test.shape\n\n((96, 1), (48, 1))\n\n\n\nimport torch\n\ndef create_dataset(dataset, lookback):\n    \"\"\"Transform a time series into a prediction dataset\n    \n    Args:\n        dataset: A numpy array of time series, first dimension is the time steps\n        lookback: Size of window for prediction\n    \"\"\"\n    X, y = [], []\n    for i in range(len(dataset)-lookback):\n        feature = dataset[i:i+lookback]\n        target = dataset[i+1:i+lookback+1]\n        X.append(feature)\n        y.append(target)\n    return torch.tensor(X), torch.tensor(y)\n\nThis function is designed to apply windows on the time series. It is assumed to predict for one time step into the immediate future. It is designed to convert a time series into a tensor of dimensions (window sample, time steps, features). A time series of time steps can produce roughly windows (because a window can start from any time step as long as the window does not go beyond the boundary of the time series). Within one window, there are multiple consecutive time steps of values. In each time step, there can be multiple features. In this dataset, there is only one.\n\n\n\n\nlookback = 1\nX_train, y_train = create_dataset(train, lookback=lookback)\nX_test, y_test = create_dataset(test, lookback=lookback)\nprint(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)\n\ntorch.Size([95, 1, 1]) torch.Size([95, 1, 1])\ntorch.Size([47, 1, 1]) torch.Size([47, 1, 1])\n\n\n\nX_train[:5]\n\ntensor([[[112.]],\n\n        [[118.]],\n\n        [[132.]],\n\n        [[129.]],\n\n        [[121.]]])\n\n\n\ny_train[:5]\n\ntensor([[[118.]],\n\n        [[132.]],\n\n        [[129.]],\n\n        [[121.]],\n\n        [[135.]]])\n\n\nNow you can build the LSTM model to predict the time series. With lookback=1, it is quite surely that the accuracy would not be good for too little clues to predict. But this is a good example to demonstrate the structure of the LSTM model.\n\n\n\nThe model is created as a class, in which a LSTM layer and a fully-connected layer is used.\n\nimport torch.nn as nn\n \nclass AirModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.lstm = nn.LSTM(input_size=1, hidden_size=50, num_layers=1, batch_first=True)\n        self.linear = nn.Linear(50, 1)\n    def forward(self, x):\n        x, _ = self.lstm(x)\n        x = self.linear(x)\n        return x\n\nThe output of nn.LSTM() is a tuple. The first element is the generated hidden states, one for each time step of the input. The second element is the LSTM cell’s memory and hidden states, which is not used here.\n\n\n\nBecause it is a regression problem, MSE is chosen as the loss function, which is to be minimized by Adam optimizer. In the code below, the PyTorch tensors are combined into a dataset using torch.utils.data.TensorDataset() and batch for training is provided by a DataLoader. The model performance is evaluated once per 100 epochs, on both the trainning set and the test set:\n\nimport numpy as np\nimport torch.optim as optim\nimport torch.utils.data as data\n \nmodel = AirModel()\noptimizer = optim.Adam(model.parameters())\nloss_fn = nn.MSELoss()\nloader = data.DataLoader(data.TensorDataset(X_train, y_train), shuffle=True, batch_size=8)\n \nn_epochs = 2000\nfor epoch in range(n_epochs):\n    model.train()\n    for X_batch, y_batch in loader:\n        y_pred = model(X_batch)\n        loss = loss_fn(y_pred, y_batch)\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n    # Validation\n    if epoch % 100 != 0:\n        continue\n    model.eval()\n    with torch.no_grad():\n        y_pred = model(X_train)\n        train_rmse = np.sqrt(loss_fn(y_pred, y_train))\n        y_pred = model(X_test)\n        test_rmse = np.sqrt(loss_fn(y_pred, y_test))\n    print(\"Epoch %d: train RMSE %.4f, test RMSE %.4f\" % (epoch, train_rmse, test_rmse))\n\nEpoch 0: train RMSE 225.9365, test RMSE 422.3676\nEpoch 100: train RMSE 184.9790, test RMSE 379.4668\nEpoch 200: train RMSE 152.4027, test RMSE 344.3236\nEpoch 300: train RMSE 124.2188, test RMSE 312.2975\nEpoch 400: train RMSE 101.0204, test RMSE 283.2189\nEpoch 500: train RMSE 82.6843, test RMSE 257.0794\nEpoch 600: train RMSE 66.4356, test RMSE 231.9688\nEpoch 700: train RMSE 54.0870, test RMSE 208.9810\nEpoch 800: train RMSE 44.0830, test RMSE 188.2280\nEpoch 900: train RMSE 37.0532, test RMSE 169.9665\nEpoch 1000: train RMSE 32.5043, test RMSE 154.2343\nEpoch 1100: train RMSE 28.9322, test RMSE 141.3780\nEpoch 1200: train RMSE 27.4202, test RMSE 131.0028\nEpoch 1300: train RMSE 25.8251, test RMSE 122.6009\nEpoch 1400: train RMSE 25.7696, test RMSE 116.9653\nEpoch 1500: train RMSE 24.2167, test RMSE 111.3310\nEpoch 1600: train RMSE 24.6531, test RMSE 106.7048\nEpoch 1700: train RMSE 24.3270, test RMSE 103.3886\nEpoch 1800: train RMSE 23.5308, test RMSE 101.1581\nEpoch 1900: train RMSE 23.3630, test RMSE 99.4288\n\n\nAs the dataset is small, the model should be trained for long enough to learn about the pattern. Over these 2000 epochs trained, you should see the RMSE on both training set and test set decreasing:\nIt is expected to see the RMSE of test set is an order of magnitude larger. The RMSE of 100 means the prediction and the actual target would be in average off by 100 in value (i.e., 100,000 passengers in this dataset).\n\nimport matplotlib.pyplot as plt\nplt.rcParams['font.family'] = 'NanumGothic'\n\n\nwith torch.no_grad():\n    # shift train predictions for plotting\n    train_plot = np.ones_like(timeseries) * np.nan\n    y_pred = model(X_train)\n    y_pred = y_pred[:, -1, :]\n    train_plot[lookback:train_size] = model(X_train)[:, -1, :]\n    # shift test predictions for plotting\n    test_plot = np.ones_like(timeseries) * np.nan\n    test_plot[train_size+lookback:len(timeseries)] = model(X_test)[:, -1, :]\n# plot\nplt.plot(timeseries, c='b', label = '실제관측치')\nplt.plot(train_plot, c='r', label = 'train')\nplt.plot(test_plot, c='g', label = 'test')\nplt.legend()\nplt.show()\n\n\n\n\nThe training set is plotted in red while the test set is plotted in green. The blue curve is what the actual data looks like. You can see that the model can fit well to the training set but not very well on the test set.\n\ntraining set 에 대해서는 잘 맞추는 것 같은데 test set에 대해서는 잘 맞추지 못한다.\n\nTying together, below is the complete code, except the parameter lookback is set to 4 this time:\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.utils.data as data\n \ndf = pd.read_csv('https://raw.githubusercontent.com/jbrownlee/Datasets/master/airline-passengers.csv')\ntimeseries = df[[\"Passengers\"]].values.astype('float32')\n \n# train-test split for time series\ntrain_size = int(len(timeseries) * 0.67)\ntest_size = len(timeseries) - train_size\ntrain, test = timeseries[:train_size], timeseries[train_size:]\n \ndef create_dataset(dataset, lookback):\n    \"\"\"Transform a time series into a prediction dataset\n    \n    Args:\n        dataset: A numpy array of time series, first dimension is the time steps\n        lookback: Size of window for prediction\n    \"\"\"\n    X, y = [], []\n    for i in range(len(dataset)-lookback):\n        feature = dataset[i:i+lookback]\n        target = dataset[i+1:i+lookback+1]\n        X.append(feature)\n        y.append(target)\n    return torch.tensor(X), torch.tensor(y)\n \n## 이번에는 lookback을 4로 놓을 것.    \nlookback = 4\nX_train, y_train = create_dataset(train, lookback=lookback)\nX_test, y_test = create_dataset(test, lookback=lookback)\n \nclass AirModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.lstm = nn.LSTM(input_size=1, hidden_size=50, num_layers=1, batch_first=True)\n        self.linear = nn.Linear(50, 1)\n    def forward(self, x):\n        x, _ = self.lstm(x)\n        x = self.linear(x)\n        return x\n \nmodel = AirModel()\noptimizer = optim.Adam(model.parameters())\nloss_fn = nn.MSELoss()\nloader = data.DataLoader(data.TensorDataset(X_train, y_train), shuffle=True, batch_size=8) # shuffle: 샘플을 섞을지 시간 순서대로 추출할지 결정\n \nn_epochs = 2000\nfor epoch in range(n_epochs):\n    model.train()\n    for X_batch, y_batch in loader:\n        y_pred = model(X_batch)\n        loss = loss_fn(y_pred, y_batch)\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n    # Validation\n    if epoch % 100 != 0:\n        continue\n    model.eval()\n    with torch.no_grad():\n        y_pred = model(X_train)\n        train_rmse = np.sqrt(loss_fn(y_pred, y_train))\n        y_pred = model(X_test)\n        test_rmse = np.sqrt(loss_fn(y_pred, y_test))\n    print(\"Epoch %d: train RMSE %.4f, test RMSE %.4f\" % (epoch, train_rmse, test_rmse))\n \nwith torch.no_grad():\n    # shift train predictions for plotting\n    train_plot = np.ones_like(timeseries) * np.nan\n    y_pred = model(X_train)\n    y_pred = y_pred[:, -1, :]\n    train_plot[lookback:train_size] = model(X_train)[:, -1, :]\n    # shift test predictions for plotting\n    test_plot = np.ones_like(timeseries) * np.nan\n    test_plot[train_size+lookback:len(timeseries)] = model(X_test)[:, -1, :]\n\nEpoch 0: train RMSE 225.5574, test RMSE 424.7804\nEpoch 100: train RMSE 177.5963, test RMSE 374.4650\nEpoch 200: train RMSE 138.9036, test RMSE 332.0411\nEpoch 300: train RMSE 108.2241, test RMSE 295.1660\nEpoch 400: train RMSE 86.0366, test RMSE 263.5869\nEpoch 500: train RMSE 65.9311, test RMSE 232.4372\nEpoch 600: train RMSE 51.7861, test RMSE 204.3946\nEpoch 700: train RMSE 41.5776, test RMSE 180.0017\nEpoch 800: train RMSE 34.7810, test RMSE 159.1152\nEpoch 900: train RMSE 29.9309, test RMSE 141.1872\nEpoch 1000: train RMSE 26.6003, test RMSE 126.3749\nEpoch 1100: train RMSE 24.6251, test RMSE 114.9184\nEpoch 1200: train RMSE 23.2474, test RMSE 105.3578\nEpoch 1300: train RMSE 22.2368, test RMSE 98.2287\nEpoch 1400: train RMSE 21.5524, test RMSE 92.6251\nEpoch 1500: train RMSE 21.1995, test RMSE 87.6587\nEpoch 1600: train RMSE 20.5447, test RMSE 84.6245\nEpoch 1700: train RMSE 20.1870, test RMSE 81.5615\nEpoch 1800: train RMSE 20.0715, test RMSE 79.2392\nEpoch 1900: train RMSE 19.9252, test RMSE 78.4828\n\n\n\n# plot\nplt.plot(timeseries, label='실제관측치')\nplt.plot(train_plot, c='r', label='train')\nplt.plot(test_plot, c='g', label='test')\nplt.legend()\nplt.show()\n\n\n\n\n\n이전보다(lookback=1) 테스트 데이터에 대해 훨씬 잘 맞춘다.\n\nRunning the above code will produce the plot below. From both the RMSE measure printed and the plot, you can notice that the model can now do better on the test set.\nThis is also why the create_dataset() function is designed in such way: When the model is given a time series of time \\(t\\) to \\(t+3\\)(as lookback=4), its output is the prediction of \\(t+1\\) to \\(t+4\\). However, \\(t+1\\) to \\(t+3\\) are also known from the input. By using these in the loss function, the model effectively was provided with more clues to train. This design is not always suitable but you can see it is helpful in this particular example\n\n\n\n- lookback 살펴보기\n\nlookback: 입력으로 사용하기 위해 거슬러 올라갈 타임스텝\ndelay : 타깃으로 사용할 미래의 타임스텝\nshuffle: 샘플을 섞을지 시간 순서대로 추출할지 결정\n\n\nlookback = 4\nX_train, y_train = create_dataset(train, lookback=lookback)\nX_test, y_test = create_dataset(test, lookback=lookback)\n\n\nX_train.shape, y_train.shape\n\n(torch.Size([92, 4, 1]), torch.Size([92, 4, 1]))\n\n\n\ndf[:10]\n\n\n\n\n\n  \n    \n      \n      Month\n      Passengers\n    \n  \n  \n    \n      0\n      1949-01\n      112\n    \n    \n      1\n      1949-02\n      118\n    \n    \n      2\n      1949-03\n      132\n    \n    \n      3\n      1949-04\n      129\n    \n    \n      4\n      1949-05\n      121\n    \n    \n      5\n      1949-06\n      135\n    \n    \n      6\n      1949-07\n      148\n    \n    \n      7\n      1949-08\n      148\n    \n    \n      8\n      1949-09\n      136\n    \n    \n      9\n      1949-10\n      119\n    \n  \n\n\n\n\n\nX_train.T\n\ntensor([[[112., 118., 132., 129., 121., 135., 148., 148., 136., 119., 104.,\n          118., 115., 126., 141., 135., 125., 149., 170., 170., 158., 133.,\n          114., 140., 145., 150., 178., 163., 172., 178., 199., 199., 184.,\n          162., 146., 166., 171., 180., 193., 181., 183., 218., 230., 242.,\n          209., 191., 172., 194., 196., 196., 236., 235., 229., 243., 264.,\n          272., 237., 211., 180., 201., 204., 188., 235., 227., 234., 264.,\n          302., 293., 259., 229., 203., 229., 242., 233., 267., 269., 270.,\n          315., 364., 347., 312., 274., 237., 278., 284., 277., 317., 313.,\n          318., 374., 413., 405.],\n         [118., 132., 129., 121., 135., 148., 148., 136., 119., 104., 118.,\n          115., 126., 141., 135., 125., 149., 170., 170., 158., 133., 114.,\n          140., 145., 150., 178., 163., 172., 178., 199., 199., 184., 162.,\n          146., 166., 171., 180., 193., 181., 183., 218., 230., 242., 209.,\n          191., 172., 194., 196., 196., 236., 235., 229., 243., 264., 272.,\n          237., 211., 180., 201., 204., 188., 235., 227., 234., 264., 302.,\n          293., 259., 229., 203., 229., 242., 233., 267., 269., 270., 315.,\n          364., 347., 312., 274., 237., 278., 284., 277., 317., 313., 318.,\n          374., 413., 405., 355.],\n         [132., 129., 121., 135., 148., 148., 136., 119., 104., 118., 115.,\n          126., 141., 135., 125., 149., 170., 170., 158., 133., 114., 140.,\n          145., 150., 178., 163., 172., 178., 199., 199., 184., 162., 146.,\n          166., 171., 180., 193., 181., 183., 218., 230., 242., 209., 191.,\n          172., 194., 196., 196., 236., 235., 229., 243., 264., 272., 237.,\n          211., 180., 201., 204., 188., 235., 227., 234., 264., 302., 293.,\n          259., 229., 203., 229., 242., 233., 267., 269., 270., 315., 364.,\n          347., 312., 274., 237., 278., 284., 277., 317., 313., 318., 374.,\n          413., 405., 355., 306.],\n         [129., 121., 135., 148., 148., 136., 119., 104., 118., 115., 126.,\n          141., 135., 125., 149., 170., 170., 158., 133., 114., 140., 145.,\n          150., 178., 163., 172., 178., 199., 199., 184., 162., 146., 166.,\n          171., 180., 193., 181., 183., 218., 230., 242., 209., 191., 172.,\n          194., 196., 196., 236., 235., 229., 243., 264., 272., 237., 211.,\n          180., 201., 204., 188., 235., 227., 234., 264., 302., 293., 259.,\n          229., 203., 229., 242., 233., 267., 269., 270., 315., 364., 347.,\n          312., 274., 237., 278., 284., 277., 317., 313., 318., 374., 413.,\n          405., 355., 306., 271.]]])\n\n\n\ny_train.T\n\ntensor([[[118., 132., 129., 121., 135., 148., 148., 136., 119., 104., 118.,\n          115., 126., 141., 135., 125., 149., 170., 170., 158., 133., 114.,\n          140., 145., 150., 178., 163., 172., 178., 199., 199., 184., 162.,\n          146., 166., 171., 180., 193., 181., 183., 218., 230., 242., 209.,\n          191., 172., 194., 196., 196., 236., 235., 229., 243., 264., 272.,\n          237., 211., 180., 201., 204., 188., 235., 227., 234., 264., 302.,\n          293., 259., 229., 203., 229., 242., 233., 267., 269., 270., 315.,\n          364., 347., 312., 274., 237., 278., 284., 277., 317., 313., 318.,\n          374., 413., 405., 355.],\n         [132., 129., 121., 135., 148., 148., 136., 119., 104., 118., 115.,\n          126., 141., 135., 125., 149., 170., 170., 158., 133., 114., 140.,\n          145., 150., 178., 163., 172., 178., 199., 199., 184., 162., 146.,\n          166., 171., 180., 193., 181., 183., 218., 230., 242., 209., 191.,\n          172., 194., 196., 196., 236., 235., 229., 243., 264., 272., 237.,\n          211., 180., 201., 204., 188., 235., 227., 234., 264., 302., 293.,\n          259., 229., 203., 229., 242., 233., 267., 269., 270., 315., 364.,\n          347., 312., 274., 237., 278., 284., 277., 317., 313., 318., 374.,\n          413., 405., 355., 306.],\n         [129., 121., 135., 148., 148., 136., 119., 104., 118., 115., 126.,\n          141., 135., 125., 149., 170., 170., 158., 133., 114., 140., 145.,\n          150., 178., 163., 172., 178., 199., 199., 184., 162., 146., 166.,\n          171., 180., 193., 181., 183., 218., 230., 242., 209., 191., 172.,\n          194., 196., 196., 236., 235., 229., 243., 264., 272., 237., 211.,\n          180., 201., 204., 188., 235., 227., 234., 264., 302., 293., 259.,\n          229., 203., 229., 242., 233., 267., 269., 270., 315., 364., 347.,\n          312., 274., 237., 278., 284., 277., 317., 313., 318., 374., 413.,\n          405., 355., 306., 271.],\n         [121., 135., 148., 148., 136., 119., 104., 118., 115., 126., 141.,\n          135., 125., 149., 170., 170., 158., 133., 114., 140., 145., 150.,\n          178., 163., 172., 178., 199., 199., 184., 162., 146., 166., 171.,\n          180., 193., 181., 183., 218., 230., 242., 209., 191., 172., 194.,\n          196., 196., 236., 235., 229., 243., 264., 272., 237., 211., 180.,\n          201., 204., 188., 235., 227., 234., 264., 302., 293., 259., 229.,\n          203., 229., 242., 233., 267., 269., 270., 315., 364., 347., 312.,\n          274., 237., 278., 284., 277., 317., 313., 318., 374., 413., 405.,\n          355., 306., 271., 306.]]])\n\n\n\nhttps://miruetoto.github.io/yechan3/posts/3_Researches/ITSTGCN/2022-12-29-STGCN-tutorial.html#pytorch-geometric-temporal-%EC%9D%98-%EC%9E%90%EB%A3%8C%ED%98%95\n\nlag=4라고 생각하면 될 것같은데 각각 한달 후의 데이터를 예측하는 것이라 \\(y\\)의 차원이 전에 했던거랑 다름."
  },
  {
    "objectID": "posts/HousePrice/2023-04-04-lr-hw1.html",
    "href": "posts/HousePrice/2023-04-04-lr-hw1.html",
    "title": "House Price",
    "section": "",
    "text": "Data Link\n\n\nLotarea : 대지면적\nGrLivArea: 지상 생활권 면적 (sqft)\nSlaePrice: 집 값 (dollar)\n\n\noptions(warn=-1)\n\nlibrary(lmtest) ## bptest, dwtest\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(\"gridExtra\")\n\nlibrary(corrplot)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(ggrepel)"
  },
  {
    "objectID": "posts/HousePrice/2023-04-04-lr-hw1.html#데이터-불러오기",
    "href": "posts/HousePrice/2023-04-04-lr-hw1.html#데이터-불러오기",
    "title": "House Price",
    "section": "데이터 불러오기",
    "text": "데이터 불러오기\n\ndf <- read.csv('./house_price/train.csv')\nhead(df)\n\n\n\nA data.frame: 6 × 81\n\n    IdMSSubClassMSZoningLotFrontageLotAreaStreetAlleyLotShapeLandContourUtilities⋯PoolAreaPoolQCFenceMiscFeatureMiscValMoSoldYrSoldSaleTypeSaleConditionSalePrice\n    <int><int><chr><int><int><chr><chr><chr><chr><chr>⋯<int><chr><chr><chr><int><int><int><chr><chr><int>\n\n\n    1160RL65 8450PaveNARegLvlAllPub⋯0NANA   NA    0 22008WDNormal 208500\n    2220RL80 9600PaveNARegLvlAllPub⋯0NANA   NA    0 52007WDNormal 181500\n    3360RL6811250PaveNAIR1LvlAllPub⋯0NANA   NA    0 92008WDNormal 223500\n    4470RL60 9550PaveNAIR1LvlAllPub⋯0NANA   NA    0 22006WDAbnorml140000\n    5560RL8414260PaveNAIR1LvlAllPub⋯0NANA   NA    0122008WDNormal 250000\n    6650RL8514115PaveNAIR1LvlAllPub⋯0NAMnPrvShed700102009WDNormal 143000\n\n\n\n\n\nstr(df)\n\n'data.frame':   1460 obs. of  81 variables:\n $ Id           : int  1 2 3 4 5 6 7 8 9 10 ...\n $ MSSubClass   : int  60 20 60 70 60 50 20 60 50 190 ...\n $ MSZoning     : chr  \"RL\" \"RL\" \"RL\" \"RL\" ...\n $ LotFrontage  : int  65 80 68 60 84 85 75 NA 51 50 ...\n $ LotArea      : int  8450 9600 11250 9550 14260 14115 10084 10382 6120 7420 ...\n $ Street       : chr  \"Pave\" \"Pave\" \"Pave\" \"Pave\" ...\n $ Alley        : chr  NA NA NA NA ...\n $ LotShape     : chr  \"Reg\" \"Reg\" \"IR1\" \"IR1\" ...\n $ LandContour  : chr  \"Lvl\" \"Lvl\" \"Lvl\" \"Lvl\" ...\n $ Utilities    : chr  \"AllPub\" \"AllPub\" \"AllPub\" \"AllPub\" ...\n $ LotConfig    : chr  \"Inside\" \"FR2\" \"Inside\" \"Corner\" ...\n $ LandSlope    : chr  \"Gtl\" \"Gtl\" \"Gtl\" \"Gtl\" ...\n $ Neighborhood : chr  \"CollgCr\" \"Veenker\" \"CollgCr\" \"Crawfor\" ...\n $ Condition1   : chr  \"Norm\" \"Feedr\" \"Norm\" \"Norm\" ...\n $ Condition2   : chr  \"Norm\" \"Norm\" \"Norm\" \"Norm\" ...\n $ BldgType     : chr  \"1Fam\" \"1Fam\" \"1Fam\" \"1Fam\" ...\n $ HouseStyle   : chr  \"2Story\" \"1Story\" \"2Story\" \"2Story\" ...\n $ OverallQual  : int  7 6 7 7 8 5 8 7 7 5 ...\n $ OverallCond  : int  5 8 5 5 5 5 5 6 5 6 ...\n $ YearBuilt    : int  2003 1976 2001 1915 2000 1993 2004 1973 1931 1939 ...\n $ YearRemodAdd : int  2003 1976 2002 1970 2000 1995 2005 1973 1950 1950 ...\n $ RoofStyle    : chr  \"Gable\" \"Gable\" \"Gable\" \"Gable\" ...\n $ RoofMatl     : chr  \"CompShg\" \"CompShg\" \"CompShg\" \"CompShg\" ...\n $ Exterior1st  : chr  \"VinylSd\" \"MetalSd\" \"VinylSd\" \"Wd Sdng\" ...\n $ Exterior2nd  : chr  \"VinylSd\" \"MetalSd\" \"VinylSd\" \"Wd Shng\" ...\n $ MasVnrType   : chr  \"BrkFace\" \"None\" \"BrkFace\" \"None\" ...\n $ MasVnrArea   : int  196 0 162 0 350 0 186 240 0 0 ...\n $ ExterQual    : chr  \"Gd\" \"TA\" \"Gd\" \"TA\" ...\n $ ExterCond    : chr  \"TA\" \"TA\" \"TA\" \"TA\" ...\n $ Foundation   : chr  \"PConc\" \"CBlock\" \"PConc\" \"BrkTil\" ...\n $ BsmtQual     : chr  \"Gd\" \"Gd\" \"Gd\" \"TA\" ...\n $ BsmtCond     : chr  \"TA\" \"TA\" \"TA\" \"Gd\" ...\n $ BsmtExposure : chr  \"No\" \"Gd\" \"Mn\" \"No\" ...\n $ BsmtFinType1 : chr  \"GLQ\" \"ALQ\" \"GLQ\" \"ALQ\" ...\n $ BsmtFinSF1   : int  706 978 486 216 655 732 1369 859 0 851 ...\n $ BsmtFinType2 : chr  \"Unf\" \"Unf\" \"Unf\" \"Unf\" ...\n $ BsmtFinSF2   : int  0 0 0 0 0 0 0 32 0 0 ...\n $ BsmtUnfSF    : int  150 284 434 540 490 64 317 216 952 140 ...\n $ TotalBsmtSF  : int  856 1262 920 756 1145 796 1686 1107 952 991 ...\n $ Heating      : chr  \"GasA\" \"GasA\" \"GasA\" \"GasA\" ...\n $ HeatingQC    : chr  \"Ex\" \"Ex\" \"Ex\" \"Gd\" ...\n $ CentralAir   : chr  \"Y\" \"Y\" \"Y\" \"Y\" ...\n $ Electrical   : chr  \"SBrkr\" \"SBrkr\" \"SBrkr\" \"SBrkr\" ...\n $ X1stFlrSF    : int  856 1262 920 961 1145 796 1694 1107 1022 1077 ...\n $ X2ndFlrSF    : int  854 0 866 756 1053 566 0 983 752 0 ...\n $ LowQualFinSF : int  0 0 0 0 0 0 0 0 0 0 ...\n $ GrLivArea    : int  1710 1262 1786 1717 2198 1362 1694 2090 1774 1077 ...\n $ BsmtFullBath : int  1 0 1 1 1 1 1 1 0 1 ...\n $ BsmtHalfBath : int  0 1 0 0 0 0 0 0 0 0 ...\n $ FullBath     : int  2 2 2 1 2 1 2 2 2 1 ...\n $ HalfBath     : int  1 0 1 0 1 1 0 1 0 0 ...\n $ BedroomAbvGr : int  3 3 3 3 4 1 3 3 2 2 ...\n $ KitchenAbvGr : int  1 1 1 1 1 1 1 1 2 2 ...\n $ KitchenQual  : chr  \"Gd\" \"TA\" \"Gd\" \"Gd\" ...\n $ TotRmsAbvGrd : int  8 6 6 7 9 5 7 7 8 5 ...\n $ Functional   : chr  \"Typ\" \"Typ\" \"Typ\" \"Typ\" ...\n $ Fireplaces   : int  0 1 1 1 1 0 1 2 2 2 ...\n $ FireplaceQu  : chr  NA \"TA\" \"TA\" \"Gd\" ...\n $ GarageType   : chr  \"Attchd\" \"Attchd\" \"Attchd\" \"Detchd\" ...\n $ GarageYrBlt  : int  2003 1976 2001 1998 2000 1993 2004 1973 1931 1939 ...\n $ GarageFinish : chr  \"RFn\" \"RFn\" \"RFn\" \"Unf\" ...\n $ GarageCars   : int  2 2 2 3 3 2 2 2 2 1 ...\n $ GarageArea   : int  548 460 608 642 836 480 636 484 468 205 ...\n $ GarageQual   : chr  \"TA\" \"TA\" \"TA\" \"TA\" ...\n $ GarageCond   : chr  \"TA\" \"TA\" \"TA\" \"TA\" ...\n $ PavedDrive   : chr  \"Y\" \"Y\" \"Y\" \"Y\" ...\n $ WoodDeckSF   : int  0 298 0 0 192 40 255 235 90 0 ...\n $ OpenPorchSF  : int  61 0 42 35 84 30 57 204 0 4 ...\n $ EnclosedPorch: int  0 0 0 272 0 0 0 228 205 0 ...\n $ X3SsnPorch   : int  0 0 0 0 0 320 0 0 0 0 ...\n $ ScreenPorch  : int  0 0 0 0 0 0 0 0 0 0 ...\n $ PoolArea     : int  0 0 0 0 0 0 0 0 0 0 ...\n $ PoolQC       : chr  NA NA NA NA ...\n $ Fence        : chr  NA NA NA NA ...\n $ MiscFeature  : chr  NA NA NA NA ...\n $ MiscVal      : int  0 0 0 0 0 700 0 350 0 0 ...\n $ MoSold       : int  2 5 9 2 12 10 8 11 4 1 ...\n $ YrSold       : int  2008 2007 2008 2006 2008 2009 2007 2009 2008 2008 ...\n $ SaleType     : chr  \"WD\" \"WD\" \"WD\" \"WD\" ...\n $ SaleCondition: chr  \"Normal\" \"Normal\" \"Normal\" \"Abnorml\" ...\n $ SalePrice    : int  208500 181500 223500 140000 250000 143000 307000 200000 129900 118000 ...\n\n\n\nstr(df[,c(1:10, 81)])\n\n'data.frame':   1460 obs. of  11 variables:\n $ Id         : int  1 2 3 4 5 6 7 8 9 10 ...\n $ MSSubClass : int  60 20 60 70 60 50 20 60 50 190 ...\n $ MSZoning   : chr  \"RL\" \"RL\" \"RL\" \"RL\" ...\n $ LotFrontage: int  65 80 68 60 84 85 75 NA 51 50 ...\n $ LotArea    : int  8450 9600 11250 9550 14260 14115 10084 10382 6120 7420 ...\n $ Street     : chr  \"Pave\" \"Pave\" \"Pave\" \"Pave\" ...\n $ Alley      : chr  NA NA NA NA ...\n $ LotShape   : chr  \"Reg\" \"Reg\" \"IR1\" \"IR1\" ...\n $ LandContour: chr  \"Lvl\" \"Lvl\" \"Lvl\" \"Lvl\" ...\n $ Utilities  : chr  \"AllPub\" \"AllPub\" \"AllPub\" \"AllPub\" ...\n $ SalePrice  : int  208500 181500 223500 140000 250000 143000 307000 200000 129900 118000 ..."
  },
  {
    "objectID": "posts/HousePrice/2023-04-04-lr-hw1.html#data-fields",
    "href": "posts/HousePrice/2023-04-04-lr-hw1.html#data-fields",
    "title": "House Price",
    "section": "Data fields",
    "text": "Data fields\nHere’s a brief version of what you’ll find in the data description file.\n\n\n\n\n\n\n\nVariable name\nDescription\n\n\n\n\nSalePrice\nthe property’s sale price in dollars. This is the target variable that you’re trying to predict.\n\n\nMSSubClass\nThe building class\n\n\nMSZoning\nThe general zoning classification\n\n\nLotFrontage:\nLinear feet of street connected to property\n\n\nLotArea\nLot size in square feet\n\n\nStreet:\nType of road access\n\n\nAlley:\nType of alley access\n\n\nLotShape:\nGeneral shape of property\n\n\nLandContour:\nFlatness of the property\n\n\nUtilities:\nType of utilities available\n\n\nLotConfig:\nLot configuration\n\n\nLandSlope:\nSlope of property\n\n\nNeighborhood:\nPhysical locations within Ames city limits\n\n\nCondition1:\nProximity to main road or railroad\n\n\nCondition2:\nProximity to main road or railroad (if a second is present)\n\n\nBldgType:\nType of dwelling\n\n\nHouseStyle:\nStyle of dwelling\n\n\nOverallQual:\nOverall material and finish quality\n\n\nOverallCond:\nOverall condition rating\n\n\nYearBuilt:\nOriginal construction date\n\n\nYearRemodAdd:\nRemodel date\n\n\nRoofStyle:\nType of roof\n\n\nRoofMatl:\nRoof material\n\n\nExterior1st:\nExterior covering on house\n\n\nExterior2nd:\nExterior covering on house (if more than one material)\n\n\nMasVnrType:\nMasonry veneer type\n\n\nMasVnrArea:\nMasonry veneer area in square feet\n\n\nExterQual:\nExterior material quality\n\n\nExterCond:\nPresent condition of the material on the exterior\n\n\nFoundation:\nType of foundation\n\n\nBsmtQual:\nHeight of the basement\n\n\nBsmtCond:\nGeneral condition of the basement\n\n\nBsmtExposure:\nWalkout or garden level basement walls\n\n\nBsmtFinType1:\nQuality of basement finished area\n\n\nBsmtFinSF1:\nType 1 finished square feet\n\n\nBsmtFinType2:\nQuality of second finished area (if present)\n\n\nBsmtFinSF2:\nType 2 finished square feet\n\n\nBsmtUnfSF:\nUnfinished square feet of basement area\n\n\nTotalBsmtSF:\nTotal square feet of basement area\n\n\nHeating:\nType of heating\n\n\nHeatingQC:\nHeating quality and condition\n\n\nCentralAir:\nCentral air conditioning\n\n\nElectrical:\nElectrical system\n\n\n1stFlrSF:\nFirst Floor square feet\n\n\n2ndFlrSF:\nSecond floor square feet\n\n\nLowQualFinSF:\nLow quality finished square feet (all floors)\n\n\nGrLivArea\nAbove grade (ground) living area square feet\n\n\nBsmtFullBath:\nBasement full bathrooms\n\n\nBsmtHalfBath:\nBasement half bathrooms\n\n\nFullBath:\nFull bathrooms above grade\n\n\nHalfBath:\nHalf baths above grade\n\n\nBedroom:\nNumber of bedrooms above basement level\n\n\nKitchen:\nNumber of kitchens\n\n\nKitchenQual:\nKitchen quality\n\n\nTotRmsAbvGrd:\nTotal rooms above grade (does not include bathrooms)\n\n\nFunctional:\nHome functionality rating\n\n\nFireplaces:\nNumber of fireplaces\n\n\nFireplaceQu:\nFireplace quality\n\n\nGarageType:\nGarage location\n\n\nGarageYrBlt:\nYear garage was built\n\n\nGarageFinish:\nInterior finish of the garage\n\n\nGarageCars:\nSize of garage in car capacity\n\n\nGarageArea:\nSize of garage in square feet\n\n\nGarageQual:\nGarage quality\n\n\nGarageCond:\nGarage condition\n\n\nPavedDrive:\nPaved driveway\n\n\nWoodDeckSF:\nWood deck area in square feet\n\n\nOpenPorchSF:\nOpen porch area in square feet\n\n\nEnclosedPorch:\nEnclosed porch area in square feet\n\n\n3SsnPorch:\nThree season porch area in square feet\n\n\nScreenPorch:\nScreen porch area in square feet\n\n\nPoolArea:\nPool area in square feet\n\n\nPoolQC:\nPool quality\n\n\nFence:\nFence quality\n\n\nMiscFeature:\nMiscellaneous feature not covered in other categories\n\n\nMiscVal:\nValue of miscellaneous feature\n\n\nMoSold:\nMonth Sold\n\n\nYrSold:\nYear Sold\n\n\nSaleType:\nType of sale\n\n\nSaleCondition:\nCondition of sale"
  },
  {
    "objectID": "posts/HousePrice/2023-04-04-lr-hw1.html#탐색",
    "href": "posts/HousePrice/2023-04-04-lr-hw1.html#탐색",
    "title": "House Price",
    "section": "탐색",
    "text": "탐색\n\ndim(df)\n\n\n146081\n\n\n\nis.na(df) %>% colSums()\n\nId0MSSubClass0MSZoning0LotFrontage259LotArea0Street0Alley1369LotShape0LandContour0Utilities0LotConfig0LandSlope0Neighborhood0Condition10Condition20BldgType0HouseStyle0OverallQual0OverallCond0YearBuilt0YearRemodAdd0RoofStyle0RoofMatl0Exterior1st0Exterior2nd0MasVnrType8MasVnrArea8ExterQual0ExterCond0Foundation0BsmtQual37BsmtCond37BsmtExposure38BsmtFinType137BsmtFinSF10BsmtFinType238BsmtFinSF20BsmtUnfSF0TotalBsmtSF0Heating0HeatingQC0CentralAir0Electrical1X1stFlrSF0X2ndFlrSF0LowQualFinSF0GrLivArea0BsmtFullBath0BsmtHalfBath0FullBath0HalfBath0BedroomAbvGr0KitchenAbvGr0KitchenQual0TotRmsAbvGrd0Functional0Fireplaces0FireplaceQu690GarageType81GarageYrBlt81GarageFinish81GarageCars0GarageArea0GarageQual81GarageCond81PavedDrive0WoodDeckSF0OpenPorchSF0EnclosedPorch0X3SsnPorch0ScreenPorch0PoolArea0PoolQC1453Fence1179MiscFeature1406MiscVal0MoSold0YrSold0SaleType0SaleCondition0SalePrice0\n\n\n\nnumeric_vars <- which(sapply(df, is.numeric)) # index vector numeric variables\nnumeric_var_names <- names(numeric_vars) \ncat('There are', length(numeric_vars), 'numeric variables')\n\nThere are 38 numeric variables\n\n\n\nnumeric_data <- df[, numeric_vars]\ncor_numeric <- cor(numeric_data, use=\"pairwise.complete.obs\") #correlations of all numeric variables\n\n#sort on decreasing correlations with SalePrice\ncor_sorted <- as.matrix(sort(cor_numeric[,'SalePrice'], decreasing = TRUE))\n\n#select only high corelations\nCorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x)>0.5))) \ncor_numVar <- cor_numVar[CorHigh, CorHigh]\n\ncorrplot.mixed(cor_numVar, tl.col=\"black\", tl.pos = \"lt\")\n\n\n\n\nOverallQual과 GrLivArea가 SalesPrice와 강한 양의 상관을 보인다.\n다음은 SalePrice와 상관관계가 높은 변수들이다. - OverallQual : 집의 전체적인 원자재 및 마감재에 대한 평가 - GrLivArea : 지상 생활권 면적(제곱 피트) - GarageCars : 주차 공간 - GarageArea : 차고 면적(제곱 피트) - TotalBsmtSf : 지하 공간 면적(제곱 피트) - X1stFlrSF : 1층 면적(제곱 피트) - FullBath : 풀옵션 화장실 개수 - TotRmsAbvGrd : 방의 개수 (화장실이 포함되지 않은 방.) - YearBuilt : 건설 연도 - YearRemodAdd : 리모델링 연도(YearBuilt와 동일하면, 리모델링을 하지 않은 집.)\n\nhead(cor_sorted)\n\n\n\nA matrix: 6 × 1 of type dbl\n\n    SalePrice1.0000000\n    OverallQual0.7909816\n    GrLivArea0.7086245\n    GarageCars0.6404092\n    GarageArea0.6234314\n    TotalBsmtSF0.6135806\n\n\n\n\n\nOverallQual\n\nggplot(data=df[!is.na(df$SalePrice),], aes(x=factor(OverallQual), y=SalePrice))+\n        geom_boxplot(col='blue') + labs(x='Overall Quality') +\n        scale_y_continuous(breaks= seq(0, 800000, by=100000), labels = comma)\n\n\n\n\n원자재/마감재에 대한 Qaulity가 높을수록 집 값은 증가하는 경향이 나타남.\n\n\nGrLivArea\n\nggplot(data = df[!is.na(df$SalePrice), ], \n       aes(x = GrLivArea, y = SalePrice)) +\n  geom_point(col='orange', alpha=0.5) +\n  #geom_smooth(method = \"lm\", se = F, color = \"steelblue\") +\n  scale_y_continuous(breaks = seq(0, 800000, by=100000), labels = comma)\n  #geom_text_repel(aes(label = ifelse(df$GrLivArea[!is.na(df$SalePrice)] > 4500,\n                                     # rownames(df), '')))\n\n\n\n\n\nggplot(data = df[!is.na(df$SalePrice), ], \n       aes(x = GrLivArea, y = SalePrice)) +\n  geom_point(col='orange', alpha=0.5) +\n  geom_smooth(method = \"lm\", se = F, color = \"steelblue\") +\n  scale_y_continuous(breaks = seq(0, 800000, by=100000), labels = comma) +\n  geom_text_repel(aes(label = ifelse(df$GrLivArea[!is.na(df$SalePrice)] > 4500,\n                                     rownames(df), '')))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "posts/HousePrice/2023-04-04-lr-hw1.html#단순-선형회귀모형",
    "href": "posts/HousePrice/2023-04-04-lr-hw1.html#단순-선형회귀모형",
    "title": "House Price",
    "section": "단순 선형회귀모형",
    "text": "단순 선형회귀모형\n\ndf1 <- df[c('SalePrice','GrLivArea')]\nhead(df1)\n\n\n\nA data.frame: 6 × 2\n\n    SalePriceGrLivArea\n    <int><int>\n\n\n    12085001710\n    21815001262\n    32235001786\n    41400001717\n    52500002198\n    61430001362\n\n\n\n\n\ncolSums(is.na(df1)) # 결측값 없음\n\nSalePrice0GrLivArea0\n\n\n\nsummary(df[c('SalePrice', 'GrLivArea')])\n\n   SalePrice        GrLivArea   \n Min.   : 34900   Min.   : 334  \n 1st Qu.:129975   1st Qu.:1130  \n Median :163000   Median :1464  \n Mean   :180921   Mean   :1515  \n 3rd Qu.:214000   3rd Qu.:1777  \n Max.   :755000   Max.   :5642  \n\n\n\np1 <- ggplot(data=df, aes(x=SalePrice)) +\n        geom_histogram(fill='darkgreen')\n        # scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)\np2 <- ggplot(data=df, aes(x=GrLivArea)) +\n        geom_histogram(fill='darkgreen')\n\ngrid.arrange(p1, p2, ncol=2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n오른쪽으로 skewed 되어 있음. (후에 변수변환 고려.)\n\n\n적합1\n\\[\\widehat{\\text{SalePrice}} = \\text{GrLivArea}\\times 107.\n1 + 18569 \\]\n\nmodel1 <- lm(SalePrice ~ GrLivArea, df1)\nmodel1\n\n\nCall:\nlm(formula = SalePrice ~ GrLivArea, data = df1)\n\nCoefficients:\n(Intercept)    GrLivArea  \n    18569.0        107.1  \n\n\n\nsummary(model1)\n\n\nCall:\nlm(formula = SalePrice ~ GrLivArea, data = df1)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-462999  -29800   -1124   21957  339832 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 18569.026   4480.755   4.144 3.61e-05 ***\nGrLivArea     107.130      2.794  38.348  < 2e-16 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 56070 on 1458 degrees of freedom\nMultiple R-squared:  0.5021,    Adjusted R-squared:  0.5018 \nF-statistic:  1471 on 1 and 1458 DF,  p-value: < 2.2e-16\n\n\n\n회귀모형의 유의성 검정\n\n\\(H_0 : \\beta_1 = 0 \\text{ vs. } \\beta_1 \\neq 0\\)\n\n\nanova(model1)\n\n\n\nA anova: 2 × 5\n\n    DfSum SqMean SqF valuePr(>F)\n    <int><dbl><dbl><dbl><dbl>\n\n\n    GrLivArea   14.623740e+124.62374e+121470.5854.518034e-223\n    Residuals14584.584171e+123.14415e+09      NA           NA\n\n\n\n\n\ncat('기각치 F(1,1458;0.05): ', qf(0.95, 1, 48), '\\n') ## F(0.05)\ncat('F0: ' , summary(model1)$fstatistic[1])\n\n기각치 F(1,1458;0.05):  4.042652 \nF0:  1470.585\n\n\n\\(F_0 > F(1, 1458 ;0.05)\\) 이므로 회귀모형은 유의하지 않다는 귀무가설을 기각할 수 있다. 따라서 적합된 회귀모형은 유의하다고 판단한다.\n\n\n회귀계수의 유의성 검정\n\nsummary(model1)\n\n\nCall:\nlm(formula = SalePrice ~ GrLivArea, data = df1)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-462999  -29800   -1124   21957  339832 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 18569.026   4480.755   4.144 3.61e-05 ***\nGrLivArea     107.130      2.794  38.348  < 2e-16 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 56070 on 1458 degrees of freedom\nMultiple R-squared:  0.5021,    Adjusted R-squared:  0.5018 \nF-statistic:  1471 on 1 and 1458 DF,  p-value: < 2.2e-16\n\n\n\nsummary(model1)$coef\n\n\n\nA matrix: 2 × 4 of type dbl\n\n    EstimateStd. Errort valuePr(>|t|)\n\n\n    (Intercept)18569.02594480.754549 4.144174 3.606554e-05\n    GrLivArea  107.1304   2.79362138.3482074.518034e-223\n\n\n\n\n\nqt(0.975, 1458)\nqt(0.025, 1458)\n\n1.96159238529673\n\n\n-1.96159238529673\n\n\n\n유의수준 \\(5\\%\\) 기각역 : \\(|t| \\geq 1.96\\)\n따라서 유의수준 \\(5\\%\\)하에서 회귀계수가 유의하지 않다는 귀무가설을 기각할 수 있다.\n\n\n\n회귀계수의 신뢰구간\n\nconfint(model1, level = 0.95)\n\n\n\nA matrix: 2 × 2 of type dbl\n\n    2.5 %97.5 %\n\n\n    (Intercept)9779.611927358.4399\n    GrLivArea 101.6504  112.6103\n\n\n\n\n\n\n평균반응 추정\n\n\\(1\\tt{sqft} \\to 0.028\\)평\n\n\nnew_dt <- data.frame(GrLivArea = 1500) ## 42.15평 \n\n\npredict(model1,\n        newdata = new_dt,\n        interval = c(\"confidence\"), ## 구간추정, confidence option (평균반응)\n        level = 0.95) ## 평균반응\n\n\n\nA matrix: 1 × 3 of type dbl\n\n    fitlwrupr\n\n\n    1179264.6176384.7182144.4\n\n\n\n\n\n실거주면적이 \\(1500\\)sqft 일 때 집값이 평균적으로 \\(179264.6\\) 달러로 추정된다.\n42평에 한화로 약 2억 3521만원\n\n\n\n개별 \\(y\\) 추정\n\npredict(model1,\n        newdata = new_dt,\n        interval = c(\"prediction\"),  ## prediction option (개별 y)\n        level = 0.95) ## 개별 y\n\n\n\nA matrix: 1 × 3 of type dbl\n\n    fitlwrupr\n\n\n    1179264.669235.04289294.1\n\n\n\n\n평균반응과 개별 \\(y\\) 추정 결과 점 추정값은 \\(179264.6\\) 으로 동일한데 개별 \\(y\\) 추정했을 경우 신뢰구간의 폭이 더 넓어진다. (불확실성 증가)\n\n\n신뢰대\n\ndt_pred <- data.frame(\n  GrLivArea = c(1:dim(df1)[1]),\n  predict(model1,\n          newdata = data.frame(GrLivArea=c(1:dim(df1)[1])),\n          interval='confidence', level = 0.95), ## 평균반응\n  predict(model1,\n          newdata=data.frame(GrLivArea=c(1:dim(df1)[1])),\n          interval='prediction',level = 0.95)[,-1]) ## 개별 y\n\nnames(dt_pred)[5:6] <- c('plwr', 'pupr')\nhead(dt_pred)\n\n\n\nA data.frame: 6 × 6\n\n    GrLivAreafitlwruprplwrpupr\n    <int><dbl><dbl><dbl><dbl><dbl>\n\n\n    1118676.16 9891.9227460.39-91665.88129018.2\n    2218783.2910004.2327562.35-91558.34129124.9\n    3318890.4210116.5327664.30-91450.79129231.6\n    4418997.5510228.8427766.25-91343.25129338.3\n    5519104.6810341.1527868.21-91235.71129445.1\n    6619211.8110453.4527970.16-91128.17129551.8\n\n\n\n\n\nbarx <- mean(df1$GrLivArea)\nbary <- mean(df1$SalePrice)\ncat('barx: ', barx, '\\n')\ncat('bary: ', bary, '\\n')\n\nbarx:  1515.464 \nbary:  180921.2 \n\n\n\n## 신뢰대 \nplot(SalePrice~GrLivArea, data = df1,\n     xlab = \"실거주면적\",\n     ylab = \"집값\",\n     ylim = c(min(dt_pred$plwr), max(dt_pred$pupr)),\n     xlim = c(min(dt_pred$GrLivArea)+500, max(dt_pred$GrLivArea)),\n     pch  = 20, # plot character (기호 모양)\n     cex  = 2, # size\n     col  = \"grey\"\n     )\nabline(model1, lwd = 5, col = \"darkorange\")\n\nlines(dt_pred$GrLivArea, dt_pred$lwr, col = \"dodgerblue\", lwd = 3, lty = 2)\nlines(dt_pred$GrLivArea, dt_pred$upr, col = \"dodgerblue\", lwd = 3, lty = 2)\nlines(dt_pred$GrLivArea, dt_pred$plwr, col = \"darkgreen\", lwd = 3, lty = 3)\nlines(dt_pred$GrLivArea, dt_pred$pupr, col = \"darkgreen\", lwd = 3, lty = 3)\n\nabline(v=barx, lty=2, lwd=0.2, col='dark grey')\n\n\n\n\n\n\n\n잔차분석1\n\n잔차에 대한 산점도\n\n## Model1 residual plot\nplot(fitted(model1),resid(model1), col = 'grey', pch=16, \n     xlab = expression(hat(y)),\n     ylab = \"Residual\",\n     main = \"Residual plot in Model1\")\nabline(h=0, col='darkorange', lty=2, lwd=2)\n\n\n\n\n\n\n등분산 검정\n\nbptest(model1)\n\n\n    studentized Breusch-Pagan test\n\ndata:  model1\nBP = 318.13, df = 1, p-value < 2.2e-16\n\n\n\n\n정규성 검정\n\ndf1$yhat <- model1$fitted\ndf1$resid <- model1$residuals\n\n\n## 잔차의 QQ plot\nqqnorm(df1$resid, pch=16)\nqqline(df1$resid, col = 2)\n\n\n\n\n\n## Shapiro-Wilk Test\n## H0 : normal distribution  vs. H1 : not H0\nshapiro.test(resid(model1))\n\n\n    Shapiro-Wilk normality test\n\ndata:  resid(model1)\nW = 0.90957, p-value < 2.2e-16\n\n\n\nhist(df1$resid,\n     xlab = \"Residuals\",\n     main = \"Histogram of Residuals, model1\",\n     col = \"darkgreen\",\n     border = \"steelblue\")\n\n\n\n\n\n\n독립성\n\n# 독립성검정 : DW test\n#H0 : uncorrelated vs H1 : rho != 0\ndwtest(model1, alternative = \"two.sided\")  \n\n\n    Durbin-Watson test\n\ndata:  model1\nDW = 2.0247, p-value = 0.6374\nalternative hypothesis: true autocorrelation is not 0\n\n\n\n유의수준 \\(5\\%\\) 하에서 등분산성, 정규성 가정을 만족하지 않는다. 따라서 위에서 적합한 모델은 사용할 수 없다..\n\n\n\n\n적합2: 절편이 없는 회귀모형\n\\[y = \\beta_1x + \\epsilon\\]\n\nmodel2 <- lm(SalePrice ~ 0 + GrLivArea, df1)\nmodel2\n\n\nCall:\nlm(formula = SalePrice ~ 0 + GrLivArea, data = df1)\n\nCoefficients:\nGrLivArea  \n    118.1  \n\n\n\n회귀모형의 유의성 검정\n\n\\(H_0 : \\beta_1 = 0 \\text{ vs. } \\beta_1 \\neq 0\\)\n\n\nanova(model2)\n\n\n\nA anova: 2 × 5\n\n    DfSum SqMean SqF valuePr(>F)\n    <int><dbl><dbl><dbl><dbl>\n\n\n    GrLivArea   15.235916e+135.235916e+1316470.3 0\n    Residuals14594.638169e+123.179006e+09     NANA\n\n\n\n\n\n\n회귀계수의 유의성 검정\n\nsummary(model2)$coef\n\n\n\nA matrix: 1 × 4 of type dbl\n\n    EstimateStd. Errort valuePr(>|t|)\n\n\n    GrLivArea118.06910.9199952128.33660\n\n\n\n\n\nsummary(model2)\n\n\nCall:\nlm(formula = SalePrice ~ 0 + GrLivArea, data = df1)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-506146  -28044    2922   26479  332542 \n\nCoefficients:\n          Estimate Std. Error t value Pr(>|t|)    \nGrLivArea   118.07       0.92   128.3   <2e-16 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 56380 on 1459 degrees of freedom\nMultiple R-squared:  0.9186,    Adjusted R-squared:  0.9186 \nF-statistic: 1.647e+04 on 1 and 1459 DF,  p-value: < 2.2e-16\n\n\n\n\n회귀계수의 신뢰구간\n\nconfint(model2, level = 0.95)\n\n\n\nA matrix: 1 × 2 of type dbl\n\n    2.5 %97.5 %\n\n\n    GrLivArea116.2644119.8738\n\n\n\n\n\n\n평균반응 추정\n\npredict(model2,\n        newdata = new_dt,\n        interval = c(\"confidence\"), ## 구간추정, confidence option (평균반응)\n        level = 0.95) ## 평균반응\n\n\n\nA matrix: 1 × 3 of type dbl\n\n    fitlwrupr\n\n\n    1177103.6174396.7179810.6\n\n\n\n\n\n실거주면적이 1500sqft 일 때 집값이 평균적으로 177103.6 달러로 추정된다.\n42평에 한화로 약 2억 3237만원\n\n\n\n개별 \\(y\\) 추정\n\npredict(model2,\n        newdata = new_dt,\n        interval = c(\"prediction\"),  ## prediction option (개별 y)\n        level = 0.95) ## 개별 y\n\n\n\nA matrix: 1 × 3 of type dbl\n\n    fitlwrupr\n\n\n    1177103.666470.77287736.5\n\n\n\n\n\n## Model2 residual plot\nplot(fitted(model2),resid(model1), col = 'grey', pch=16, \n     xlab = expression(hat(y)),\n     ylab = \"Residual\",\n     main = \"Residual plot in Model2\")\nabline(h=0, col='darkorange', lty=2, lwd=2)\n\n\n\n\n\nmodel2의 residual plot을 보면 model1과 유사한 양상을 띈다.\n\\(\\hat{y}\\)가 커질수록 점점 산포가 증가하는 형태로 등분산성에 위배되는 형태이다."
  },
  {
    "objectID": "posts/HousePrice/2023-04-04-lr-hw1.html#두-회귀모형-비교",
    "href": "posts/HousePrice/2023-04-04-lr-hw1.html#두-회귀모형-비교",
    "title": "House Price",
    "section": "두 회귀모형 비교",
    "text": "두 회귀모형 비교\n\ndf1 %>% colnames()\n\n\n'SalePrice''GrLivArea'\n\n\n\n## basic\nplot(SalePrice~GrLivArea, data = df1,\n     xlab = \"생활면적 (sqft)\",\n     ylab = \"집값\",\n     pch  = 20,\n     cex  = 2,\n     col  = \"darkorange\")\n     #ylim = c(0,35),\n     #xlim = c(0, 12))\nabline(model1, col='steelblue', lwd=2) ## model1\nabline(model2, col='violet', lwd=2)  ## model2\n\n\n\n\n\n## using ggplot2\ng1 <- ggplot(data = df[!is.na(df$SalePrice), ], \n           aes(x = GrLivArea, y = SalePrice)) +\n              geom_point(col='orange', alpha=0.5) +\n              geom_smooth(method = \"lm\", se = F, color = \"steelblue\") + ## model1 (절편O)\n              scale_y_continuous(breaks = seq(0, 800000, by=100000), labels = comma) +\n              geom_text_repel(aes(label = ifelse(df$GrLivArea[!is.na(df$SalePrice)] > 4500,\n                                                 rownames(df), '')))\n\ng1 + geom_abline(intercept = 0, slope = model2$coef, col = 'violet' , lwd = 1) ## model2 (절편X)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-hw1-feedback.html",
    "href": "posts/HousePrice/2023-04-05-hw1-feedback.html",
    "title": "House Price feedback",
    "section": "",
    "text": "이상값들을 제거하고 모형적합을 새로 해보자.\n\n\nData Link\n이전 분석내용\n\n앞서 분석내용에서 절편을 제거하기 전과 후의 회귀모형의 \\(R^2\\) 값 차이가 이상하리만큼 차이가 컸음. (\\(R^2:0.5021 \\to 0.91836\\)) 혹시 이상값 때문일까?\n\noptions(warn=-1)\n\nlibrary(lmtest) ## bptest, dwtest\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(\"gridExtra\")\n\nlibrary(corrplot)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(ggrepel)\n\n\ndf <- read.csv('./house_price/train.csv')\nhead(df)\n\n\n\nA data.frame: 6 × 81\n\n    IdMSSubClassMSZoningLotFrontageLotAreaStreetAlleyLotShapeLandContourUtilities⋯PoolAreaPoolQCFenceMiscFeatureMiscValMoSoldYrSoldSaleTypeSaleConditionSalePrice\n    <int><int><chr><int><int><chr><chr><chr><chr><chr>⋯<int><chr><chr><chr><int><int><int><chr><chr><int>\n\n\n    1160RL65 8450PaveNARegLvlAllPub⋯0NANA   NA    0 22008WDNormal 208500\n    2220RL80 9600PaveNARegLvlAllPub⋯0NANA   NA    0 52007WDNormal 181500\n    3360RL6811250PaveNAIR1LvlAllPub⋯0NANA   NA    0 92008WDNormal 223500\n    4470RL60 9550PaveNAIR1LvlAllPub⋯0NANA   NA    0 22006WDAbnorml140000\n    5560RL8414260PaveNAIR1LvlAllPub⋯0NANA   NA    0122008WDNormal 250000\n    6650RL8514115PaveNAIR1LvlAllPub⋯0NAMnPrvShed700102009WDNormal 143000\n\n\n\n\n\np1 <- ggplot(data=df, aes(x=SalePrice)) +\n        geom_histogram(fill='darkgreen')\n        # scale_x_continuous(breaks= seq(0, 800000, by=100000), labels = comma)\np2 <- ggplot(data=df, aes(x=GrLivArea)) +\n        geom_histogram(fill='darkgreen')\n\ngrid.arrange(p1, p2, ncol=2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n생각해보니까 위의 히스토그램만 봐도 집값이 이상적으로 매우 높은 관측치들이 몇몇 보임. (매우 비싼 고급 주택?)\n\n\nggplot(data = df[!is.na(df$SalePrice), ], \n       aes(x = GrLivArea, y = SalePrice)) +\n  geom_point(col='orange', alpha=0.5) +\n  geom_smooth(method = \"lm\", se = F, color = \"steelblue\") +\n  scale_y_continuous(breaks = seq(0, 800000, by=100000), labels = comma) +\n  geom_text_repel(aes(label = ifelse(df$GrLivArea[!is.na(df$SalePrice)] > 4500,\n                                     rownames(df), '')))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n실거주면적이 \\(4000\\tt{sqft}\\) (약 112평) 이상인데 \\(200,000\\) (2억 6천만원)달러??\n\ndf1 <- df[c('SalePrice','GrLivArea')]\nhead(df1)\n\n\n\nA data.frame: 6 × 2\n\n    SalePriceGrLivArea\n    <int><int>\n\n\n    12085001710\n    21815001262\n    32235001786\n    41400001717\n    52500002198\n    61430001362"
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-hw1-feedback.html#선형회귀모형-적합-model1",
    "href": "posts/HousePrice/2023-04-05-hw1-feedback.html#선형회귀모형-적합-model1",
    "title": "House Price feedback",
    "section": "선형회귀모형 적합 (model1)",
    "text": "선형회귀모형 적합 (model1)\n\nmodel1 <- lm(SalePrice ~ GrLivArea, df_out)\nmodel1\n\n\nCall:\nlm(formula = SalePrice ~ GrLivArea, data = df_out)\n\nCoefficients:\n(Intercept)    GrLivArea  \n       7169          115  \n\n\n\nsummary(model1)\n\n\nCall:\nlm(formula = SalePrice ~ GrLivArea, data = df_out)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-197730  -29815    -337   23239  332534 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 7168.970   4432.501   1.617    0.106    \nGrLivArea    115.040      2.782  41.358   <2e-16 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 53920 on 1456 degrees of freedom\nMultiple R-squared:  0.5402,    Adjusted R-squared:  0.5399 \nF-statistic:  1710 on 1 and 1456 DF,  p-value: < 2.2e-16\n\n\n\nanova(model1)\n\n\n\nA anova: 2 × 5\n\n    DfSum SqMean SqF valuePr(>F)\n    <int><dbl><dbl><dbl><dbl>\n\n\n    GrLivArea   14.973669e+124.973669e+121710.4446.591113e-248\n    Residuals14564.233790e+122.907823e+09      NA           NA"
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-hw1-feedback.html#선형회귀모형-적합-절편x-model2",
    "href": "posts/HousePrice/2023-04-05-hw1-feedback.html#선형회귀모형-적합-절편x-model2",
    "title": "House Price feedback",
    "section": "선형회귀모형 적합 (절편X, model2)",
    "text": "선형회귀모형 적합 (절편X, model2)\n\nmodel2 <- lm(SalePrice ~ 0 + GrLivArea, df_out)\nmodel2\n\n\nCall:\nlm(formula = SalePrice ~ 0 + GrLivArea, data = df_out)\n\nCoefficients:\nGrLivArea  \n    119.3  \n\n\n\nsummary(model2)\n\n\nCall:\nlm(formula = SalePrice ~ 0 + GrLivArea, data = df_out)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-205038  -30039    1205   24581  329621 \n\nCoefficients:\n          Estimate Std. Error t value Pr(>|t|)    \nGrLivArea 119.3044     0.8867   134.5   <2e-16 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 53950 on 1457 degrees of freedom\nMultiple R-squared:  0.9255,    Adjusted R-squared:  0.9255 \nF-statistic: 1.81e+04 on 1 and 1457 DF,  p-value: < 2.2e-16\n\n\n\naov(model2)\n\nCall:\n   aov(formula = model2)\n\nTerms:\n                   GrLivArea    Residuals\nSum of Squares  5.269620e+13 4.241397e+12\nDeg. of Freedom            1         1457\n\nResidual standard error: 53954.13\nEstimated effects are balanced"
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-hw1-feedback.html#summary",
    "href": "posts/HousePrice/2023-04-05-hw1-feedback.html#summary",
    "title": "House Price feedback",
    "section": "Summary",
    "text": "Summary\n절편을 제거한 것이 회귀모형 설명력에 큰 영향이 있는걸까?\n여전히 절편을 제거한 후에 모형의 설명력 차이가 크다.\n이전 분석내용과 차이점은 이상치를 제거하기 전보다 설명력이 좀 더 좋아졌다는 것이다.\n\ncol <- c('변수','스케일링','변수변환','변동사항', 'R2')\nscore <- as.matrix(col) \ndim(score) <- c(1,5)\nscore\n\n\n\nA matrix: 1 × 5 of type chr\n\n    변수스케일링변수변환변동사항R2\n\n\n\n\n\nscore <- matrix(0, ncol=6, nrow=4, byrow=T)\ncolnames(score) <- c('변수','스케일링','변수변환','이상치제거','변동사항', 'R2')\n\n\nscore[1,] <- c('집값, 실거주면적','X','X','X','단순선형회귀(절편O)',0.5021)\nscore[2,] <- c('집값, 실거주면적','X','X','X','단순선형회귀(절편X)',0.9186)\nscore[3,] <- c('집값, 실거주면적','X','X','O','단순선형회귀(절편O) + 이상치제거',0.5402)\nscore[4,] <- c('집값, 실거주면적','X','X','O','단순선형회귀(절편X) + 이상치제거',0.9255)\nscore\n\n\n\nA matrix: 4 × 6 of type chr\n\n    변수스케일링변수변환이상치제거변동사항R2\n\n\n    집값, 실거주면적XXX단순선형회귀(절편O)             0.5021\n    집값, 실거주면적XXX단순선형회귀(절편X)             0.9186\n    집값, 실거주면적XXO단순선형회귀(절편O) + 이상치제거0.5402\n    집값, 실거주면적XXO단순선형회귀(절편X) + 이상치제거0.9255"
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-hw1-feedback.html#절편-있는-회귀모형-model3",
    "href": "posts/HousePrice/2023-04-05-hw1-feedback.html#절편-있는-회귀모형-model3",
    "title": "House Price feedback",
    "section": "절편 있는 회귀모형 (model3)",
    "text": "절편 있는 회귀모형 (model3)\n\nmodel3 <- lm(SalePrice ~ GrLivArea, df_log)\nmodel3\n\n\nCall:\nlm(formula = SalePrice ~ GrLivArea, data = df_log)\n\nCoefficients:\n(Intercept)    GrLivArea  \n  1.116e+01    5.708e-04  \n\n\n\nsummary(model3)\n\n\nCall:\nlm(formula = SalePrice ~ GrLivArea, data = df_log)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.31695 -0.14499  0.03338  0.16232  0.90721 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 1.116e+01  2.263e-02  493.23   <2e-16 ***\nGrLivArea   5.708e-04  1.420e-05   40.19   <2e-16 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 0.2753 on 1456 degrees of freedom\nMultiple R-squared:  0.5259,    Adjusted R-squared:  0.5256 \nF-statistic:  1615 on 1 and 1456 DF,  p-value: < 2.2e-16"
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-hw1-feedback.html#절편없는-회귀모형-model4",
    "href": "posts/HousePrice/2023-04-05-hw1-feedback.html#절편없는-회귀모형-model4",
    "title": "House Price feedback",
    "section": "절편없는 회귀모형 (model4)",
    "text": "절편없는 회귀모형 (model4)\n\nmodel4 <- lm(SalePrice ~ 0 + GrLivArea, df_log)\nmodel4\n\n\nCall:\nlm(formula = SalePrice ~ 0 + GrLivArea, data = df_log)\n\nCoefficients:\nGrLivArea  \n  0.00721  \n\n\n\nsummary(model4)\n\n\nCall:\nlm(formula = SalePrice ~ 0 + GrLivArea, data = df_log)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-18.7523  -0.5975   1.5293   3.6004   8.1707 \n\nCoefficients:\n           Estimate Std. Error t value Pr(>|t|)    \nGrLivArea 7.210e-03  5.864e-05     123   <2e-16 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 3.568 on 1457 degrees of freedom\nMultiple R-squared:  0.9121,    Adjusted R-squared:  0.912 \nF-statistic: 1.512e+04 on 1 and 1457 DF,  p-value: < 2.2e-16"
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-hw1-feedback.html#summary-1",
    "href": "posts/HousePrice/2023-04-05-hw1-feedback.html#summary-1",
    "title": "House Price feedback",
    "section": "Summary",
    "text": "Summary\n이상값 제거 + 로그변환 까지 한 결과를 이전 분석내용과 비교한 결과는 다음과 같다.\n\nscore <- matrix(0, ncol=6, nrow=6, byrow=T)\ncolnames(score) <- c('변수','스케일링','변수변환','이상치제거','변동사항', 'R2')\n\n\nscore[1,] <- c('집값, 실거주면적','X','X','X','단순선형회귀(절편O)',0.5021)\nscore[2,] <- c('집값, 실거주면적','X','X','X','단순선형회귀(절편X)',0.9186)\nscore[3,] <- c('집값, 실거주면적','X','X','O','단순선형회귀(절편O) + 이상치제거',0.5402)\nscore[4,] <- c('집값, 실거주면적','X','X','O','단순선형회귀(절편X) + 이상치제거',0.9255)\nscore[5,] <- c('집값, 실거주면적','X','O','O','단순선형회귀(절편X) + 이상치제거',0.5259)\nscore[6,] <- c('집값, 실거주면적','X','O','O','단순선형회귀(절편X) + 이상치제거',0.9120)\n\n\nscore\n\n\n\nA matrix: 6 × 6 of type chr\n\n    변수스케일링변수변환이상치제거변동사항R2\n\n\n    집값, 실거주면적XXX단순선형회귀(절편O)             0.5021\n    집값, 실거주면적XXX단순선형회귀(절편X)             0.9186\n    집값, 실거주면적XXO단순선형회귀(절편O) + 이상치제거0.5402\n    집값, 실거주면적XXO단순선형회귀(절편X) + 이상치제거0.9255\n    집값, 실거주면적XOO단순선형회귀(절편X) + 이상치제거0.5259\n    집값, 실거주면적XOO단순선형회귀(절편X) + 이상치제거0.912"
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-5wk.html",
    "href": "posts/HousePrice/2023-04-05-5wk.html",
    "title": "5wk: 측도론 (1)",
    "section": "",
    "text": "youtube: https://youtube.com/playlist?list=PLQqh36zP38-xOLs7lnyb8ZjM3KB-N2u7I"
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-5wk.html#수학과의-기호",
    "href": "posts/HousePrice/2023-04-05-5wk.html#수학과의-기호",
    "title": "5wk: 측도론 (1)",
    "section": "수학과의 기호",
    "text": "수학과의 기호\n- 아래는 기호는 몇 가지 영어단어의 축약형이다.\n\nfor all: \\(\\forall\\)\nexists: \\(\\exists\\)\nsuch that, satisfying: \\({\\sf s.t.}\\), \\({\\sf st}\\)\nif-then, implies, therefore: \\(\\Rightarrow\\)\nif and only if: \\(\\Leftrightarrow\\)\nbecause: \\(\\because\\)\ntherefore: \\(\\therefore\\)\nquod erat: \\(\\square\\), \\(\\blacksquare\\)\n\n- 예시1: 모든 실수 \\(x\\)에 대하여, \\(x^2\\)은 양수이다.\n언어\n\nfor any \\(x\\) in \\(\\mathbb{R}\\), \\(x^2 \\geq 0\\). \\(\\quad\\) (이런느낌: \\(x^2 \\geq 0\\), 단 \\(x\\)는 실수)\nfor arbitrary \\(x \\in \\mathbb{R}\\), \\(x^2 \\geq 0\\).\nfor any choice of \\(x \\in \\mathbb{R}\\), \\(x^2 \\geq 0\\).\nfor all \\(x \\in \\mathbb{R}\\), \\(x^2 \\geq 0\\).\nif \\(x \\in \\mathbb{R}\\), then \\(x^2 \\geq 0\\). \\(\\quad\\) (\\(x\\)가 실수라면 \\(x^2 \\geq 0\\), 1번과 뉘앙스 차이)\n\n기호\n\n\\(\\forall x \\in \\mathbb{R}\\): \\(x^2\\geq 0\\).\n\\(\\forall x \\in \\mathbb{R}\\), \\(x^2\\geq 0\\).\n\\(x^2 \\geq 0\\), for all \\(x \\in \\mathbb{R}\\).\n\\(x^2 \\geq 0\\), \\(\\forall x \\in \\mathbb{R}\\).\n\\(x \\in \\mathbb{R} \\Rightarrow x^2 \\geq 0\\).\n\n\n거의 쓰는 사람 마음임, 그런데 뉘앙스가 조금씩 다름.\n\n- 예시2: \\(\\Omega\\)의 임의의 부분집합 \\(A\\),\\(B\\)에 대하여, \\(A=B\\) 일 필요충분조건은 \\(A\\subset B\\) 이고 \\(B \\subset A\\) 이어야 한다.\n언어\n\nfor all \\(A,B \\subset \\Omega\\), \\(A=B\\) if and only if (1) \\(A \\subset B\\) and (2) \\(B \\subset A\\).\n\n기호\n\n\\(A = B \\Leftrightarrow A \\subset B \\text{ and } B \\subset A, \\forall A,B \\in \\Omega\\).\n\\(A = B \\Leftrightarrow \\big(A \\subset B \\text{ and } B \\subset A\\big), \\forall A,B \\in \\Omega\\).\n\\(\\forall A,B \\subset \\Omega\\): \\(A = B \\Leftrightarrow \\big(A \\subset B \\text{ and } B \\subset A\\big)\\)\n\n\n의미가 때로는 모호할때가 있지만 눈치껏 알아먹어야 한다.\n\n- 예시3: 임의의 양수 \\(\\epsilon>0\\)에 대하여 \\(|x| \\leq \\epsilon\\)이라면 \\(x=0\\)일 수 밖에 없다.\n언어\n\nIf \\(|x|< \\epsilon\\) for all \\(\\epsilon>0\\), then \\(x=0\\).\nIf \\(|x|< \\epsilon\\), \\(\\forall \\epsilon>0\\), then \\(x=0\\).\nFor all \\(\\epsilon>0\\), \\(|x|< \\epsilon\\) implies \\(x=0\\). – 틀린표현\n\n기호\n\n\\(|x| < \\epsilon,~ \\forall \\epsilon>0 \\Rightarrow x=0\\)\n\\(\\forall \\epsilon>0: |x| < \\epsilon \\Rightarrow x=0\\) – 애매하다?\n\\(\\big(\\forall \\epsilon>0:|x| < \\epsilon\\big) \\Rightarrow x=0\\)\n\\(\\big(\\forall \\epsilon>0\\big)\\big(|x| < \\epsilon \\Rightarrow x=0\\big)\\) – 틀린표현\n\n틀린이유?\n\\(\\epsilon = 0.5\\)라고 하자. \\(|x|<0.5 \\Rightarrow x=0\\) ? (X)"
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-5wk.html#기타-약어-및-상투적인-표현",
    "href": "posts/HousePrice/2023-04-05-5wk.html#기타-약어-및-상투적인-표현",
    "title": "5wk: 측도론 (1)",
    "section": "기타 약어 및 상투적인 표현",
    "text": "기타 약어 및 상투적인 표현\n- 약어\n\n\\({\\sf WLOG}\\): Without Loss Of Generality\n\\({\\sf WTS}\\): What/Want To Show\n\\({\\sf iff}\\): if and only if\n\\({\\sf Q.E.D.}\\): 증명완료 (쓰지마..)\n\\({\\sf LHS}\\): Left Hand Side\n\\({\\sf RHS}\\): Right Hand Side\n\n- 상투적인 표현\n\nIt suffices to show that, It is sufficient to show that"
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-5wk.html#before",
    "href": "posts/HousePrice/2023-04-05-5wk.html#before",
    "title": "5wk: 측도론 (1)",
    "section": "Before",
    "text": "Before\n- 아래의 기호를 약속\n\n전체집합: \\(\\Omega\\)\n관심있는 집합의 모임: \\({\\cal A} \\subset 2^{\\Omega}\\)\n\n- \\(\\Omega \\neq \\emptyset\\), \\({\\cal A} \\neq \\emptyset\\) 를 가정.\n- 약속: 집합 \\({\\cal A} \\subset 2^{\\Omega}\\)에 대하여 아래와 같은 용어를 약속하자.\n\n\\(\\cap\\)-closed (closed under intersection) or a \\(\\pi\\)-system: \\(\\forall A,B \\in {\\cal A}:~ A \\cap B \\in {\\cal A}\\) (교집합에 닫혀있다. 특별히 “파이시스템”이라고 부른다.)\n\\(\\sigma\\)-\\(\\cap\\)-closed (closed under countable interserction): \\(\\forall \\{A_i\\}_{i=1}^{\\infty} \\subset {\\cal A}:~ \\cap_{i=1}^{\\infty} A_i \\in {\\cal A}\\)\n\\(\\cup\\)-closed (closed under unions): \\(\\forall A,B \\in {\\cal A}:~ A\\cup B \\in {\\cal A}\\)\n\\(\\sigma\\)-\\(\\cup\\)-closed (closed under countable unois): \\(\\forall \\{A_i\\}_{i=1}^{\\infty} \\subset {\\cal A}:~ \\cup_{i=1}^{\\infty}A_i \\in {\\cal A}\\)\n＼-closed (closed under differences): \\(\\forall A,B \\in {\\cal A}:~ A-B \\in {\\cal A}\\) (차집합에 닫혀있다.)\n\\(^c\\)-closed (closed under complements): \\(\\forall A \\in {\\cal A}:~ A^c \\in {\\cal A}\\) (여집합에 닫혀있다.)\n\n\\(\\cal{A}\\) is \\(\\cap\\)-closed 예시 - \\(\\forall A, B \\in \\cal{A} : A\\cap B \\in \\cal{A}\\) - \\(A,B \\in \\cal{A} \\Rightarrow A\\cap B \\in \\cal{A}\\) - \\(A\\cap B \\in \\cal{A}, \\text{ for all } A,B \\in \\cal{A}\\) - 위에 세개 다 같은 표현.\n\\(\\sigma\\)-\\(\\cap\\)-closed\n\n\\(A_1, A_2, \\dots, \\in \\cal{A}\\) : \\(A_1\\cap A_2 \\cap \\dots \\in \\cal{A}\\)\n\\(\\{A_1, A_2, \\dots \\}\\subset \\cal{A} = \\{A_i\\}_{i=1}^\\infty\\)\n\n\\(A_1, A_2,\\dots\\) 집합열이 \\(\\cal{A}\\)의 부분집합이라는 것은 결국,\n\\(A_1 \\in \\cal{A}, A_2 \\in \\cal{A} \\dots\\) 이렇게 된다는 것을 의미.\n\n\n\\(\\forall \\{A_i\\}_{i=1}^n\\)는 \\(\\forall A_1A_2\\dots \\in \\cal{A}\\)라는 의미.\n- 우리만의 약속:\n\n앞으로 서로소인 집합들에 대한 합집합은 기호로 \\(\\uplus\\)라고 표현하겠다.\n따라서 앞으로 \\(B_1 \\uplus B_2\\)의 의미는 (1) \\(B_1 \\cup B_2\\) (2) \\(B_1 \\cap B_2 = \\emptyset\\) 을 의미한다고 정의하겠다. (꼭 서로소임을 명시하지 않아도)\n\\(\\sigma\\)-\\(\\uplus\\)-closed 의 의미는 \\(\\uplus_{i=1}^{\\infty}B_i \\in {\\cal A}, \\forall \\{B_i\\}_{i=1}^{\\infty} \\subset {\\cal A}:\\) 의 의미이다.\n\n서로소인 집합의 countable union에 대하여 닫혀있다는 것은 (우리만의 약속 마지막부분 \\(\\sigma\\)-\\(\\uplus\\)-closed)\n* \\(B_1, B_2, \\dots \\in \\cal{A}\\)\n** \\(B_1, B_2, \\dots\\) 서로소\n*, **를 만족하면, \\(B_1\\cup B_2 \\cup \\dots \\in \\cal{A}\\) 가 성립한다.\n- 이론: \\({\\cal A}\\subset 2^{\\Omega}\\) 가 여집합에 닫혀있다면 , 아래가 성립한다.\n\n\\({\\cal A}\\)가 교집합2에 닫혀있음. \\(\\Leftrightarrow\\) \\({\\cal A}\\)가 합집합3에 닫혀있음.\n\\({\\cal A}\\)가 가산교집합4에 닫혀있음. \\(\\Leftrightarrow\\) \\({\\cal A}\\)가 가산합집합5에 닫혀있음.\n\n(증명) 생략 – 추가\n\n\\(A,B \\in \\cal{A}\\Rightarrow\\) \\(A\\cap B \\in \\cal{A} \\qquad A\\cup B \\in \\cal{A}\\)\n\\(A^c, B^c \\in \\cal{A}\\) (여집합에 닫혀있으므로)\n\\(A^c \\cap B^c \\in \\cal{A}\\) (교집합에 닫혀있으므로)\n\\((A^c \\cap B^c)^c \\in \\cal{A}\\) (여집합에 닫혀있으므로)\n\\((A^c \\cap B^c)^c = (A\\cup B)\\) 이므로 \\((A\\cup B) \\in \\cal{A}\\)\n\n반대방향도 쉽게증명가능\n- 이론: \\({\\cal A}\\subset 2^{\\Omega}\\)가 차집합에 닫혀있다면, 아래가 성립한다.\n\n\\({\\cal A}\\)는 교집합에 닫혀있다.\n\\({\\cal A}\\)가 가산합집합에 닫혀있다. \\(\\Rightarrow\\) \\({\\cal A}\\)가 가산교집합에 닫혀있다.\n\\(\\forall \\{A_i\\} \\subset {\\cal A},~ \\exists \\{B_i\\} \\subset {\\cal A}\\) such that \\(\\cup_{i=1}^{\\infty} A_i = \\uplus_{i=1}^{\\infty} B_i\\).6 (중요!)\n\n(증명)\n\nNote: \\(A\\cap B = A-(A-B)\\).\nNote: \\(\\cap_{i=1}^{\\infty}A_i = \\cap_{i=2}^{n}(A_1\\cap A_i)= \\cap_{i=2}^{n}(A_1 - (A_1-A_i))=A_1 - \\cup_{i=2}^{n}(A_1-A_i)\\).\nNote: \\(\\cup_{i=1}^{\\infty}A_i = A_1 \\uplus(A_2-A_1) \\uplus \\big((A_3-A_1) - A_2 \\big) \\uplus \\big(\\big((A_4-A_1)-A_2\\big)-A_3\\big)\\uplus \\cdots\\)\n\n\n차집합에 닫혀있다는 것은 매우 좋은 성질임."
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-5wk.html#시그마필드-starstarstar",
    "href": "posts/HousePrice/2023-04-05-5wk.html#시그마필드-starstarstar",
    "title": "5wk: 측도론 (1)",
    "section": "시그마필드 (\\(\\star\\star\\star\\))",
    "text": "시그마필드 (\\(\\star\\star\\star\\))\n- 정의: 시그마필드 (\\(\\sigma\\)-field, \\(\\sigma\\)-algebra)\n집합 \\({\\cal F} \\subset 2^{\\Omega}\\)가 아래의 조건을 만족하면 \\({\\cal F}\\)를 \\(\\Omega\\)에 대한 시그마필드라고 부른다.\n\n\\(\\Omega \\in {\\cal F}\\).\n\\({\\cal F}\\)는 여집합에 닫혀있다. (예시. \\(A\\)를 잴 수 있으면 \\(A^c\\)도 잴 수 있어.)\n\\({\\cal F}\\)는 가산합집합에 닫혀있다.\n\n- 시그마필드의 정의에서 1을 생략하기도 한다. 이럴 경우는 특별히 \\({\\cal F}\\neq\\emptyset\\)임을 강조한다. 1을 생략할 수 있는 논리는 아래와 같다.\n\n\\({\\cal F}\\)는 공집합이 아니므로 최소한 하나의 집합 \\(A\\)는 포함해야 한다. 즉 \\(A \\in {\\cal F}\\).\n2번 원리에 의하여 \\(A^c \\in {\\cal F}\\).\n시그마필드는 합집합에 닫혀있으므로 \\(A\\cup A^c \\in {\\cal F}\\)."
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-5wk.html#알지브라-필드-star",
    "href": "posts/HousePrice/2023-04-05-5wk.html#알지브라-필드-star",
    "title": "5wk: 측도론 (1)",
    "section": "알지브라, 필드 (\\(\\star\\))",
    "text": "알지브라, 필드 (\\(\\star\\))\n- 정의1: 알지브라, 필드 (algebra, field)\n집합 \\({\\cal A}\\subset 2^{\\Omega}\\)가 아래의 조건을 만족하면 \\({\\cal A}\\)를 \\(\\Omega\\)에 대한 대수라고 부른다.\n\n\\(\\Omega \\in {\\cal A}\\).\n\\({\\cal A}\\)는 차집합에 닫혀있다.\n\\({\\cal A}\\)는 합집합에 닫혀있다.\n\n- 알지브라 역시 1의 조건을 생략하기도 한다.\n- 전체집합을 포함 \\(\\Rightarrow\\) (차집합에 닫혀있음 \\(\\Rightarrow\\) 여집합에 닫혀있음) \\(\\Rightarrow\\) 따라서 대수는 여집합에 닫혀있다.\n- 차집합에 닫혀있음 \\(\\Rightarrow\\) 교집합에 닫혀있게 된다.\n\n혹은 (여집합에 닫혀있음 & 합집합에 닫혀있음) \\(\\Rightarrow\\) 교집합에 닫혀있음.\n\n- 정의2: 알지브라의 또 다른 정의\n집합 \\({\\cal A}\\subset 2^{\\Omega}\\)가 아래의 조건을 만족하면 \\({\\cal A}\\)를 \\(\\Omega\\)에 대한 대수라고 부른다.\n\n\\(\\Omega \\in {\\cal A}\\).\n\\({\\cal A}\\)는 교집합에 닫혀있다.\n\\({\\cal A}\\)는 여집합에 닫혀있다.\n\n- 여집합에 닫혀있음 \\(\\Rightarrow\\) (합집합에 닫혀있음 \\(\\Leftrightarrow\\) 교집합에 닫혀있음) \\(\\Rightarrow\\) 2번 조건을 합집합으로 바꿔도 무방\n- 정의3: 알지브라의 또 또 다른 정의 (교재의 정의)\n집합 \\({\\cal A}\\subset 2^{\\Omega}\\)가 아래의 조건을 만족하면 \\({\\cal A}\\)를 \\(\\Omega\\)에 대한 대수라고 부른다.\n\n\\(\\Omega \\in {\\cal A}\\).\n\\({\\cal A}\\)는 여집합에 닫혀있다.\n\\({\\cal A}\\)는 합집합에 닫혀있다.\n\n- 알지브라의 예시\n\n\\(\\Omega = \\{H,T\\}\\), \\({\\cal A} = 2^\\Omega\\) 일때, \\({\\cal A}\\)는 알지브라이다. (\\(|\\Omega| <\\infty\\) 이라면 “시그마필드 = 알지브라(필드)” 이다.)\n\n\n이렇게 기억하자! 오메가의 원소가 finite한 경우, “시그마필드 = 알지브라” 가 된다. 왜냐? countable union한 것을 따지는 것은 finite한 union을 따지는 것과 동일하다."
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-5wk.html#링",
    "href": "posts/HousePrice/2023-04-05-5wk.html#링",
    "title": "5wk: 측도론 (1)",
    "section": "링",
    "text": "링\n- 정의: 링 (ring)\n집합 \\({\\cal A}\\subset 2^{\\Omega}\\)가 아래의 조건을 만족하면 \\({\\cal A}\\)를 \\(\\Omega\\)에 대한 링이라고 부른다.\n\n\\(\\emptyset \\in {\\cal A}\\). $$<– 이부분이 다름 (전체집합 대신 공집합이 들어갔다고 생각.)\n\\({\\cal A}\\)는 차집합에 닫혀있다.\n\\({\\cal A}\\)는 합집합에 닫혀있다.\n\n- 여기에서 1의 조건을 생략할 수 있다. (이럴경우 특별히 \\({\\cal A}\\neq \\emptyset\\) 임을 강조한다.)\n\n\\({\\cal A}\\)는 공집합이 아니므로 최소한 하나의 원소 \\(A\\)는 가져야 한다.\n\n조건2에 의하여 \\(A-A\\) 역시 \\({\\cal A}\\)의 원소이다.\n\n- 링은 차집합에 닫혀있음 \\(\\Rightarrow\\) 링은 교집합에도 닫혀있음 \\(\\Rightarrow\\) 링은 교집합과 합집합 모두에 닫혀 있다.\n- 링과 알지브라의 차이는 전체집합이 포함되느냐 마느냐임 \\(\\Rightarrow\\) 그런데 이 차이로 인해 알지브라는 여집합에 닫혀있지만 링은 여집합에 닫혀있지 않게 된다."
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-5wk.html#시그마링",
    "href": "posts/HousePrice/2023-04-05-5wk.html#시그마링",
    "title": "5wk: 측도론 (1)",
    "section": "시그마링",
    "text": "시그마링\n- 정의: 시그마링 (\\(\\sigma\\)-ring)\n집합 \\({\\cal A}\\subset 2^{\\Omega}\\)가 아래의 조건을 만족하면 \\({\\cal A}\\)를 \\(\\Omega\\)에 대한 링이라고 부른다.\n\n\\(\\emptyset \\in {\\cal A}\\).\n\\({\\cal A}\\)는 차집합에 닫혀있다.\n\\({\\cal A}\\)는 가산합집합에 닫혀있다. <– 링의 3번째 조건이 가산합집합으로 바뀐것이 시그마링\n\n링과 시그마링의 관계는 필드와 시그마필드의 관계와 비슷하다.\n- 여기에서 1의 조건을 생략할 수 있다."
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-5wk.html#세미알지브라-starstarstar",
    "href": "posts/HousePrice/2023-04-05-5wk.html#세미알지브라-starstarstar",
    "title": "5wk: 측도론 (1)",
    "section": "세미알지브라 (\\(\\star\\star\\star\\))",
    "text": "세미알지브라 (\\(\\star\\star\\star\\))\n- 정의1: 세미알지브라 (semi-algebra) // ref : 위키북스\n집합 \\({\\cal A}\\subset 2^{\\Omega}\\)가 아래의 조건을 만족하면 \\({\\cal A}\\)를 \\(\\Omega\\)에 대한 세미알지브라 라고 부른다.\n\n\\(\\Omega \\in {\\cal A}\\). (전체집합을 포함.)\n\\({\\cal A}\\)는 교집합에 닫혀있다.\n\\(\\forall A,B \\in {\\cal A}, \\exists \\{B_i\\}_{i=1}^{n} \\subset {\\cal A}\\) such that \\[A-B = \\uplus_{i=1}^{n} B_i.\\]\n\n\n3번을 \\({\\cal A}\\)가 차집합에 반쯤 닫혀있다고 표현한다. 즉 차집합 자체가 \\({\\cal A}\\)에 들어가는건 아니지만 차집합의 disjoint한 조각들은 모두 \\({\\cal A}\\)에 들어간다.\n\n- 세미알지브라는 공집합을 포함한다. (이때 \\({\\cal A}\\neq \\emptyset\\)임을 강조함)\n\n\\({\\cal A}\\)는 공집합이 아니므로 최소한 하나의 집합 \\(A\\)는 포함해야 한다. 즉 \\(A \\in {\\cal A}\\).\n\\(A \\in {\\cal A}\\)이면 조건3에 의하여 \\(\\emptyset\\)7을 \\({\\cal A}\\)의 원소들의 countable union으로 만들 수 있어야 한다. 이 조건을 만족하기 위해서는 \\(\\emptyset \\in {\\cal A}\\)이어야만 한다.\n\n- 정의2: 세미알지브라의 또 다른 정의 // ref: 세미링의 위키에서 언급, Durret의 정의.\n집합 \\({\\cal A}\\subset 2^{\\Omega}\\)가 아래의 조건을 만족하면 \\({\\cal A}\\)를 \\(\\Omega\\)에 대한 세미알지브라 라고 부른다.\n\n\\(\\Omega \\in {\\cal A}\\)\n\\({\\cal A}\\)는 교집합에 닫혀있다.\n\\(\\forall A \\in {\\cal A}, \\exists \\{B_i\\}_{i=1}^{n} \\subset {\\cal A}\\) such that \\[A^c = \\uplus_{i=1}^{n} B_i.\\]\n\n\n3번을 \\({\\cal A}\\)가 여집합에 반쯤 닫혀있다고 표현한다. 즉 여집합 자체가 \\({\\cal A}\\)에 들어가는건 아니지만 차집합의 disjoint한 조각들은 모두 \\({\\cal A}\\)에 들어간다.\n\n- 이 정의에서도 세미알지브라는 공집합을 포함한다. (이때 \\({\\cal A}\\neq \\emptyset\\)임을 강조함)\n\n\\({\\cal A}\\)는 공집합이 아니므로 최소한 하나의 집합 \\(A\\)는 포함해야 한다. 즉 \\(A \\in {\\cal A}\\).\n3에 의하여 \\(A^c=\\uplus_{i=1}^{n}B_i\\)를 만족하는 \\(B_1,\\dots, B_n\\) 역시 \\({\\cal A}\\)에 포함되어야 한다.\n2에 의하여 \\(A \\cap B_1=\\emptyset\\) 역시 \\({\\cal A}\\)에 포함되어야 한다.\n\n- Note: 정의2의 3번조건은 정의1의 3번조건보다 강한 조건이다. (정의2의 조건3 \\(\\Rightarrow\\) 정의1의 조건3)\n\n증명은 세미링/위키 에서 스스로 확인\n\n- 교재의 정의: 정의2에서 \\(\\Omega \\in {\\cal A}\\)이 생략되어 있음.\n\n왜 생략할 수 있는지 모르겠음. (교재가 틀렸을 수도 있음)\n\n- 세미알지브라의 예시: 아래의 \\({\\cal A}\\)는 모두 \\(\\Omega\\)에 대한 세미알지브라이다.\n\n예시1: \\(\\Omega=\\{a,b,c,d\\}\\), \\({\\cal A} = \\{\\emptyset, \\{a\\},\\{b,c,d\\}, \\Omega \\}\\)\n예시2: \\(\\Omega=\\{a,b,c,d\\}\\), \\({\\cal A} = \\{\\emptyset, \\{a\\},\\{b\\},\\{c,d\\}, \\Omega \\}\\)\n예시3: \\(\\Omega=\\{a,b,c,d\\}\\), \\({\\cal A} = \\{\\emptyset, \\{a\\},\\{b,c\\},\\{d\\}, \\Omega \\}\\)\n예시4: \\(\\Omega=\\{a,b,c,d\\}\\), \\({\\cal A} = \\{\\emptyset, \\{a\\},\\{b\\},\\{c\\},\\{d\\}, \\Omega \\}\\)\n예시5: \\(\\Omega=\\{a,b,c,d\\}\\), \\({\\cal A} = \\{\\emptyset, \\{a\\},\\{b\\},\\{c\\},\\{d\\}, \\{a,b\\},\\{b,c\\},\\Omega \\}\\)\n\n\n세미알지브라는 전체집합이 몇개의 파티션으로 쪼개져서 원소로 들어가는 느낌이 있음.\n\n- 세미알지브라의 예시\\((\\star)\\): 아래의 \\({\\cal A}\\)는 모두 \\(\\Omega=\\mathbb{R}\\)에 대한 세미알지브라이다.\n\n예시1: \\({\\cal A} = \\{(a,b]: -\\infty \\leq a < b \\leq \\infty \\}\\cup \\{\\emptyset\\}\\)\n예시2: \\({\\cal A} = \\{[a,b): -\\infty \\leq a < b \\leq \\infty \\}\\cup \\{\\emptyset\\}\\)\n\n- 세미알지브라가 아닌 예시: 아래의 \\({\\cal A}\\)는 \\(\\Omega=\\mathbb{R}\\)에 대한 세미알지브라가 아니다.\n\n예시1: \\({\\cal A} = \\{(a,b): -\\infty \\leq a < b \\leq \\infty \\}\\cup \\{\\emptyset\\}\\)\n예시2: \\({\\cal A} = \\{[a,b]: -\\infty \\leq a < b \\leq \\infty \\}\\cup \\{\\emptyset\\}\\)\n\n- 교재의 언급 (p3)\n\n\n\n그림1: 교재에서의 세미알지브라 설명\n\n\n\nExample1.1.5는 우리가 했던 것8의 다차원 예제일 뿐."
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-5wk.html#세미링-starstarstar",
    "href": "posts/HousePrice/2023-04-05-5wk.html#세미링-starstarstar",
    "title": "5wk: 측도론 (1)",
    "section": "세미링 \\((\\star\\star\\star)\\)",
    "text": "세미링 \\((\\star\\star\\star)\\)\n\n세미알지브라와의 차이점은 전체집합을 포함할 수 있느냐의 여부.\n\n단, 세미링은 전체집합을 포함한다는 조건이 빠져있기 때문에 2,3번째 조건 즉, 교집합/차집합에 대해서 닫혀있다는 것을 같다고 볼 수 없다.\n- 정의: 세미링\n집합 \\({\\cal A}\\subset 2^{\\Omega}\\)가 아래의 조건을 만족하면 \\({\\cal A}\\)를 \\(\\Omega\\)에 대한 세미링이라고 부른다.\n\n\\(\\emptyset \\in {\\cal A}\\).\n\\({\\cal A}\\)는 교집합에 닫혀있다.\n\\({\\cal A}\\)는 차집합에 반쯤 닫혀있다.\n\n- 세미링에서도 공집합포함 조건을 생략할 수 있다.\n- 세미링의 예시: 아래의 \\({\\cal A}\\)는 모두 \\(\\Omega\\)에 대한 세미링이다.\n\n예시1: \\(\\Omega=\\{a,b,c,d,e,f\\}\\), \\({\\cal A} = \\{\\emptyset, \\{a\\},\\{b,c,d\\}\\}\\)\n예시2: \\(\\Omega=\\{a,b,c,d,e,f\\}\\), \\({\\cal A} = \\{\\emptyset, \\{a\\},\\{b\\},\\{c,d\\}\\}\\)\n예시3: \\(\\Omega=\\{a,b,c,d,e,f\\}\\), \\({\\cal A} = \\{\\emptyset,\\{a,b,c\\},\\{b,c,d\\}, \\{a\\},\\{b,c\\},\\{d\\}\\}\\)\n\n\n전체집합이 포함될 필요가 없는 세미알지브라 느낌임.\n\n- 세미링의 예시: 아래의 \\({\\cal A}\\)는 모두 \\(\\Omega=\\mathbb{R}\\)에 대한 세미링이다.\n\n예시1: \\({\\cal A} = \\{(a,b]: -\\infty < a < b < \\infty \\}\\cup \\{\\emptyset\\}\\)\n예시2: \\({\\cal A} = \\{[a,b): -\\infty < a < b < \\infty \\}\\cup \\{\\emptyset\\}\\)\n\n세미알지브라의 예시(\\(\\star\\))와 달리 부등호에 equal이 빠져있다. a,b가 \\(-\\infty, \\infty\\)일 필요는 없다. \\(\\to\\) 전체집합을 커버할 필요가 없다는 의미이다.\n위의 두 예시는 (1)공집합을 포함하고, (2)교집합에 닫혀있으며, (3)차집합에 semi-closed 되어있기 때문에 세미링의 예시가된다고 볼 수 있다.\n- 세미알지브라가 아닌 예시: 아래의 \\({\\cal A}\\)는 \\(\\Omega=\\mathbb{R}\\)에 대한 세미알지브라가 아니다.\n\n예시1: \\({\\cal A} = \\{(a,b): -\\infty < a < b < \\infty \\}\\cup \\{\\emptyset\\}\\)\n예시2: \\({\\cal A} = \\{[a,b]: -\\infty < a < b < \\infty \\}\\cup \\{\\emptyset\\}\\)\n\n양쪽이 모두 open이거나 closed 이면, 교집합에 대해서는 닫혀있지만, 차집합에 semi-closed되지 않기 때문에 세미 알지브라라고 볼 수 없다."
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-5wk.html#파이시스템-starstar",
    "href": "posts/HousePrice/2023-04-05-5wk.html#파이시스템-starstar",
    "title": "5wk: 측도론 (1)",
    "section": "파이시스템 (\\(\\star\\star\\))",
    "text": "파이시스템 (\\(\\star\\star\\))\n\n교집합에 대해 닫혀있으면 파이시스템. <- 이 조건 하나만 필요함.\n\n- 정의: \\(\\pi\\)-system\n집합 \\({\\cal A}\\subset 2^{\\Omega}\\)가 아래의 조건을 만족하면 \\({\\cal A}\\)를 \\(\\Omega\\)에 대한 파이스시템 이라고 부른다.\n\n\\({\\cal A}\\)는 교집합에 닫혀있다.\n\n- 파이시스템임을 강조하기 위해서 \\({\\cal A}\\) 대신에 \\({\\cal P}\\) 라고 교재에서 표현하기도 한다.\n- 파이시스템의 예시: 아래는 모두 \\(\\Omega=\\mathbb{R}\\)에 대한 파이시스템이다.\n\n예시1: \\({\\cal A} = \\{(a,b]: -\\infty < a < b < \\infty \\}\\)\n예시2: \\({\\cal A} = \\{[a,b): -\\infty < a < b < \\infty \\}\\)\n예시3: \\({\\cal A} = \\{(a,b): -\\infty < a < b < \\infty \\}\\)\n예시4: \\({\\cal A} = \\{[a,b]: -\\infty < a < b < \\infty \\}\\)"
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-5wk.html#람다시스템-starstar",
    "href": "posts/HousePrice/2023-04-05-5wk.html#람다시스템-starstar",
    "title": "5wk: 측도론 (1)",
    "section": "람다시스템 (\\(\\star\\star\\))",
    "text": "람다시스템 (\\(\\star\\star\\))\n- 정의1: \\(\\lambda\\)-system\n집합 \\({\\cal A}\\subset 2^{\\Omega}\\)가 아래의 조건을 만족하면 \\({\\cal A}\\)를 \\(\\Omega\\)에 대한 람다시스템 이라고 부른다.\n\n\\(\\Omega \\in {\\cal A}\\) (전체집합을 포함한다.)\n\\(\\forall A,B \\in {\\cal A}:~ A\\subset B \\Rightarrow B-A \\in {\\cal A}\\) (A와 B가 포함관계가 있을 때 B-A라는 집합은 람다시스템에 포함되어야 한다. // 포함관계의 차집합은 차집합에 대해서만 닫혀있다.)\n\\(\\forall B_1,B_2,\\dots \\in {\\cal A}\\) such that \\(B_1,B_2\\dots\\) are disjoint: \\[\\uplus_{i=1}^{\\infty} B_i \\in {\\cal A}\\]\n\n(\\(B_1,B_2, \\dots\\)가 disjoint하면 얘네들의 countable union도 람다시스템에 포함되어야 한다.)\n\n람다시스템은 1. 전체집합이 포함되고 2. 두 집합이 포함관계에 있는 경우 차집합에 닫혀있으며 3. 서로소인 가산합집합에 닫혀있다.\n\n- 람다시스템은 여집합에 닫혀있다. 그리고 람다시스템은 공집합을 포함한다.\n\n1번, 2번 조합하면 증명가능 (2번 B자리에 대신 \\(\\Omega\\)를 넣어보자.)\n여집합에 닫혀있고 전체집합을 포함하니까 당연히 공집합을 포함하는 것은 쉽게 유추.\n\n- 람다시스템임을 강조하기위해서 \\({\\cal A}\\) 대신에 \\({\\cal L}\\) 이라고 교재에서 표현하기도 한다.\n- 람다시스템의 느낌: 3주차 시그마필드의 motivation에서 소개한 거의 모든 예제는 사실 람다시스템이다.\n\n람다시스템의 원칙1,2,3은 사실 확률의 공리와 깊게 관련되어있음.\n내 생각: 딘킨은 확률의 공리에 착안해서 람다시스템을 만들지 않았을까?\n\n- 아래는 모두 람다시스템의 예시이다.\n\n\\(\\Omega=\\{H,T\\}\\), \\({\\cal L}=\\{\\emptyset, \\{H\\},\\{T\\},\\Omega\\}\\) – 3주차 예제1\n\\(\\Omega=\\{1,2,3,4,5,6\\}\\), \\({\\cal L}=2^\\Omega\\) – 3주차 예제4\n\\(\\Omega=\\{1,2,3,4,5,6\\}\\), \\({\\cal L}=\\{\\emptyset,\\{6\\},\\{1,2,3,4,5\\},\\Omega\\}\\) – 3주차 예제5\n\\(\\Omega=\\{1,2,3,4,5,6\\}\\), \\({\\cal L}=\\{\\emptyset,\\{1,2,3\\},\\{3,4,5\\},\\Omega\\}\\) – 3주차 예제6\n\\(\\Omega=\\{1,2,3,4,5,6\\}\\), \\({\\cal L}=\\{\\emptyset,\\Omega\\}\\) – 3주차 예제8\n\\(\\Omega=\\{1,2,3,4,5,6\\}\\), \\({\\cal L}=\\{\\emptyset,\\{1\\}, \\{2\\}, \\{2,3,4\\}, \\{1,3,4\\}, \\{3,4\\}, \\{1,2\\},\\Omega\\}\\) – 3주차 예제9,10\n\\(\\Omega=(0,2\\pi]\\), \\({\\cal L}=\\sigma({\\cal A})\\) where \\({\\cal A} = \\{\\{x\\}: x\\in \\mathbb{Q} \\cap \\Omega \\}\\) – 3주차 예제11\n\\(\\Omega=\\{1,2,3,4\\}\\), \\({\\cal L}=\\{\\emptyset, \\{1,2\\}, \\{1,3\\}, \\{1,4\\}, \\{2,3\\}, \\{2,4\\}, \\{3,4\\}, \\Omega\\}\\) – 3주차 예제12에서 교집합 안넣은 버전\n\n\n사실 3wk 측도론 \\(\\cal{F}\\)가 가져야할 조건 4가지만 가지고 \\(\\cal{F}\\)를 정의한다면 시그마필드가 아닌 “람다시스템” 이다. (교집합을 안넣은 법전)\n\n\n람다시스템에 교집합에도 closed 시키게되면 “시그마 필드”가 된다.\n\n- 정의2: \\(\\lambda\\)-system (교재의 정의)\n집합 \\({\\cal A}\\subset 2^{\\Omega}\\)가 아래의 조건을 만족하면 \\({\\cal A}\\)를 \\(\\Omega\\)에 대한 람다시스템 이라고 부른다.\n\n\\(\\Omega \\in {\\cal A}\\)\n\\(\\forall A,B \\in {\\cal A}:~ A\\subset B \\Rightarrow B-A \\in {\\cal A}\\)\n\\(\\forall A_1,A_2,\\dots \\in {\\cal A}\\) such that \\(A_1 \\subset A_2 \\subset \\dots\\): \\[\\cup_{i=1}^{\\infty} A_i \\in {\\cal A}\\]\n\n- Note: 정의1의 3번조건과 정의2의 3번조건은 서로 동치관계이다.\n- 교재에서의 파이시스템, 람다시스템 설명\n\n\n\n그림2: 교재에서의 파이시스템과 람다시스템\n\n\n\n위의 정의에서 기호 \\(A_n \\uparrow A\\)의 의미는 “\\(A_1 \\subset A_2 \\subset \\dots\\) and \\(\\cup_{i}^{\\infty}A_i=A\\)”를 뜻하는 축약표현이다."
  },
  {
    "objectID": "posts/HousePrice/2023-04-05-5wk.html#정리",
    "href": "posts/HousePrice/2023-04-05-5wk.html#정리",
    "title": "5wk: 측도론 (1)",
    "section": "정리",
    "text": "정리\n- 정리표 (hw): 물음표를 채워라\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(A \\cap B\\)\n\\(\\emptyset\\)\n\\(A-B\\)\n\\(\\cup_i\\to\\uplus_i\\)\n\\(\\Omega\\)\n\\(A^c\\)\n\\(A\\cup B\\)\n\\(\\cup_{i=1}^{\\infty}A_i\\)\n\\(\\uplus_{i=1}^{\\infty}B_i\\)\n\\(\\cap_{i=1}^{\\infty}A_i\\)\n\n\n\n\n\\(\\pi\\)-system\n\\(O\\)\n\\(X\\)\n\\(X\\)\n\\(X\\)\n\\(X\\)\n\\(X\\)\n\\(X\\)\n\\(X\\)\n\\(X\\)\n\\(X\\)\n\n\nsemi-ring\n\\(?\\)\n\\(?\\)\n\\(\\Delta\\)\n\\(O\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\n\nsemi-algebra\n\\(?\\)\n\\(?\\)\n\\(\\Delta\\)\n\\(O\\)\n\\(O\\)\n\\(\\Delta\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\n\nring\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\n\nalgebra\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\n\n\\(\\sigma\\)-ring\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\n\n\\(\\lambda\\)-system\n\\(?\\)\n\\(?\\)\n\\(\\Delta'\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\n\n\\(\\sigma\\)-field\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\n\n\nNOTE!\n\n\\(\\Delta\\) : 차집합이 반쯤 닫혀있다. / 여집합에 반쯤 닫혀있다. 등등\n차집합이 닫혀있거나 반쯤 닫혀있으면 \\(\\cup_i\\to\\uplus_i\\) 가 성립한다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(A \\cap B\\)\n\\(\\emptyset\\)\n\\(A-B\\)\n\\(\\cup_iA_i\\to\\uplus B_i\\)\n\\(\\Omega\\)\n\\(A^c\\)\n\\(A\\cup B\\)\n\\(\\cup_{i=1}^{\\infty}A_i\\)\n\\(\\uplus_{i=1}^{\\infty}B_i\\)\n\\(\\cap_{i=1}^{\\infty}A_i\\)\n\n\n\n\n\\(\\pi\\)-system\n\\(O\\)\n\\(X\\)\n\\(X\\)\n\\(X\\)\n\\(X\\)\n\\(X\\)\n\\(X\\)\n\\(X\\)\n\\(X\\)\n\\(X\\)\n\n\nsemi-ring\n\\(?\\)\n\\(O\\)\n\\(\\Delta\\)\n\\(O\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\n\nsemi-algebra\n\\(?\\)\n\\(O\\)\n\\(\\Delta\\)\n\\(O\\)\n\\(O\\)\n\\(\\Delta\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\n\nring\n\\(?\\)\n\\(O\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\n\nalgebra\n\\(?\\)\n\\(O\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\n\n\\(\\sigma\\)-ring\n\\(?\\)\n\\(O\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\n\n\\(\\lambda\\)-system\n\\(?\\)\n\\(O\\)\n\\(\\Delta'\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\\(?\\)\n\n\n\\(\\sigma\\)-field\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\\(O\\)\n\n\n\n- 다이어그램 (포함관계)\n\n\n\n다이어그램(포함관계)\n\n\n\n\\(\\sigma\\)-algebra: countable union에 닫혀있다.\nalgebra: finite한 union에 닫혀있다.\n\n\n\n\n\n\n\n\nG\n\n \n\ncluster_0\n\n RING  \n\ncluster_1\n\n ALGEBRA  \n\ncluster_2\n\n LAMBDA   \n\nσ－ring\n\n σ－ring   \n\nring\n\n ring   \n\nσ－ring->ring\n\n    \n\nsemiring\n\n semiring   \n\nring->semiring\n\n    \n\nπ－system\n\n π－system   \n\nsemiring->π－system\n\n    \n\nσ－algebra\n\n σ－algebra   \n\nσ－algebra->σ－ring\n\n    \n\nalgebra\n\n algebra   \n\nσ－algebra->algebra\n\n    \n\nλ－system\n\n λ－system   \n\nσ－algebra->λ－system\n\n    \n\nalgebra->ring\n\n    \n\nsemialgebra\n\n semialgebra   \n\nalgebra->semialgebra\n\n    \n\nsemialgebra->semiring\n\n   \n\n\n\n\n\n- 다이어그램 (이해용) – 그림은 더럽지만..\n\n\n\n다이어그램(이해용)\n\n\n\n\n\n\n\n\n\nG\n\n \n\ncluster_1\n\n ALGEBRA  \n\ncluster_2\n\n LAMBDA  \n\ncluster_0\n\n RING   \n\nsemiring\n\n semiring   \n\nring\n\n ring   \n\nsemiring->ring\n\n  ∪－stable   \n\nsemialgebra\n\n semialgebra   \n\nsemiring->semialgebra\n\n  Ω－contained   \n\nσ－ring\n\n σ－ring   \n\nring->σ－ring\n\n  σ－∪－stable   \n\nalgebra\n\n algebra   \n\nring->algebra\n\n  Ω－contained   \n\nσ－algebra\n\n σ－algebra   \n\nσ－ring->σ－algebra\n\n  Ω－contained   \n\nsemialgebra->algebra\n\n  ∪－stable   \n\nalgebra->σ－algebra\n\n  σ－∪－stable   \n\nλ－system\n\n λ－system   \n\nλ－system->σ－algebra\n\n  ∩－stable   \n\nπ－system\n\n π－system   \n\nπ－system->semiring\n\n  ＼－semistable  \n\n\n\n\n\n\nRing 에서 algebra가 되려면 \\(\\Omega\\)를 포함시키면 된다.\n길이 \\(\\to\\) \\(\\pi\\) sys에서 시작.\n확률 \\(\\to\\) \\(\\lambda\\)-sys에서 시작."
  },
  {
    "objectID": "posts/Seminar/2023-03-21-gpt3-nsmc.html",
    "href": "posts/Seminar/2023-03-21-gpt3-nsmc.html",
    "title": "Few-shot learning using GPT3",
    "section": "",
    "text": "NSMC - NAVER Sentiment Movie Corpus\n\ngpt3 백본모델로 KoAlpaca를 활용하여 인컨텍스트 퓨삿러닝을 통해 네이버 영화 리뷰 데이터(NSMC - NAVER Sentiment Movie Corpus) 분류문제를 풀어보자.\n\n참고로 KoAlpaca 는 한국어로 인스트럭션 데이터를 한국어 오픈소스 gpt3 모델인 polyglot-ko에 파인튜닝한 모델입니다.\n\n# !pip install transformers\n# !pip install accelerate\n\n\n!mkdir -p data_in/KOR/naver_movie\n!wget https://raw.githubusercontent.com/NLP-kr/tensorflow-ml-nlp-tf2/master/7.PRETRAIN_METHOD/data_in/KOR/naver_movie/ratings_train.txt \\\n              -O data_in/KOR/naver_movie/ratings_train.txt\n!wget https://raw.githubusercontent.com/NLP-kr/tensorflow-ml-nlp-tf2/master/7.PRETRAIN_METHOD/data_in/KOR/naver_movie/ratings_test.txt \\\n              -O data_in/KOR/naver_movie/ratings_test.txt\n\n--2023-04-02 21:25:32--  https://raw.githubusercontent.com/NLP-kr/tensorflow-ml-nlp-tf2/master/7.PRETRAIN_METHOD/data_in/KOR/naver_movie/ratings_train.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.111.133, 185.199.110.133, 185.199.108.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.111.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 14628807 (14M) [text/plain]\nSaving to: ‘data_in/KOR/naver_movie/ratings_train.txt’\n\ndata_in/KOR/naver_m 100%[===================>]  13.95M  --.-KB/s    in 0.1s    \n\n2023-04-02 21:25:34 (97.0 MB/s) - ‘data_in/KOR/naver_movie/ratings_train.txt’ saved [14628807/14628807]\n\n--2023-04-02 21:25:34--  https://raw.githubusercontent.com/NLP-kr/tensorflow-ml-nlp-tf2/master/7.PRETRAIN_METHOD/data_in/KOR/naver_movie/ratings_test.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.110.133, 185.199.111.133, 185.199.109.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.110.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 4893335 (4.7M) [text/plain]\nSaving to: ‘data_in/KOR/naver_movie/ratings_test.txt’\n\ndata_in/KOR/naver_m 100%[===================>]   4.67M  --.-KB/s    in 0.06s   \n\n2023-04-02 21:25:34 (78.6 MB/s) - ‘data_in/KOR/naver_movie/ratings_test.txt’ saved [4893335/4893335]\n\n\n\n\nimport os\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\n\nimport torch\nimport pandas as pd\nimport numpy as np\n\nimport re\n\nimport random\nfrom random import sample\n\nfrom tqdm import tqdm\n\n\n# torch.cuda.is_available()\n# os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"1\"\n\n\nSEED_NUM = 1234\nrandom.seed(SEED_NUM)\n\n\ntokenizer = AutoTokenizer.from_pretrained(\"EleutherAI/polyglot-ko-5.8b\")\n\n\ncls_model = AutoModelForCausalLM.from_pretrained(\"beomi/KoAlpaca-Polyglot\",\n                                                 torch_dtype=torch.float16,\n                                                 device_map='sequential',\n                                                 low_cpu_mem_usage=True).cuda()\n\nLoading checkpoint shards: 100%|██████████████████████████████████████████████████████████████████████████| 3/3 [00:08<00:00,  2.69s/it]\n\n\n\ncls_model.config.max_length = 2048\ncls_model.config.pad_token_id = 0\n\n\n# 데이터 전처리 준비\nDATA_IN_PATH = './data_in/KOR'\nDATA_OUT_PATH = './data_out/KOR'\n\nDATA_TRAIN_PATH = os.path.join(DATA_IN_PATH, 'naver_movie', 'ratings_train.txt')\nDATA_TEST_PATH = os.path.join(DATA_IN_PATH, 'naver_movie', 'ratings_test.txt')\n\ntrain_data = pd.read_csv(DATA_TRAIN_PATH, header = 0, delimiter = '\\t', quoting = 3)\ntrain_data = train_data.dropna()\n\n\nprint('데이터 positive 라벨: ', '긍정')\nprint('데이터 negative 라벨: ', '부정')\n\n데이터 positive 라벨:  긍정\n데이터 negative 라벨:  부정\n\n\n\nprint('학습 예시 케이스 구조: ', '문장: 오늘 기분이 좋아\\n감정: 긍정\\n')\n\n학습 예시 케이스 구조:  문장: 오늘 기분이 좋아\n감정: 긍정\n\n\n\n\nprint('gpt3 최대 토큰 길이: ', cls_model.config.max_position_embeddings)\n\ngpt3 최대 토큰 길이:  2048\n\n\n\nsent_lens = [len(tokenizer(s).input_ids) for s in tqdm(train_data['document'])]\n\nprint('Few shot 케이스 토큰 평균 길이: ', np.mean(sent_lens))\nprint('Few shot 케이스 토큰 최대 길이: ', np.max(sent_lens))\nprint('Few shot 케이스 토큰 길이 표준편차: ',np.std(sent_lens))\nprint('Few shot 케이스 토큰 길이 80 퍼센타일: ',np.percentile(sent_lens, 80))\n\n100%|████████████████████████████████████████████████████████████████████████████████████████| 149995/149995 [00:07<00:00, 21048.91it/s]\n\n\nFew shot 케이스 토큰 평균 길이:  20.22912763758792\nFew shot 케이스 토큰 최대 길이:  280\nFew shot 케이스 토큰 길이 표준편차:  16.48828728915166\nFew shot 케이스 토큰 길이 80 퍼센타일:  27.0\n\n\n\ntrain_fewshot_data = []\n\nfor train_sent, train_label in tqdm(train_data[['document', 'label']].values):\n    tokens = tokenizer(train_sent).input_ids\n\n    if len(tokens) <= 25:\n        train_fewshot_data.append((train_sent, train_label))\n\n100%|████████████████████████████████████████████████████████████████████████████████████████| 149995/149995 [00:07<00:00, 20502.42it/s]\n\n\n\ntest_data = pd.read_csv(DATA_TEST_PATH, header=0, delimiter='\\t', quoting=3)\ntest_data = test_data.dropna()\ntest_data.head()\n\n\n\n\n\n  \n    \n      \n      id\n      document\n      label\n    \n  \n  \n    \n      0\n      6270596\n      굳 ㅋ\n      1\n    \n    \n      1\n      9274899\n      GDNTOPCLASSINTHECLUB\n      0\n    \n    \n      2\n      8544678\n      뭐야 이 평점들은.... 나쁘진 않지만 10점 짜리는 더더욱 아니잖아\n      0\n    \n    \n      3\n      6825595\n      지루하지는 않은데 완전 막장임... 돈주고 보기에는....\n      0\n    \n    \n      4\n      6723715\n      3D만 아니었어도 별 다섯 개 줬을텐데.. 왜 3D로 나와서 제 심기를 불편하게 하죠??\n      0\n    \n  \n\n\n\n\n\n# 평가 데이터 수\nsample_size = 500\n\n# 평가에서 활용할 few-shot 예제를 묶음으로 저장\ntrain_fewshot_samples = []\n\nfor _ in range(sample_size):\n    # few-shot 예제를 10개씩 묶음\n    fewshot_examples = sample(train_fewshot_data, 10)\n    train_fewshot_samples.append(fewshot_examples)\n\nif sample_size < len(test_data['id']):\n    test_data = test_data.sample(sample_size, random_state=SEED_NUM)\n\n\ntrain_fewshot_samples[1]\n\n[('레전드.', 1),\n ('보고 있으면 어느새 영화에 빠져들어 있다. 마지막 장면을 생각하면 아직도 가슴이 찡하다.', 1),\n ('오즈의 영역을 넘어 마술의 경지에 이르는 허우.', 1),\n (\"'스트레스 해소용 영화' 로써만 강추..\", 0),\n ('볼만햇다 액션영화가 아닌데 아쉽다', 1),\n ('귀여운 기니피그가 나오는... 디즈니 영화. 디즈니 디즈니 디즈니', 0),\n ('햄릿! 돈은 있는데.. 정말 매너리즘에 빠진 최악의 중국 영화', 0),\n ('영화도 좋지만 책도 꼭 읽어보세요ㅎㅎ', 1),\n ('많은 생각이 떠돌게 되는 영화...', 1),\n ('개봉일을 잡았다는게 신기한 싸구려 영화.. 싼맛에 수입한거겠지?', 0)]\n\n\n\ndef build_prompt_text(sent):\n    return \"문장: \" + sent + '\\n감정:'\n\ndef clean_text(sent):\n    sent_clean = re.sub(\"[^가-힣ㄱ-ㅎㅏ-ㅣ\\\\s]\", \"\", sent)\n    return sent_clean\n\ndef generate_fewshot_example(data, with_label=True):\n    example_text, example_label = data\n    # 텍스트 전처리\n    cleaned_example_text = clean_text(example_text)\n    # Prompt 형식 구성\n    fewshot_example_text = build_prompt_text(cleaned_example_text)\n    # Label 추가\n    if with_label:\n      fewshot_example_text += ' 긍정' if example_label == 1 else ' 부정' + '\\n'\n    \n    return fewshot_example_text\n\ndef predict_by_generation(prompt_text):\n    # 토큰화 및 인덱싱\n    tokens = tokenizer(prompt_text, return_tensors=\"pt\")\n    token_ids, attn_mask = tokens.input_ids.cuda(), tokens.attention_mask.cuda()\n    # 텍스트 생성\n    gen_tokens = cls_model.generate(input_ids=token_ids, attention_mask=attn_mask,\n                                    max_new_tokens=1, pad_token_id=0)\n    # 인덱스 복호화\n    pred = tokenizer.batch_decode(gen_tokens[:, -1])[0].strip()\n    \n    return pred\n\n\ntest_data\n\n\n\n\n\n  \n    \n      \n      id\n      document\n      label\n    \n  \n  \n    \n      0\n      6270596\n      굳 ㅋ\n      1\n    \n    \n      1\n      9274899\n      GDNTOPCLASSINTHECLUB\n      0\n    \n    \n      2\n      8544678\n      뭐야 이 평점들은.... 나쁘진 않지만 10점 짜리는 더더욱 아니잖아\n      0\n    \n    \n      3\n      6825595\n      지루하지는 않은데 완전 막장임... 돈주고 보기에는....\n      0\n    \n    \n      4\n      6723715\n      3D만 아니었어도 별 다섯 개 줬을텐데.. 왜 3D로 나와서 제 심기를 불편하게 하죠??\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      49995\n      4608761\n      오랜만에 평점 로긴했네ㅋㅋ 킹왕짱 쌈뽕한 영화를 만났습니다 강렬하게 육쾌함\n      1\n    \n    \n      49996\n      5308387\n      의지 박약들이나 하는거다 탈영은 일단 주인공 김대희 닮았고 이등병 찐따 OOOO\n      0\n    \n    \n      49997\n      9072549\n      그림도 좋고 완성도도 높았지만... 보는 내내 불안하게 만든다\n      0\n    \n    \n      49998\n      5802125\n      절대 봐서는 안 될 영화.. 재미도 없고 기분만 잡치고.. 한 세트장에서 다 해먹네\n      0\n    \n    \n      49999\n      6070594\n      마무리는 또 왜이래\n      0\n    \n  \n\n49997 rows × 3 columns\n\n\n\n\nreal_labels = []\npred_tokens = []\n\ntotal_len = len(test_data[['document','label']].values)\n\nfor i, row in tqdm(enumerate(test_data[['document','label']].values), total=total_len):\n    prompt_text = ''\n\n    for ex in train_fewshot_samples[i]:\n        prompt_text += generate_fewshot_example(ex)\n\n    prompt_text += generate_fewshot_example(row, with_label=False)\n\n    pred = predict_by_generation(prompt_text)\n\n    pred_tokens.append(pred)\n    real_labels.append('긍정' if row[1] == 1 else '부정')\n\n100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 500/500 [00:30<00:00, 16.16it/s]\n\n\n\naccuracy_match = [p == t for p, t in zip(pred_tokens, real_labels)]\naccuracy = len([m for m in accuracy_match if m]) / len(real_labels)\n\nprint(accuracy)\n\n0.762\n\n\n\ndef build_prompt_text(sent):\n    return '다음 문장은 긍정일까요 부정일까요?\\n' + sent + '\\n정답:'\n\nreal_labels = []\npred_tokens = []\n\ntotal_len = len(test_data[['document','label']].values)\n\nfor i, row in tqdm(enumerate(test_data[['document','label']].values), total=total_len):\n    prompt_text = ''\n\n    for ex in train_fewshot_samples[i]:\n        prompt_text += generate_fewshot_example(ex)\n\n    prompt_text += generate_fewshot_example(row, with_label=False)\n\n    pred = predict_by_generation(prompt_text)\n\n    pred_tokens.append(pred)\n    real_labels.append('긍정' if row[1] == 1 else '부정')\n\n100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 500/500 [00:39<00:00, 12.80it/s]\n\n\n\naccuracy_match = [p == t for p, t in zip(pred_tokens, real_labels)]\naccuracy = len([m for m in accuracy_match if m]) / len(real_labels)\n\nprint(accuracy)\n\n0.744"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "noteda",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApr 12, 2023\n\n\n[SOLAR] To do list\n\n\njiyunLim\n\n\n\n\nApr 11, 2023\n\n\n[SOLAR] SARIMA (MSE: 0.478)\n\n\nJiyunLim\n\n\n\n\nApr 11, 2023\n\n\nGithub remote: error: this exceeds GitHub’s file size limit of 100.00 MB\n\n\nJiyunLim\n\n\n\n\nApr 10, 2023\n\n\n[SOLAR] LSTM\n\n\nJiyunLim\n\n\n\n\nApr 10, 2023\n\n\nARIMA (Day)\n\n\nJiyunLim\n\n\n\n\nApr 10, 2023\n\n\nLSTM for Time Series Prediction (연습)\n\n\nJiyunLim\n\n\n\n\nApr 10, 2023\n\n\n스타벅스 주가예측\n\n\nJiyunLim\n\n\n\n\nApr 10, 2023\n\n\n연습장\n\n\nJiyunLim\n\n\n\n\nApr 9, 2023\n\n\n[SOLAR] STGCN Ver1 lag1\n\n\nJiyunLim\n\n\n\n\nApr 9, 2023\n\n\n[SOLAR] STGCN Ver2 lag1\n\n\nJiyunLim\n\n\n\n\nApr 9, 2023\n\n\nARIMA (시간별 예측안됨, 에러)\n\n\nJiyunLim\n\n\n\n\nApr 9, 2023\n\n\n푸리에 변환\n\n\nJiyunLim\n\n\n\n\nApr 8, 2023\n\n\n[SOLAR] STGCN Ver2 lag4\n\n\nJiyunLim\n\n\n\n\nApr 7, 2023\n\n\n[SOLAR] Dataset for STGCN Ver2\n\n\nJiyunLim\n\n\n\n\nApr 7, 2023\n\n\n[SOLAR] STGCN Ver1 lag4\n\n\nJiyunLim\n\n\n\n\nApr 6, 2023\n\n\n[SOLAR] Correlation coefficient by region\n\n\nJiyunLim\n\n\n\n\nApr 6, 2023\n\n\n[SOLAR] Dataset for STGCN Ver1\n\n\nJiyunLim\n\n\n\n\nApr 6, 2023\n\n\n[SOLAR] EPT by region\n\n\nJiyunLim\n\n\n\n\nApr 6, 2023\n\n\n[SOLAR] WindmillOutputLargeDatasetLoader\n\n\nJiyunLim\n\n\n\n\nApr 6, 2023\n\n\n[SOLAR] yU\n\n\nJiyunLim\n\n\n\n\nApr 6, 2023\n\n\nChikenpoxDataset\n\n\nJiyunLim\n\n\n\n\nApr 6, 2023\n\n\nWindmillOutputLargeDataset 분석 (실패)\n\n\nJiyunLim\n\n\n\n\nApr 6, 2023\n\n\n[R] pivot_wider Error\n\n\nJiyunLim\n\n\n\n\nApr 6, 2023\n\n\n[R] 문자열을 변수명으로 & assign\n\n\nJiyunLim\n\n\n\n\nApr 5, 2023\n\n\nHouse Price feedback\n\n\njiyunLim\n\n\n\n\nApr 5, 2023\n\n\nppt 폰트\n\n\njiyunLim\n\n\n\n\nApr 4, 2023\n\n\n[SOLAR] EPT\n\n\n신록예찬\n\n\n\n\nApr 4, 2023\n\n\n5wk: 측도론 (1)\n\n\nJiyunLim\n\n\n\n\nApr 4, 2023\n\n\nHouse Price\n\n\njiyunLim\n\n\n\n\nApr 3, 2023\n\n\n일사량자료정리\n\n\n임지윤, 신록예찬\n\n\n\n\nApr 3, 2023\n\n\n일사량자료정리(수정 for ARIMA)\n\n\nJiyunLim\n\n\n\n\nApr 2, 2023\n\n\n[Python] 새로운 열 할당(.assign) 및 특정 열 선택\n\n\njiyunLim\n\n\n\n\nApr 2, 2023\n\n\n초록 작성법\n\n\nJiyunLim\n\n\n\n\nApr 1, 2023\n\n\n[Python] 중첩인덱스 깨는 법\n\n\njiyunLim\n\n\n\n\nApr 1, 2023\n\n\n학회\n\n\nJiyunLim\n\n\n\n\nMar 30, 2023\n\n\n[R]Correlation coefficient by region\n\n\njiyun Lim\n\n\n\n\nMar 30, 2023\n\n\n[R]데이터 재구조화\n\n\njiyun Lim\n\n\n\n\nMar 29, 2023\n\n\nData preprocessing\n\n\njiyun Lim\n\n\n\n\nMar 21, 2023\n\n\nFew-shot learning using GPT3\n\n\njiyunLim\n\n\n\n\nMar 21, 2023\n\n\nLibraries for DA\n\n\njiyunLim\n\n\n\n\nMar 21, 2023\n\n\nScorecard\n\n\njiyun Lim\n\n\n\n\nMar 21, 2023\n\n\ndata visualization\n\n\njiyun Lim\n\n\n\n\nMar 21, 2023\n\n\ndowncasting\n\n\njiyun Lim\n\n\n\n\n\nMar 21, 2023\n\n\nresumetable\n\n\njiyun Lim\n\n\n\n\nMar 18, 2023\n\n\nWelcome To My Blog\n\n\nTristan O’Malley\n\n\n\n\nMar 14, 2023\n\n\nLists to read\n\n\njiyun Lim\n\n\n\n\nFeb 24, 2023\n\n\nJulia 설치 및 실행\n\n\njiyun Lim\n\n\n\n\n\n\nNo matching items"
  }
]