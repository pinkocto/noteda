[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/2023-03-21-scorecard.html",
    "href": "posts/2023-03-21-scorecard.html",
    "title": "Scorecard",
    "section": "",
    "text": "import pandas as pd\n\n\ncol = ['Model', 'scaling', 'Oversampling', 'Undersampling','hyper tunning', 'train(macro F1)','test(macro F1)', 'sub score']\n\n\ndf_row = pd.DataFrame(columns = col)\ndf_row['Model'] = ['DT','et']\n# df_row['missing'] = ['X'] # 해당 데이터는 결측치 없음.\ndf_row['scaling'] = ['X', 'O']\ndf_row['Oversampling'] = ['X', 'SMOTE']\ndf_row['Undersampling'] = ['X', 'X']\ndf_row['hyper tunning'] = ['X', 'O']\ndf_row['train(macro F1)'] = [1.0, 1.0]\ndf_row['test(macro F1)'] = [0.69, 0.76]\ndf_row['sub score'] = [0.73807, 0.76054]\n\n\ndf_row\n\n\n\n\n\n  \n    \n      \n      Model\n      scaling\n      Oversampling\n      Undersampling\n      hyper tunning\n      train(macro F1)\n      test(macro F1)\n      sub score\n    \n  \n  \n    \n      0\n      DT\n      X\n      X\n      X\n      X\n      1.0\n      0.69\n      0.73807\n    \n    \n      1\n      et\n      O\n      SMOTE\n      X\n      O\n      1.0\n      0.76\n      0.76054"
  },
  {
    "objectID": "posts/2023-03-23-read-list.html",
    "href": "posts/2023-03-23-read-list.html",
    "title": "Lists to read",
    "section": "",
    "text": "0. For Research\n\n시간별 기상 변화를 고려한 LSTM 기반 일사량 예측에 관한 연구\n\n\n\n1. GNN\n\nGraph Representation Learning Book\nscGCN is a graph convolutional networks algorithm for knowledge transfer in single cell omics\nhttps://wandb.ai/yashkotadia/gatedgcn-pattern/reportlist\nCt Image Denoising With Encoder-Decoder Based Graph Convolutional Networks\n\nhttps://paperswithcode.com/sota/point-cloud-segmentation-on-pointcloud-c\n\n\n2. RNN\n\nLearning Phrase Representations using RNN Encoder-Decoder for Statistical Machine Translation\nLight Gated Recurrent Units for Speech Recognition"
  },
  {
    "objectID": "posts/2023-03-21-resumetable.html",
    "href": "posts/2023-03-21-resumetable.html",
    "title": "resumetable",
    "section": "",
    "text": "def resumetable(df):\n    print(f'데이터셋 형상: {df.shape}')\n    summary = pd.DataFrame(df.dtypes, columns = ['데이터 타입'])\n    summary = summary.reset_index()\n    summary = summary.rename(columns = {'index':'피처'})\n    summary['결측값 개수'] = df.isnull().sum().values\n    summary['고윳값 개수'] = df.nunique().values\n    summary['첫 번째 값'] = df.loc[0].values\n    summary['두 번째 값'] = df.loc[1].values\n    summary['세 번째 값'] = df.loc[2].values\n            \n    return summary\nsummary = resumetable(train) \nsummary"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/2023-03-29-data0.html",
    "href": "posts/2023-03-29-data0.html",
    "title": "Data preprocessing",
    "section": "",
    "text": "raw data\nprep_data\nDownload Link (homepage)\n\n\n\n\n\n\n\n\n\nfile name\ndescription\nnote\n\n\n\n\nOBS_ASOS_TIM_data0.csv\n2021-01-01 ~ 2021-12-31\n21년 데이터셋 (1년씩 다운 가능)\n\n\nOBS_ASOS_TIM_data1.csv\n2022-01-01 ~ 2022-12-31\n22년 데이터셋 (1년씩 다운 가능)\n\n\nraw.csv\n2021-01-01 ~ 2022-12-31\n21~22년 데이터셋 (위의 두개 데이터 합친 것)\n\n\nprep_data.csv\nraw.csv 전처리한 데이터셋\n\n\n\ntest_raw.csv\n2023-01-01 ~ 2023-01-15\n2주간의 데이터셋 for test (확정x)\n\n\nprep_test.csv\ntest_raw.csv 전처리한 데이터셋\nprep_data와 전처리과정 동일\n\n\n\n\n2021-01-01부터 2022-12-31 약 2년간의 데이터셋\n00시부터 23시까지 1시간 간격으로 측정한 데이터셋 (08시부터 18시까지 관측된 데이터가 대다수)\n총 49개의 지점\n\n\nimport pandas as pd\nimport numpy as np\nimport gc\n\n\ndf0 = pd.read_csv('./data/OBS_ASOS_TIM_data0.csv', encoding='cp949') # 2021-01-01 ~ 2021-12-31\ndf1 = pd.read_csv('./data/OBS_ASOS_TIM_data1.csv') # 2022-01-01 ~ 2023-12-31\ndf2 = pd.read_csv('./data/test_raw.csv', encoding='cp949') # 2023-01-01 ~ 2023-01-15\n\n\n# # dtype 변환 및 hour변수 생성.\n# df1['일시'] = pd.to_datetime(df1['일시'])\n# df1['Datetime'] = df1['일시'].dt.date\n# df1['hour'] = df1['일시'].dt.hour\n# df1.head()\n\n\n# import datetime\n# df1 = df1[df1['Datetime'] != datetime.date(2023, 1, 1)]\n# df1 = df1.drop(['Datetime', 'hour'], axis=1)\n# df1.to_csv('./data/OBS_ASOS_TIM_data1.csv', index=False)\n\n\ndf_raw = pd.concat([df0, df1])\ndf_raw.head()\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2021-01-01 08:00\n      0.00\n    \n    \n      1\n      93\n      북춘천\n      2021-01-01 09:00\n      0.37\n    \n    \n      2\n      93\n      북춘천\n      2021-01-01 10:00\n      0.96\n    \n    \n      3\n      93\n      북춘천\n      2021-01-01 11:00\n      1.40\n    \n    \n      4\n      93\n      북춘천\n      2021-01-01 12:00\n      1.72\n    \n  \n\n\n\n\n\ndf_raw.shape\n\n(444720, 4)\n\n\n\n# 2021-01-01 ~ 2023-01-01 dataset (2 years)\n# df_raw.to_csv('./data/raw.csv', index=False)"
  },
  {
    "objectID": "posts/2023-03-29-data0.html#데이터-탐색-for-preprocessing",
    "href": "posts/2023-03-29-data0.html#데이터-탐색-for-preprocessing",
    "title": "Data preprocessing",
    "section": "데이터 탐색 (for preprocessing)",
    "text": "데이터 탐색 (for preprocessing)\n\ngc.collect()\n\n38\n\n\n\n관측지점 수\n\n# 관측지점 수\nlen(df0['지점'].unique()), len(df1['지점'].unique())\n\n(48, 49)\n\n\n22년도에 관측지점이 하나 더 추가된 듯하다..\n\nset(df1['지점명'].unique()) - (set(df0['지점명'].unique()) & set(df1['지점명'].unique()))\n\n{'제천'}\n\n\n\ndf1[df1['지점명']=='제천']  # 관측기록이 1회밖에 없다.\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n    \n  \n  \n    \n      167426\n      221\n      제천\n      2022-10-27 07:00:00\n      0.0\n    \n  \n\n\n\n\n제천에서 관측된 값이 하나밖에 없으므로 제거해주는 것이 좋을 듯 하다.\n\ndf0['지점명'].unique(),  df1['지점명'].unique()\n\n(array(['북춘천', '철원', '동두천', '파주', '대관령', '춘천', '백령도', '북강릉', '강릉', '서울',\n        '인천', '원주', '울릉도', '수원', '충주', '서산', '청주', '대전', '추풍령', '안동', '상주',\n        '포항', '대구', '전주', '창원', '광주', '부산', '목포', '여수', '흑산도', '고창', '홍성',\n        '제주', '고산', '진주', '고창군', '영광군', '김해시', '순창군', '북창원', '양산시', '보성군',\n        '강진군', '의령군', '함양군', '광양시', '청송군', '경주시'], dtype=object),\n array(['북춘천', '철원', '동두천', '파주', '대관령', '춘천', '백령도', '북강릉', '강릉', '서울',\n        '인천', '원주', '울릉도', '수원', '충주', '서산', '청주', '대전', '추풍령', '안동', '상주',\n        '포항', '대구', '전주', '창원', '광주', '부산', '목포', '여수', '흑산도', '고창', '홍성',\n        '제주', '고산', '진주', '제천', '고창군', '영광군', '김해시', '순창군', '북창원', '양산시',\n        '보성군', '강진군', '의령군', '함양군', '광양시', '청송군', '경주시'], dtype=object))\n\n\n\n\n날짜형 변환 및 Datetime, hour 변수 생성\n\n# dtype 변환 및 hour변수 생성.\ndf_raw['일시'] = pd.to_datetime(df_raw['일시'])\ndf_raw['Datetime'] = df_raw['일시'].dt.date\ndf_raw['hour'] = df_raw['일시'].dt.hour\ndf_raw.head()\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2021-01-01 08:00:00\n      0.00\n      2021-01-01\n      8\n    \n    \n      1\n      93\n      북춘천\n      2021-01-01 09:00:00\n      0.37\n      2021-01-01\n      9\n    \n    \n      2\n      93\n      북춘천\n      2021-01-01 10:00:00\n      0.96\n      2021-01-01\n      10\n    \n    \n      3\n      93\n      북춘천\n      2021-01-01 11:00:00\n      1.40\n      2021-01-01\n      11\n    \n    \n      4\n      93\n      북춘천\n      2021-01-01 12:00:00\n      1.72\n      2021-01-01\n      12\n    \n  \n\n\n\n\n\ndf_raw.info()\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 444720 entries, 0 to 229676\nData columns (total 6 columns):\n #   Column     Non-Null Count   Dtype         \n---  ------     --------------   -----         \n 0   지점         444720 non-null  int64         \n 1   지점명        444720 non-null  object        \n 2   일시         444720 non-null  datetime64[ns]\n 3   일사(MJ/m2)  444720 non-null  float64       \n 4   Datetime   444720 non-null  object        \n 5   hour       444720 non-null  int64         \ndtypes: datetime64[ns](1), float64(1), int64(2), object(2)\nmemory usage: 23.8+ MB\n\n\n\ndf_raw.shape[0]/df_raw['지점명'].nunique() # 지점하나당 9000개 정도의 관측치가 있음.\n\n9075.918367346938\n\n\n\n\n시간대별 관측치 수\n\ndf_raw['hour'].value_counts().sort_index()\n\n0       114\n1       114\n2       114\n3       114\n4       114\n5       186\n6     12896\n7     23300\n8     33764\n9     33779\n10    33780\n11    33763\n12    33768\n13    33773\n14    33773\n15    33772\n16    33783\n17    33759\n18    33737\n19    22851\n20    13032\n21      206\n22      114\n23      114\nName: hour, dtype: int64\n\n\n00시부터 23시까지 필터링해서 홈페이지에서 다운받아왔지만 대다수 데이터가 08시~18시까지 관측되어있음.\n\n\n지점별 관측치 수 (2021-01-01 ~ 2023-01-01)\n\npd.DataFrame(df_raw['지점명'].value_counts())\n\n\n\n\n\n  \n    \n      \n      지점명\n    \n  \n  \n    \n      백령도\n      9673\n    \n    \n      울릉도\n      9608\n    \n    \n      창원\n      9595\n    \n    \n      의령군\n      9594\n    \n    \n      북강릉\n      9592\n    \n    \n      강진군\n      9591\n    \n    \n      제주\n      9591\n    \n    \n      대구\n      9591\n    \n    \n      목포\n      9587\n    \n    \n      북창원\n      9586\n    \n    \n      포항\n      9585\n    \n    \n      홍성\n      9585\n    \n    \n      여수\n      9585\n    \n    \n      철원\n      9584\n    \n    \n      북춘천\n      9584\n    \n    \n      함양군\n      9583\n    \n    \n      서울\n      9582\n    \n    \n      춘천\n      9581\n    \n    \n      청송군\n      9581\n    \n    \n      고산\n      9581\n    \n    \n      보성군\n      9580\n    \n    \n      경주시\n      9579\n    \n    \n      원주\n      9579\n    \n    \n      대관령\n      9578\n    \n    \n      광양시\n      9576\n    \n    \n      안동\n      9574\n    \n    \n      김해시\n      9574\n    \n    \n      인천\n      9573\n    \n    \n      서산\n      9572\n    \n    \n      고창군\n      9571\n    \n    \n      수원\n      9570\n    \n    \n      전주\n      9566\n    \n    \n      순창군\n      9566\n    \n    \n      청주\n      9565\n    \n    \n      진주\n      9563\n    \n    \n      추풍령\n      9557\n    \n    \n      영광군\n      9554\n    \n    \n      부산\n      9553\n    \n    \n      양산시\n      9547\n    \n    \n      고창\n      9531\n    \n    \n      강릉\n      9478\n    \n    \n      광주\n      9469\n    \n    \n      흑산도\n      9428\n    \n    \n      대전\n      9418\n    \n    \n      파주\n      6172\n    \n    \n      상주\n      6169\n    \n    \n      동두천\n      6164\n    \n    \n      충주\n      5254\n    \n    \n      제천\n      1\n    \n  \n\n\n\n\n\n365*2*11 # 11시간관측을 기준으로 했을 때 지점당 관측치 개수..\n\n8030\n\n\n대다수 지점에서 2년간 약 9500건 관측되었지만, 파주, 상주, 동두천, 충주, 제천(1)은 다른지점에 비해 관측치가 적음.\n\n\n파주, 상주, 동두천\n\ndf_raw.head() ## 북춘천\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2021-01-01 08:00:00\n      0.00\n      2021-01-01\n      8\n    \n    \n      1\n      93\n      북춘천\n      2021-01-01 09:00:00\n      0.37\n      2021-01-01\n      9\n    \n    \n      2\n      93\n      북춘천\n      2021-01-01 10:00:00\n      0.96\n      2021-01-01\n      10\n    \n    \n      3\n      93\n      북춘천\n      2021-01-01 11:00:00\n      1.40\n      2021-01-01\n      11\n    \n    \n      4\n      93\n      북춘천\n      2021-01-01 12:00:00\n      1.72\n      2021-01-01\n      12\n    \n  \n\n\n\n\n\ndf_raw[df_raw['지점명']=='파주'].iloc[[0]] \n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      10961\n      99\n      파주\n      2021-10-12\n      0.0\n      2021-10-12\n      0\n    \n  \n\n\n\n\n\ndf_raw[df_raw['지점명']=='상주'].iloc[[0]]\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      84525\n      137\n      상주\n      2021-10-12\n      0.0\n      2021-10-12\n      0\n    \n  \n\n\n\n\n\ndf_raw[df_raw['지점명']=='동두천'].iloc[[0]]\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      9583\n      98\n      동두천\n      2021-10-12\n      0.0\n      2021-10-12\n      0\n    \n  \n\n\n\n\n\n\n충주\n\ndf_raw[df_raw['지점명']=='충주'].iloc[[0]]\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      60308\n      127\n      충주\n      2021-11-18 18:00:00\n      0.0\n      2021-11-18\n      18\n    \n  \n\n\n\n\n\n\n제천\n\ndf_raw[df_raw['지점명']=='제천']\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      167426\n      221\n      제천\n      2022-10-27 07:00:00\n      0.0\n      2022-10-27\n      7\n    \n  \n\n\n\n\n\n보유기간 1904년 4월 ~ 현재 (지점별 상이함)\n\n\n파주, 상주, 동두천 지점은 2021-10-12일 이전의 기록은 보유하고 있지 않음.\n충주는 2021-11-18일 이전의 기록은 보유하고 있지 않음.\n제천은 2022-10-27일 단 하루만의 기록만 있음.\nref: https://minwon.kma.go.kr/main/obvStn.do\nref: https://data.kma.go.kr/data/grnd/selectAsosRltmList.do?pgmNo=36"
  },
  {
    "objectID": "posts/2023-03-29-data0.html#데이터-처리-및-csv파일로-내보내기",
    "href": "posts/2023-03-29-data0.html#데이터-처리-및-csv파일로-내보내기",
    "title": "Data preprocessing",
    "section": "데이터 처리 및 csv파일로 내보내기",
    "text": "데이터 처리 및 csv파일로 내보내기\n\n제천, 파주, 상주, 동두천 제거\n\ndf_prep1 = df_raw[~df_raw['지점명'].str.contains('제천|파주|상주|동두천|충주')]\n\n\n\n관측시간 08시 ~ 18시\n\ndf_prep1[(df_prep1['hour']>=8) & (df_prep1['hour'] <= 18)]\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2021-01-01 08:00:00\n      0.00\n      2021-01-01\n      8\n    \n    \n      1\n      93\n      북춘천\n      2021-01-01 09:00:00\n      0.37\n      2021-01-01\n      9\n    \n    \n      2\n      93\n      북춘천\n      2021-01-01 10:00:00\n      0.96\n      2021-01-01\n      10\n    \n    \n      3\n      93\n      북춘천\n      2021-01-01 11:00:00\n      1.40\n      2021-01-01\n      11\n    \n    \n      4\n      93\n      북춘천\n      2021-01-01 12:00:00\n      1.72\n      2021-01-01\n      12\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      229672\n      283\n      경주시\n      2022-12-31 14:00:00\n      1.82\n      2022-12-31\n      14\n    \n    \n      229673\n      283\n      경주시\n      2022-12-31 15:00:00\n      1.52\n      2022-12-31\n      15\n    \n    \n      229674\n      283\n      경주시\n      2022-12-31 16:00:00\n      0.96\n      2022-12-31\n      16\n    \n    \n      229675\n      283\n      경주시\n      2022-12-31 17:00:00\n      0.35\n      2022-12-31\n      17\n    \n    \n      229676\n      283\n      경주시\n      2022-12-31 18:00:00\n      0.01\n      2022-12-31\n      18\n    \n  \n\n352279 rows × 6 columns\n\n\n\n\ndf_prep1[(df_prep1['hour']>=8) & (df_prep1['hour'] <= 18)]['hour'].value_counts().sort_index()\n\n8     32025\n9     32038\n10    32036\n11    32020\n12    32025\n13    32028\n14    32029\n15    32028\n16    32039\n17    32017\n18    31994\nName: hour, dtype: int64\n\n\n\ndf_prep2 = df_prep1[(df_prep1['hour']>=8) & (df_prep1['hour'] <= 18)]\ndf_prep2.head()\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2021-01-01 08:00:00\n      0.00\n      2021-01-01\n      8\n    \n    \n      1\n      93\n      북춘천\n      2021-01-01 09:00:00\n      0.37\n      2021-01-01\n      9\n    \n    \n      2\n      93\n      북춘천\n      2021-01-01 10:00:00\n      0.96\n      2021-01-01\n      10\n    \n    \n      3\n      93\n      북춘천\n      2021-01-01 11:00:00\n      1.40\n      2021-01-01\n      11\n    \n    \n      4\n      93\n      북춘천\n      2021-01-01 12:00:00\n      1.72\n      2021-01-01\n      12\n    \n  \n\n\n\n\n\ndf_prep2['지점명'].nunique()\n\n44\n\n\n\ndf_prep2['지점명'].value_counts()\n\n북춘천    8030\n북강릉    8030\n철원     8030\n강진군    8030\n백령도    8029\n의령군    8029\n홍성     8029\n목포     8028\n창원     8028\n춘천     8027\n제주     8026\n원주     8026\n대구     8026\n서울     8025\n북창원    8023\n여수     8023\n함양군    8023\n대관령    8022\n포항     8021\n보성군    8021\n인천     8019\n청송군    8019\n서산     8019\n김해시    8018\n고산     8018\n경주시    8018\n수원     8014\n광양시    8012\n안동     8012\n순창군    8012\n고창군    8011\n청주     8009\n추풍령    8007\n전주     8006\n영광군    8001\n진주     7999\n부산     7989\n양산시    7987\n고창     7981\n울릉도    7974\n광주     7925\n강릉     7920\n흑산도    7896\n대전     7887\nName: 지점명, dtype: int64\n\n\n\ndf_prep2.to_csv('./data/prep_data.csv', index=False)"
  },
  {
    "objectID": "posts/2023-03-29-data0.html#테스트용-데이터-전처리",
    "href": "posts/2023-03-29-data0.html#테스트용-데이터-전처리",
    "title": "Data preprocessing",
    "section": "테스트용 데이터 전처리",
    "text": "테스트용 데이터 전처리\n\n# df2 = pd.read_csv('./data/test_raw.csv', encoding='cp949')\ngc.collect()\n\n1258\n\n\n\n# dtype 변환 및 hour변수 생성.\ndf2['일시'] = pd.to_datetime(df2['일시'])\ndf2['Datetime'] = df2['일시'].dt.date\ndf2['hour'] = df2['일시'].dt.hour\ndf2.head()\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2023-01-01 08:00:00\n      0.00\n      2023-01-01\n      8\n    \n    \n      1\n      93\n      북춘천\n      2023-01-01 09:00:00\n      0.32\n      2023-01-01\n      9\n    \n    \n      2\n      93\n      북춘천\n      2023-01-01 10:00:00\n      0.90\n      2023-01-01\n      10\n    \n    \n      3\n      93\n      북춘천\n      2023-01-01 11:00:00\n      1.73\n      2023-01-01\n      11\n    \n    \n      4\n      93\n      북춘천\n      2023-01-01 12:00:00\n      1.86\n      2023-01-01\n      12\n    \n  \n\n\n\n\n\ndf2 = df2[~df2['지점명'].str.contains('제천|파주|상주|동두천|충주')]\n\n\ndf2 = df2[(df2['hour']>=8) & (df2['hour'] <= 18)]\ndf2.head()\n\n\n\n\n\n  \n    \n      \n      지점\n      지점명\n      일시\n      일사(MJ/m2)\n      Datetime\n      hour\n    \n  \n  \n    \n      0\n      93\n      북춘천\n      2023-01-01 08:00:00\n      0.00\n      2023-01-01\n      8\n    \n    \n      1\n      93\n      북춘천\n      2023-01-01 09:00:00\n      0.32\n      2023-01-01\n      9\n    \n    \n      2\n      93\n      북춘천\n      2023-01-01 10:00:00\n      0.90\n      2023-01-01\n      10\n    \n    \n      3\n      93\n      북춘천\n      2023-01-01 11:00:00\n      1.73\n      2023-01-01\n      11\n    \n    \n      4\n      93\n      북춘천\n      2023-01-01 12:00:00\n      1.86\n      2023-01-01\n      12\n    \n  \n\n\n\n\n\ndf2['hour'].value_counts()\n\n9     660\n10    660\n11    660\n13    660\n14    660\n15    660\n12    659\n16    659\n17    659\n18    659\n8     653\nName: hour, dtype: int64\n\n\n\n# df2.to_csv('./data/prep_test.csv',index=False)"
  },
  {
    "objectID": "posts/2023-03-21-downcasting.html",
    "href": "posts/2023-03-21-downcasting.html",
    "title": "downcasting",
    "section": "",
    "text": "def downcast(df, verbose=True):\n    start_mem = df.memory_usage().sum() / 1024**2\n    for col in df.columns:\n        dtype_name = df[col].dtype.name\n        if dtype_name == 'object':\n            pass\n        elif dtype_name == 'bool':\n            df[col] = df[col].astype('int8')\n        elif dtype_name.startswith('int') or (df[col].round() == df[col]).all():\n            df[col] = pd.to_numeric(df[col], downcast='integer')\n        else:\n            df[col] = pd.to_numeric(df[col], downcast='float')\n    end_mem = df.memory_usage().sum() / 1024**2\n    if verbose:\n        print('{:.1f}% 압축됨'.format(100 * (start_mem - end_mem) / start_mem))\n    \n    return df\nall_df = [sales_train, shops, items, item_categories, test]\nfor df in all_df:\n    df = downcast(df)\n\nint8 (Byte) : -128~127\nint16 (integer) : -32768~32768\nint32 (integer) : -2147483648~2147483647\nint64 (integer) : very very big\nuint8 (unsigned integer) : 0~255\nuint16 (unsigned integer) : 0~65535\nuint32 (unsigned integer) : 0~4294967295\nuint64 (unsigned integer) :0~very very big\nfloat (shortand for float64)\nfloat16 (Half precision float)\nfloat32 (Single precision float)\nfloat64"
  },
  {
    "objectID": "posts/2023-03-21-dv.html",
    "href": "posts/2023-03-21-dv.html",
    "title": "data visualization",
    "section": "",
    "text": "import numpy as np\nimport missingno as msno\nmsno.matrix(df, figsize=(13,6)) ## 결측값을 매트릭스 형태로 시각화\n# msno.bar(df, figsize=(13, 6)) ## bar 형태"
  },
  {
    "objectID": "posts/2023-03-21-dv.html#target-distribution-비율",
    "href": "posts/2023-03-21-dv.html#target-distribution-비율",
    "title": "data visualization",
    "section": "target Distribution (+비율)",
    "text": "target Distribution (+비율)\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nimport matplotlib.pyplot as plt\nplt.rcParams['font.family'] = 'Malgun Gothic'  ## 한글깨짐 방지\ndef write_percent(ax, total_size):\n    for patch in ax.patches:\n        height = patch.get_height() # 도형 높이 (데이터 개수)\n        width = patch.get_width()\n        left_coord = patch.get_x()\n        percent = height/total_size*100 # target ratio\n        \n        ax.text(left_coord + width/2.0,\n                height + total_size*0.001,\n                '{:1.1f}%'.format(percent),\n                ha = 'center')\n   \nmpl.rc('font', size=15)\nplt.figure(figsize=(7,6))\n\nax = sns.countplot(x='target', data=train)\nwrite_percent(ax, len(train))\nax.set_title('Target Distribution')"
  },
  {
    "objectID": "posts/2023-03-21-dv.html#그룹별-요약통계량-분포-시각화",
    "href": "posts/2023-03-21-dv.html#그룹별-요약통계량-분포-시각화",
    "title": "data visualization",
    "section": "그룹별 요약통계량 분포 시각화",
    "text": "그룹별 요약통계량 분포 시각화\nfigure, ax = plt.subplots()\nfigure.set_size_inches(11, 5)\n\n# 상품분류별 총 상품 판매량\ngroup_cat_sum = train.groupby('item_category_id').agg({'item_cnt_day':'sum'})\ngroup_cat_sum = group_cat_sum.reset_index()\n\n# 월간 판매량이 10,000개를 초과하는 상품분류만 추출\ngroup_cat_sum2 = group_cat_sum[group_cat_sum['item_cnt_day'] > 10000].sort_values(by='item_cnt_day', ascending=False)\n\n# 상품분류별 총 상품 판매량 막대 그래프\nsns.barplot(x='item_category_id', y='item_cnt_day', data=group_cat_sum2, order=group_cat_sum2['item_category_id'])\nax.set(title='Distribution of total item counts by item category id',\n       xlabel='Data block number',\n       ylabel='Total item counts')\nax.tick_params(axis='x', labelrotation=90) # x축 라벨 회전\n\n\n\n예시 그림"
  },
  {
    "objectID": "posts/2023-03-30-correlation.html",
    "href": "posts/2023-03-30-correlation.html",
    "title": "Correlation coefficient by region",
    "section": "",
    "text": "library(data.table)\nlibrary(tidyverse)\nlibrary(recipes)\nlibrary(corrplot)\nlibrary(GGally)\n\n\nfile_path <- './data/'\nlist.files(file_path)\n\n[1] \"OBS_ASOS_TIM_data0.csv\" \"OBS_ASOS_TIM_data1.csv\" \"prep_data.csv\"         \n[4] \"prep_test.csv\"          \"raw.csv\"                \"test_raw.csv\"          \n\n\n\ndf1 <- fread(file.path(file_path, 'prep_data.csv'))\nhead(df1)\n\n   지점 지점명                일시 일사(MJ/m2)   Datetime hour\n1:   93 북춘천 2021-01-01 08:00:00        0.00 2021-01-01    8\n2:   93 북춘천 2021-01-01 09:00:00        0.37 2021-01-01    9\n3:   93 북춘천 2021-01-01 10:00:00        0.96 2021-01-01   10\n4:   93 북춘천 2021-01-01 11:00:00        1.40 2021-01-01   11\n5:   93 북춘천 2021-01-01 12:00:00        1.72 2021-01-01   12\n6:   93 북춘천 2021-01-01 13:00:00        1.84 2021-01-01   13\n\n\n\nglimpse(df1)\n\nRows: 352,279\nColumns: 6\n$ 지점          <int> 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, …\n$ 지점명        <chr> \"북춘천\", \"북춘천\", \"북춘천\", \"북춘천\", \"북춘천\", \"북춘…\n$ 일시          <dttm> 2021-01-01 08:00:00, 2021-01-01 09:00:00, 2021-01-01 10…\n$ `일사(MJ/m2)` <dbl> 0.00, 0.37, 0.96, 1.40, 1.72, 1.84, 1.74, 1.30, 0.93, 0.…\n$ Datetime      <IDate> 2021-01-01, 2021-01-01, 2021-01-01, 2021-01-01, 2021-0…\n$ hour          <int> 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 8, 9, 10, 11, …"
  },
  {
    "objectID": "posts/2023-03-30-correlation.html#지역별-일사량-correlation",
    "href": "posts/2023-03-30-correlation.html#지역별-일사량-correlation",
    "title": "Correlation coefficient by region",
    "section": "지역별 일사량 correlation",
    "text": "지역별 일사량 correlation\n\ndf1 <- subset(df1, select = -c(Datetime,hour))\ndf1 %>% head()\n\n   지점 지점명                일시 일사(MJ/m2)\n1:   93 북춘천 2021-01-01 08:00:00        0.00\n2:   93 북춘천 2021-01-01 09:00:00        0.37\n3:   93 북춘천 2021-01-01 10:00:00        0.96\n4:   93 북춘천 2021-01-01 11:00:00        1.40\n5:   93 북춘천 2021-01-01 12:00:00        1.72\n6:   93 북춘천 2021-01-01 13:00:00        1.84\n\n\n\ndf1 <- df1 %>% dcast(일시 + '일사(MJ/m2)' ~ 지점명)\n\nUsing '일사(MJ/m2)' as value column. Use 'value.var' to override\n\ndf1\n\n                     일시 강릉 강진군 경주시 고산 고창 고창군 광양시 광주\n   1: 2021-01-01 08:00:00 0.01   0.01   0.02 0.00 0.01   0.01   0.01 0.06\n   2: 2021-01-01 09:00:00 0.37   0.17   0.45 0.05 0.14   0.22   0.25 0.19\n   3: 2021-01-01 10:00:00 0.97   0.78   0.92 0.15 0.58   0.36   0.86 0.33\n   4: 2021-01-01 11:00:00 1.48   1.75   1.14 0.15 0.61   0.30   1.31 0.66\n   5: 2021-01-01 12:00:00 1.76   1.40   1.40 0.28 1.37   0.73   1.52 1.73\n  ---                                                                    \n8026: 2022-12-31 14:00:00 1.62   2.06   1.82 1.96 1.72   1.28   1.96 1.63\n8027: 2022-12-31 15:00:00 1.30   1.67   1.52 1.58 1.60   1.38   1.62 1.88\n8028: 2022-12-31 16:00:00 0.81   1.16   0.96 1.10 1.15   1.17   1.11 1.14\n8029: 2022-12-31 17:00:00 0.24   0.36   0.35 0.49 0.50   0.48   0.45 0.49\n8030: 2022-12-31 18:00:00 0.01   0.03   0.01 0.05 0.04   0.04   0.03 0.09\n      김해시 대관령 대구 대전 목포 백령도 보성군 부산 북강릉 북창원 북춘천 서산\n   1:   0.01   0.00 0.03 0.01 0.01   0.00   0.02 0.03   0.01   0.01   0.00 0.00\n   2:   0.41   0.29 0.45 0.53 0.30   0.13   0.35 0.47   0.35   0.27   0.37 0.06\n   3:   1.07   1.02 1.03 0.80 1.01   0.65   0.88 1.10   0.92   0.92   0.96 0.18\n   4:   1.49   1.61 1.51 0.81 0.96   1.04   1.38 1.62   1.39   1.22   1.40 0.31\n   5:   1.64   1.96 1.75 0.57 1.01   1.71   1.63 1.94   1.71   1.86   1.72 0.46\n  ---                                                                          \n8026:   1.87   1.64 1.48 0.85 1.82   1.80   1.99 1.97   1.80   1.84   1.45 1.48\n8027:   1.50   1.34 1.44 1.14 1.65   1.19   1.67 1.63   1.46   1.49   0.78 1.39\n8028:   1.00   0.85 1.07 0.55 1.15   0.73   1.15 1.10   0.92   0.97   0.38 0.89\n8029:   0.36   0.23 0.39 0.24 0.54   0.35   0.46 0.43   0.29   0.28   0.15 0.38\n8030:   0.01   0.00 0.01 0.02 0.05   0.04   0.03 0.02   0.00   0.02   0.00 0.02\n      서울 수원 순창군 안동 양산시 여수 영광군 울릉도 원주 의령군 인천 전주\n   1: 0.00 0.00   0.00 0.01   0.01 0.00   0.00   0.00 0.00   0.03 0.00 0.01\n   2: 0.27 0.18   0.24 0.40   0.27 0.30   0.23   0.24 0.35   0.51 0.15 0.51\n   3: 0.76 0.60   0.45 0.99   1.07 0.97   0.34   0.68 1.15   1.37 0.65 1.19\n   4: 1.40 1.22   0.76 0.96   1.60 1.34   1.00   0.51 1.59   1.69 1.20 1.13\n   5: 1.74 1.69   0.65 1.85   1.91 1.40   1.35   0.47 2.02   2.04 1.48 1.19\n  ---                                                                      \n8026: 0.68 0.87   1.59 1.95   1.83 1.96   1.91   1.82 1.16   1.93 0.59 1.79\n8027: 0.57 0.52   1.62 1.35   1.48 1.60   1.55   1.30 0.48   1.61 0.87 1.55\n8028: 0.48 0.67   1.02 0.69   0.94 1.08   1.10   0.55 0.34   1.03 0.95 1.05\n8029: 0.35 0.35   0.35 0.37   0.31 0.47   0.43   0.23 0.08   0.32 0.37 0.42\n8030: 0.02 0.00   0.03 0.00   0.02 0.04   0.01   0.00 0.00   0.01 0.02 0.04\n      제주 진주 창원 철원 청송군 청주 추풍령 춘천 포항 함양군 홍성 흑산도\n   1: 0.00 0.01 0.00 0.00   0.02 0.00   0.00 0.00 0.02   0.00 0.00   0.02\n   2: 0.14 0.54 0.29 0.11   0.46 0.27   0.27 0.31 0.38   0.25 0.07   0.15\n   3: 0.27 1.25 0.87 0.74   1.05 0.85   0.56 0.96 1.03   1.05 0.26   0.61\n   4: 0.47 1.59 1.41 1.37   1.26 0.75   0.69 1.46 1.53   1.65 0.43   0.56\n   5: 0.26 1.89 1.73 1.74   1.92 0.96   0.63 1.68 1.81   1.52 0.49   0.57\n  ---                                                                    \n8026: 1.57 1.98 1.69 0.47   1.81 1.28   0.86 0.77 1.77   1.31 1.27   1.94\n8027: 1.51 1.63 1.36 0.62   1.48 0.63   1.15 0.43 1.41   1.53 0.59   1.60\n8028: 0.96 1.08 0.88 0.44   0.96 0.54   0.62 0.26 0.91   1.01 0.86   1.19\n8029: 0.43 0.38 0.26 0.19   0.16 0.29   0.29 0.07 0.33   0.40 0.34   0.46\n8030: 0.01 0.01 0.00 0.00   0.01 0.00   0.00 0.00 0.00   0.02 0.01   0.06\n\n\n\nnum_vars <- df1 %>% select(-일시)\nweight <- cor(num_vars, use = 'pairwise.complete.obs')\n\n\ncorrplot(round(weight,2), method = 'number')"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "noteda",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nMar 30, 2023\n\n\nCorrelation coefficient by region\n\n\njiyun Lim\n\n\n\n\nMar 29, 2023\n\n\nData preprocessing\n\n\njiyun Lim\n\n\n\n\nMar 21, 2023\n\n\nScorecard\n\n\njiyun Lim\n\n\n\n\nMar 21, 2023\n\n\ndata visualization\n\n\njiyun Lim\n\n\n\n\nMar 21, 2023\n\n\ndowncasting\n\n\njiyun Lim\n\n\n\n\n\nMar 21, 2023\n\n\nresumetable\n\n\njiyun Lim\n\n\n\n\nMar 18, 2023\n\n\nWelcome To My Blog\n\n\nTristan O’Malley\n\n\n\n\nMar 14, 2023\n\n\nLists to read\n\n\njiyun Lim\n\n\n\n\n\n\nNo matching items"
  }
]